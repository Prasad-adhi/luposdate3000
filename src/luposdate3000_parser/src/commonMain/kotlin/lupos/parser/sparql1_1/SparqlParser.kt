package lupos.parser.sparql1_1

public class SparqlParser(bufferDefinedInputStreamParam: lupos.shared.IMyInputStream) {

    public class ASTAnonymous(public val value: String) : IASTBase {
        override fun astAssign(childID: Int, value: Any) {}
        override fun toString(): String = "{\"type\":\"ASTAnonymous\",\"value\":\"$value\"}"
    }

    public sealed interface ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery

    public class ASTValuesClauseOptional : IASTBase {
        public var variable0: ASTValuesClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTValuesClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTValuesClause
        }
    }

    public class ASTClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptional : ASTInterfaceOfClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptionalOrClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional, IASTBase {
        public var variable0: ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery? = null
        public var variable1: ASTValuesClauseOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery
                1 -> variable1 = value as ASTValuesClauseOptional
            }
        }
    }

    public class ASTClassOfPrologueAndUpdate : IASTBase {
        public var variable0: ASTPrologue? = null
        public var variable1: ASTUpdate? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfPrologueAndUpdate\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPrologue
                1 -> variable1 = value as ASTUpdate
            }
        }
    }

    public class ASTClassOfPrologueAndUpdateOptional : IASTBase {
        public var variable0: ASTClassOfPrologueAndUpdate? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfPrologueAndUpdateOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfPrologueAndUpdate
        }
    }

    public class ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional : IASTBase {
        public var variable0: ASTUpdate1? = null
        public var variable1: ASTClassOfPrologueAndUpdateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTUpdate1
                1 -> variable1 = value as ASTClassOfPrologueAndUpdateOptional
            }
        }
    }

    public class ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional : ASTInterfaceOfClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptionalOrClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional, IASTBase {
        public var variable0: ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional
        }
    }

    public sealed interface ASTInterfaceOfClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptionalOrClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional

    public class ASTSparqlDoc : IASTBase {
        public var variable0: ASTPrologue? = null
        public var variable1: ASTInterfaceOfClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptionalOrClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSparqlDoc\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPrologue
                1 -> variable1 = value as ASTInterfaceOfClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptionalOrClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional
            }
        }
    }

    public class ASTUpdate : IASTBase {
        public var variable0: ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUpdate\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional
        }
    }

    public sealed interface ASTInterfaceOfBaseDeclOrPrefixDecl

    public class ASTPrologue : IASTBase {
        public val value: MutableList<ASTInterfaceOfBaseDeclOrPrefixDecl> = mutableListOf<ASTInterfaceOfBaseDeclOrPrefixDecl>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfBaseDeclOrPrefixDecl)
        }

        override fun toString(): String = "{\"type\":\"ASTPrologue\",\"value\":$value}"
    }

    public class ASTBaseDecl : ASTInterfaceOfBaseDeclOrPrefixDecl, IASTBase {
        public var IRIREF: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBaseDecl\"")
            res.add("\"IRIREF\" : \"${IRIREF}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            IRIREF = value as String
        }
    }

    public class ASTPrefixDecl : ASTInterfaceOfBaseDeclOrPrefixDecl, IASTBase {
        public var PNAME_NS: String? = null
        public var IRIREF: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPrefixDecl\"")
            res.add("\"PNAME_NS\" : \"${PNAME_NS}\"")
            res.add("\"IRIREF\" : \"${IRIREF}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> PNAME_NS = value as String
                1 -> IRIREF = value as String
            }
        }
    }

    public class ASTListOfDatasetClause : IASTBase {
        public val value: MutableList<ASTDatasetClause> = mutableListOf<ASTDatasetClause>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTDatasetClause)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfDatasetClause\",\"value\":$value}"
    }

    public class ASTSelectQuery : ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery, IASTBase {
        public var variable0: ASTSelectClause? = null
        public var variable1: ASTListOfDatasetClause? = null
        public var variable2: ASTWhereClause? = null
        public var variable3: ASTSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSelectQuery\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTSelectClause
                1 -> variable1 = value as ASTListOfDatasetClause
                2 -> variable2 = value as ASTWhereClause
                3 -> variable3 = value as ASTSolutionModifier
            }
        }
    }

    public class ASTSubSelect : ASTInterfaceOfSubSelectOrGroupGraphPatternSub, IASTBase {
        public var variable0: ASTSelectClause? = null
        public var variable1: ASTWhereClause? = null
        public var variable2: ASTSolutionModifier? = null
        public var variable3: ASTValuesClauseOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSubSelect\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTSelectClause
                1 -> variable1 = value as ASTWhereClause
                2 -> variable2 = value as ASTSolutionModifier
                3 -> variable3 = value as ASTValuesClauseOptional
            }
        }
    }

    public object ASTEnumOfDISTINCTAndREDUCED {
        public const val _UNDEFINED: Int = -1
        public const val DISTINCT: Int = 0
        public const val REDUCED: Int = 1
        public const val _COUNT: Int = 2
        public val values: Array<String> = arrayOf("DISTINCT", "REDUCED")
    }

    public class ASTClassOfExpressionAndVar : ASTInterfaceOfVarOrClassOfExpressionAndVar, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfExpressionAndVar\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTVar
            }
        }
    }

    public sealed interface ASTInterfaceOfVarOrClassOfExpressionAndVar

    public class ASTListOfInterfaceOfVarOrClassOfExpressionAndVar : ASTInterfaceOfListOfInterfaceOfVarOrClassOfExpressionAndVarOrSelectClauseAll, IASTBase {
        public val value: MutableList<ASTInterfaceOfVarOrClassOfExpressionAndVar> = mutableListOf<ASTInterfaceOfVarOrClassOfExpressionAndVar>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfVarOrClassOfExpressionAndVar)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfInterfaceOfVarOrClassOfExpressionAndVar\",\"value\":$value}"
    }

    public sealed interface ASTInterfaceOfListOfInterfaceOfVarOrClassOfExpressionAndVarOrSelectClauseAll

    public class ASTSelectClause : IASTBase {
        public var variable0: Int? = null
        public var variable1: ASTInterfaceOfListOfInterfaceOfVarOrClassOfExpressionAndVarOrSelectClauseAll? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSelectClause\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = ASTEnumOfDISTINCTAndREDUCED.values.indexOf((value as ASTAnonymous).value)
                1 -> variable1 = value as ASTInterfaceOfListOfInterfaceOfVarOrClassOfExpressionAndVarOrSelectClauseAll
            }
        }
    }

    public class ASTSelectClauseAll : ASTInterfaceOfListOfInterfaceOfVarOrClassOfExpressionAndVarOrSelectClauseAll, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSelectClauseAll\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier : ASTInterfaceOfClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifierOrClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier, IASTBase {
        public var variable0: ASTConstructTemplate? = null
        public var variable1: ASTListOfDatasetClause? = null
        public var variable2: ASTWhereClause? = null
        public var variable3: ASTSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTConstructTemplate
                1 -> variable1 = value as ASTListOfDatasetClause
                2 -> variable2 = value as ASTWhereClause
                3 -> variable3 = value as ASTSolutionModifier
            }
        }
    }

    public class ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier : ASTInterfaceOfClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifierOrClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier, IASTBase {
        public var variable0: ASTListOfDatasetClause? = null
        public var variable1: ASTGroupGraphPattern? = null
        public var variable2: ASTSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTListOfDatasetClause
                1 -> variable1 = value as ASTGroupGraphPattern
                2 -> variable2 = value as ASTSolutionModifier
            }
        }
    }

    public sealed interface ASTInterfaceOfClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifierOrClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier

    public class ASTConstructQuery : ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery, IASTBase {
        public var variable0: ASTInterfaceOfClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifierOrClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConstructQuery\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifierOrClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier
        }
    }

    public class ASTListOfVarOrIri : ASTInterfaceOfListOfVarOrIriOrDescribeQueryAll, IASTBase {
        public val value: MutableList<ASTVarOrIri> = mutableListOf<ASTVarOrIri>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTVarOrIri)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfVarOrIri\",\"value\":$value}"
    }

    public sealed interface ASTInterfaceOfListOfVarOrIriOrDescribeQueryAll

    public class ASTWhereClauseOptional : IASTBase {
        public var variable0: ASTWhereClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTWhereClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTWhereClause
        }
    }

    public class ASTDescribeQuery : ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery, IASTBase {
        public var variable0: ASTInterfaceOfListOfVarOrIriOrDescribeQueryAll? = null
        public var variable1: ASTListOfDatasetClause? = null
        public var variable2: ASTWhereClauseOptional? = null
        public var variable3: ASTSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDescribeQuery\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfListOfVarOrIriOrDescribeQueryAll
                1 -> variable1 = value as ASTListOfDatasetClause
                2 -> variable2 = value as ASTWhereClauseOptional
                3 -> variable3 = value as ASTSolutionModifier
            }
        }
    }

    public class ASTDescribeQueryAll : ASTInterfaceOfListOfVarOrIriOrDescribeQueryAll, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDescribeQueryAll\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTAskQuery : ASTInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQuery, IASTBase {
        public var variable0: ASTListOfDatasetClause? = null
        public var variable1: ASTWhereClause? = null
        public var variable2: ASTSolutionModifier? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAskQuery\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTListOfDatasetClause
                1 -> variable1 = value as ASTWhereClause
                2 -> variable2 = value as ASTSolutionModifier
            }
        }
    }

    public sealed interface ASTInterfaceOfDefaultGraphClauseOrNamedGraphClause

    public class ASTDatasetClause : IASTBase {
        public var variable0: ASTInterfaceOfDefaultGraphClauseOrNamedGraphClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDatasetClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfDefaultGraphClauseOrNamedGraphClause
        }
    }

    public class ASTDefaultGraphClause : ASTInterfaceOfDefaultGraphClauseOrNamedGraphClause, IASTBase {
        public var variable0: ASTSourceSelector? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDefaultGraphClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTSourceSelector
        }
    }

    public class ASTNamedGraphClause : ASTInterfaceOfDefaultGraphClauseOrNamedGraphClause, IASTBase {
        public var variable0: ASTSourceSelector? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNamedGraphClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTSourceSelector
        }
    }

    public class ASTSourceSelector : IASTBase {
        public var variable0: ASTiri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSourceSelector\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTiri
        }
    }

    public class ASTWhereClause : IASTBase {
        public var WHERE: Boolean = false
        public var variable1: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTWhereClause\"")
            res.add("\"WHERE\": $WHERE")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> WHERE = true
                1 -> variable1 = value as ASTGroupGraphPattern
            }
        }
    }

    public class ASTGroupClauseOptional : IASTBase {
        public var variable0: ASTGroupClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGroupClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGroupClause
        }
    }

    public class ASTHavingClauseOptional : IASTBase {
        public var variable0: ASTHavingClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTHavingClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTHavingClause
        }
    }

    public class ASTOrderClauseOptional : IASTBase {
        public var variable0: ASTOrderClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOrderClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTOrderClause
        }
    }

    public class ASTLimitOffsetClausesOptional : IASTBase {
        public var variable0: ASTLimitOffsetClauses? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTLimitOffsetClausesOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTLimitOffsetClauses
        }
    }

    public class ASTSolutionModifier : IASTBase {
        public var variable0: ASTGroupClauseOptional? = null
        public var variable1: ASTHavingClauseOptional? = null
        public var variable2: ASTOrderClauseOptional? = null
        public var variable3: ASTLimitOffsetClausesOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSolutionModifier\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTGroupClauseOptional
                1 -> variable1 = value as ASTHavingClauseOptional
                2 -> variable2 = value as ASTOrderClauseOptional
                3 -> variable3 = value as ASTLimitOffsetClausesOptional
            }
        }
    }

    public class ASTListOfGroupCondition : IASTBase {
        public val value: MutableList<ASTGroupCondition> = mutableListOf<ASTGroupCondition>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTGroupCondition)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfGroupCondition\",\"value\":$value}"
    }

    public class ASTGroupClause : IASTBase {
        public var variable0: ASTListOfGroupCondition? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGroupClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTListOfGroupCondition
        }
    }

    public class ASTVarOptional : IASTBase {
        public var variable0: ASTVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTVarOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTVar
        }
    }

    public class ASTClassOfExpressionAndVarOptional : ASTGroupCondition, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTVarOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfExpressionAndVarOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTVarOptional
            }
        }
    }

    public sealed interface ASTGroupCondition : IASTBase

    public class ASTListOfHavingCondition : IASTBase {
        public val value: MutableList<ASTHavingCondition> = mutableListOf<ASTHavingCondition>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTHavingCondition)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfHavingCondition\",\"value\":$value}"
    }

    public class ASTHavingClause : IASTBase {
        public var variable0: ASTListOfHavingCondition? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTHavingClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTListOfHavingCondition
        }
    }

    public class ASTHavingCondition : IASTBase {
        public var variable0: ASTConstraint? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTHavingCondition\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConstraint
        }
    }

    public class ASTListOfOrderCondition : IASTBase {
        public val value: MutableList<ASTOrderCondition> = mutableListOf<ASTOrderCondition>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTOrderCondition)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfOrderCondition\",\"value\":$value}"
    }

    public class ASTOrderClause : IASTBase {
        public var variable0: ASTListOfOrderCondition? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOrderClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTListOfOrderCondition
        }
    }

    public object ASTEnumOfASCAndDESC {
        public const val _UNDEFINED: Int = -1
        public const val ASC: Int = 0
        public const val DESC: Int = 1
        public const val _COUNT: Int = 2
        public val values: Array<String> = arrayOf("ASC", "DESC")
    }

    public sealed interface ASTInterfaceOfConstraintOrVar

    public class ASTOrderCondition : IASTBase {
        public var variable0: Int? = null
        public var variable1: ASTInterfaceOfConstraintOrVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOrderCondition\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = ASTEnumOfASCAndDESC.values.indexOf((value as ASTAnonymous).value)
                1 -> variable1 = value as ASTInterfaceOfConstraintOrVar
            }
        }
    }

    public class ASTOffsetClauseOptional : IASTBase {
        public var variable0: ASTOffsetClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOffsetClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTOffsetClause
        }
    }

    public class ASTClassOfLimitClauseAndOffsetClauseOptional : ASTLimitOffsetClauses, IASTBase {
        public var variable0: ASTLimitClause? = null
        public var variable1: ASTOffsetClauseOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfLimitClauseAndOffsetClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTLimitClause
                1 -> variable1 = value as ASTOffsetClauseOptional
            }
        }
    }

    public class ASTLimitClauseOptional : IASTBase {
        public var variable0: ASTLimitClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTLimitClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTLimitClause
        }
    }

    public class ASTClassOfOffsetClauseAndLimitClauseOptional : ASTLimitOffsetClauses, IASTBase {
        public var variable0: ASTOffsetClause? = null
        public var variable1: ASTLimitClauseOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfOffsetClauseAndLimitClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTOffsetClause
                1 -> variable1 = value as ASTLimitClauseOptional
            }
        }
    }

    public sealed interface ASTLimitOffsetClauses : IASTBase

    public class ASTLimitClause : IASTBase {
        public var INTEGER: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTLimitClause\"")
            res.add("\"INTEGER\" : \"${INTEGER}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER = value as String
        }
    }

    public class ASTOffsetClause : IASTBase {
        public var INTEGER: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOffsetClause\"")
            res.add("\"INTEGER\" : \"${INTEGER}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER = value as String
        }
    }

    public sealed interface ASTUpdate1 : IASTBase

    public class ASTGraphRefOptional : IASTBase {
        public var variable0: ASTGraphRef? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphRefOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGraphRef
        }
    }

    public class ASTLoad : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTiri? = null
        public var variable2: ASTGraphRefOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTLoad\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTiri
                2 -> variable2 = value as ASTGraphRefOptional
            }
        }
    }

    public class ASTClear : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphRefAll? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClear\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphRefAll
            }
        }
    }

    public class ASTDrop : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphRefAll? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDrop\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphRefAll
            }
        }
    }

    public class ASTCreate : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphRef? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTCreate\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphRef
            }
        }
    }

    public class ASTAdd : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphOrDefault? = null
        public var variable2: ASTGraphOrDefault? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdd\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphOrDefault
                2 -> variable2 = value as ASTGraphOrDefault
            }
        }
    }

    public class ASTMove : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphOrDefault? = null
        public var variable2: ASTGraphOrDefault? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTMove\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphOrDefault
                2 -> variable2 = value as ASTGraphOrDefault
            }
        }
    }

    public class ASTCopy : ASTUpdate1, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTGraphOrDefault? = null
        public var variable2: ASTGraphOrDefault? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTCopy\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTGraphOrDefault
                2 -> variable2 = value as ASTGraphOrDefault
            }
        }
    }

    public class ASTInsertData : ASTUpdate1, IASTBase {
        public var variable0: ASTQuadData? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInsertData\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuadData
        }
    }

    public class ASTDeleteData : ASTUpdate1, IASTBase {
        public var variable0: ASTQuadData? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDeleteData\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuadData
        }
    }

    public class ASTDeleteWhere : ASTUpdate1, IASTBase {
        public var variable0: ASTQuadPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDeleteWhere\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuadPattern
        }
    }

    public class ASTiriOptional : IASTBase {
        public var variable0: ASTiri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTiriOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTiri
        }
    }

    public class ASTInsertClauseOptional : IASTBase {
        public var variable0: ASTInsertClause? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInsertClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInsertClause
        }
    }

    public class ASTClassOfDeleteClauseAndInsertClauseOptional : ASTInterfaceOfClassOfDeleteClauseAndInsertClauseOptionalOrInsertClause, IASTBase {
        public var variable0: ASTDeleteClause? = null
        public var variable1: ASTInsertClauseOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfDeleteClauseAndInsertClauseOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTDeleteClause
                1 -> variable1 = value as ASTInsertClauseOptional
            }
        }
    }

    public sealed interface ASTInterfaceOfClassOfDeleteClauseAndInsertClauseOptionalOrInsertClause

    public class ASTListOfUsingClause : IASTBase {
        public val value: MutableList<ASTUsingClause> = mutableListOf<ASTUsingClause>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTUsingClause)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfUsingClause\",\"value\":$value}"
    }

    public class ASTModify : ASTUpdate1, IASTBase {
        public var variable0: ASTiriOptional? = null
        public var variable1: ASTInterfaceOfClassOfDeleteClauseAndInsertClauseOptionalOrInsertClause? = null
        public var variable2: ASTListOfUsingClause? = null
        public var variable3: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTModify\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTiriOptional
                1 -> variable1 = value as ASTInterfaceOfClassOfDeleteClauseAndInsertClauseOptionalOrInsertClause
                2 -> variable2 = value as ASTListOfUsingClause
                3 -> variable3 = value as ASTGroupGraphPattern
            }
        }
    }

    public class ASTDeleteClause : IASTBase {
        public var variable0: ASTQuadPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTDeleteClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuadPattern
        }
    }

    public class ASTInsertClause : ASTInterfaceOfClassOfDeleteClauseAndInsertClauseOptionalOrInsertClause, IASTBase {
        public var variable0: ASTQuadPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInsertClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuadPattern
        }
    }

    public class ASTUsingClause : IASTBase {
        public var variable0: ASTiri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUsingClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTiri
        }
    }

    public class ASTClassOfGRAPHAndiri : ASTGraphOrDefault, IASTBase {
        public var GRAPH: Boolean = false
        public var variable1: ASTiri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfGRAPHAndiri\"")
            res.add("\"GRAPH\": $GRAPH")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> GRAPH = true
                1 -> variable1 = value as ASTiri
            }
        }
    }

    public sealed interface ASTGraphOrDefault : IASTBase

    public class ASTGraphRef : ASTGraphRefAll, IASTBase {
        public var variable0: ASTiri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphRef\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTiri
        }
    }

    public sealed interface ASTGraphRefAll : IASTBase

    public class ASTGraphRefDefault : ASTGraphOrDefault, ASTGraphRefAll, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphRefDefault\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTGraphRefNamed : ASTGraphRefAll, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphRefNamed\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTGraphRefAll2 : ASTGraphRefAll, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphRefAll2\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTQuadPattern : IASTBase {
        public var variable0: ASTQuads? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTQuadPattern\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuads
        }
    }

    public class ASTQuadData : IASTBase {
        public var variable0: ASTQuads? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTQuadData\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTQuads
        }
    }

    public class ASTTriplesTemplateOptional : IASTBase {
        public var variable0: ASTTriplesTemplate? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesTemplateOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTTriplesTemplate
        }
    }

    public class ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional : IASTBase {
        public var variable0: ASTQuadsNotTriples? = null
        public var point: Boolean = false
        public var variable2: ASTTriplesTemplateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"point\": $point")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTQuadsNotTriples
                1 -> point = true
                2 -> variable2 = value as ASTTriplesTemplateOptional
            }
        }
    }

    public class ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional : IASTBase {
        public val value: MutableList<ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional> = mutableListOf<ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional\",\"value\":$value}"
    }

    public class ASTQuads : IASTBase {
        public var variable0: ASTTriplesTemplateOptional? = null
        public var variable1: ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTQuads\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesTemplateOptional
                1 -> variable1 = value as ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional
            }
        }
    }

    public class ASTQuadsNotTriples : IASTBase {
        public var variable0: ASTVarOrIri? = null
        public var variable1: ASTTriplesTemplateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTQuadsNotTriples\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVarOrIri
                1 -> variable1 = value as ASTTriplesTemplateOptional
            }
        }
    }

    public class ASTTriplesTemplateOptionalOptional : IASTBase {
        public var variable0: ASTTriplesTemplateOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesTemplateOptionalOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTTriplesTemplateOptional
        }
    }

    public class ASTTriplesTemplate : IASTBase {
        public var variable0: ASTTriplesSameSubject? = null
        public var variable1: ASTTriplesTemplateOptionalOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesTemplate\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesSameSubject
                1 -> variable1 = value as ASTTriplesTemplateOptionalOptional
            }
        }
    }

    public sealed interface ASTInterfaceOfSubSelectOrGroupGraphPatternSub

    public class ASTGroupGraphPattern : IASTBase {
        public var variable0: ASTInterfaceOfSubSelectOrGroupGraphPatternSub? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGroupGraphPattern\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfSubSelectOrGroupGraphPatternSub
        }
    }

    public class ASTTriplesBlockOptional : IASTBase {
        public var variable0: ASTTriplesBlock? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesBlockOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTTriplesBlock
        }
    }

    public class ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional : IASTBase {
        public var variable0: ASTGraphPatternNotTriples? = null
        public var point: Boolean = false
        public var variable2: ASTTriplesBlockOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"point\": $point")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTGraphPatternNotTriples
                1 -> point = true
                2 -> variable2 = value as ASTTriplesBlockOptional
            }
        }
    }

    public class ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional : IASTBase {
        public val value: MutableList<ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional> = mutableListOf<ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional\",\"value\":$value}"
    }

    public class ASTGroupGraphPatternSub : ASTInterfaceOfSubSelectOrGroupGraphPatternSub, IASTBase {
        public var variable0: ASTTriplesBlockOptional? = null
        public var variable1: ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGroupGraphPatternSub\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesBlockOptional
                1 -> variable1 = value as ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional
            }
        }
    }

    public class ASTTriplesBlockOptionalOptional : IASTBase {
        public var variable0: ASTTriplesBlockOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesBlockOptionalOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTTriplesBlockOptional
        }
    }

    public class ASTTriplesBlock : IASTBase {
        public var variable0: ASTTriplesSameSubjectPath? = null
        public var variable1: ASTTriplesBlockOptionalOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTTriplesBlock\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesSameSubjectPath
                1 -> variable1 = value as ASTTriplesBlockOptionalOptional
            }
        }
    }

    public sealed interface ASTGraphPatternNotTriples : IASTBase

    public class ASTOptionalGraphPattern : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTOptionalGraphPattern\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGroupGraphPattern
        }
    }

    public class ASTGraphGraphPattern : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTVarOrIri? = null
        public var variable1: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGraphGraphPattern\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVarOrIri
                1 -> variable1 = value as ASTGroupGraphPattern
            }
        }
    }

    public class ASTServiceGraphPattern : ASTGraphPatternNotTriples, IASTBase {
        public var SILENT: Boolean = false
        public var variable1: ASTVarOrIri? = null
        public var variable2: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTServiceGraphPattern\"")
            res.add("\"SILENT\": $SILENT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> SILENT = true
                1 -> variable1 = value as ASTVarOrIri
                2 -> variable2 = value as ASTGroupGraphPattern
            }
        }
    }

    public class ASTBind : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBind\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTVar
            }
        }
    }

    public class ASTValuesClause : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTDataBlock? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTValuesClause\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTDataBlock
        }
    }

    public sealed interface ASTDataBlock : IASTBase

    public class ASTListOfDataBlockValue : ASTInterfaceOfListOfDataBlockValueOrNILParam, IASTBase {
        public val value: MutableList<ASTDataBlockValue> = mutableListOf<ASTDataBlockValue>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTDataBlockValue)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfDataBlockValue\",\"value\":$value}"
    }

    public class ASTInlineDataOneVar : ASTDataBlock, IASTBase {
        public var variable0: ASTVar? = null
        public var variable1: ASTListOfDataBlockValue? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInlineDataOneVar\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVar
                1 -> variable1 = value as ASTListOfDataBlockValue
            }
        }
    }

    public class ASTListOfVar : ASTInterfaceOfNILParamOrListOfVar, IASTBase {
        public val value: MutableList<ASTVar> = mutableListOf<ASTVar>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTVar)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfVar\",\"value\":$value}"
    }

    public sealed interface ASTInterfaceOfNILParamOrListOfVar

    public sealed interface ASTInterfaceOfListOfDataBlockValueOrNILParam

    public class ASTListOfInterfaceOfListOfDataBlockValueOrNILParam : IASTBase {
        public val value: MutableList<ASTInterfaceOfListOfDataBlockValueOrNILParam> = mutableListOf<ASTInterfaceOfListOfDataBlockValueOrNILParam>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfListOfDataBlockValueOrNILParam)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfInterfaceOfListOfDataBlockValueOrNILParam\",\"value\":$value}"
    }

    public class ASTInlineDataFull : ASTDataBlock, IASTBase {
        public var variable0: ASTInterfaceOfNILParamOrListOfVar? = null
        public var variable1: ASTListOfInterfaceOfListOfDataBlockValueOrNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInlineDataFull\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfNILParamOrListOfVar
                1 -> variable1 = value as ASTListOfInterfaceOfListOfDataBlockValueOrNILParam
            }
        }
    }

    public sealed interface ASTDataBlockValue : IASTBase

    public class ASTUNDEF : ASTDataBlockValue, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUNDEF\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTMinusGraphPattern : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTMinusGraphPattern\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGroupGraphPattern
        }
    }

    public class ASTListOfGroupGraphPattern : IASTBase {
        public val value: MutableList<ASTGroupGraphPattern> = mutableListOf<ASTGroupGraphPattern>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTGroupGraphPattern)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfGroupGraphPattern\",\"value\":$value}"
    }

    public class ASTGroupOrUnionGraphPattern : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTGroupGraphPattern? = null
        public var variable1: ASTListOfGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTGroupOrUnionGraphPattern\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTGroupGraphPattern
                1 -> variable1 = value as ASTListOfGroupGraphPattern
            }
        }
    }

    public class ASTFilter : ASTGraphPatternNotTriples, IASTBase {
        public var variable0: ASTConstraint? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTFilter\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConstraint
        }
    }

    public sealed interface ASTConstraint : ASTInterfaceOfConstraintOrVar, IASTBase

    public class ASTFunctionCall : ASTGroupCondition, ASTConstraint, IASTBase {
        public var variable0: ASTiri? = null
        public var variable1: ASTArgList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTFunctionCall\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTiri
                1 -> variable1 = value as ASTArgList
            }
        }
    }

    public class ASTListOfExpression : IASTBase {
        public val value: MutableList<ASTExpression> = mutableListOf<ASTExpression>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTExpression)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfExpression\",\"value\":$value}"
    }

    public class ASTClassOfDISTINCTAndExpressionAndListOfExpression : ASTArgList, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        public var variable2: ASTListOfExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfDISTINCTAndExpressionAndListOfExpression\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTListOfExpression
            }
        }
    }

    public sealed interface ASTArgList : IASTBase

    public class ASTClassOfExpressionAndListOfExpression : ASTExpressionList, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTListOfExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfExpressionAndListOfExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTListOfExpression
            }
        }
    }

    public sealed interface ASTExpressionList : IASTBase

    public class ASTConstructTriplesOptional : IASTBase {
        public var variable0: ASTConstructTriples? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConstructTriplesOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConstructTriples
        }
    }

    public class ASTConstructTemplate : IASTBase {
        public var variable0: ASTConstructTriplesOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConstructTemplate\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConstructTriplesOptional
        }
    }

    public class ASTConstructTriplesOptionalOptional : IASTBase {
        public var variable0: ASTConstructTriplesOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConstructTriplesOptionalOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConstructTriplesOptional
        }
    }

    public class ASTConstructTriples : IASTBase {
        public var variable0: ASTTriplesSameSubject? = null
        public var variable1: ASTConstructTriplesOptionalOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConstructTriples\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesSameSubject
                1 -> variable1 = value as ASTConstructTriplesOptionalOptional
            }
        }
    }

    public class ASTClassOfVarOrTermAndPropertyListNotEmpty : ASTTriplesSameSubject, IASTBase {
        public var variable0: ASTVarOrTerm? = null
        public var variable1: ASTPropertyListNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfVarOrTermAndPropertyListNotEmpty\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVarOrTerm
                1 -> variable1 = value as ASTPropertyListNotEmpty
            }
        }
    }

    public class ASTPropertyListOptional : IASTBase {
        public var variable0: ASTPropertyList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyListOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyList
        }
    }

    public class ASTClassOfTriplesNodeAndPropertyListOptional : ASTTriplesSameSubject, IASTBase {
        public var variable0: ASTTriplesNode? = null
        public var variable1: ASTPropertyListOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfTriplesNodeAndPropertyListOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesNode
                1 -> variable1 = value as ASTPropertyListOptional
            }
        }
    }

    public sealed interface ASTTriplesSameSubject : IASTBase

    public class ASTPropertyList : IASTBase {
        public var variable0: ASTPropertyListNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyList\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyListNotEmpty
        }
    }

    public class ASTClassOfVerbAndObjectList : IASTBase {
        public var variable0: ASTVerb? = null
        public var variable1: ASTObjectList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfVerbAndObjectList\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVerb
                1 -> variable1 = value as ASTObjectList
            }
        }
    }

    public class ASTClassOfVerbAndObjectListOptional : IASTBase {
        public var variable0: ASTClassOfVerbAndObjectList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfVerbAndObjectListOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfVerbAndObjectList
        }
    }

    public class ASTListOfClassOfVerbAndObjectListOptional : IASTBase {
        public val value: MutableList<ASTClassOfVerbAndObjectListOptional> = mutableListOf<ASTClassOfVerbAndObjectListOptional>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTClassOfVerbAndObjectListOptional)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfClassOfVerbAndObjectListOptional\",\"value\":$value}"
    }

    public class ASTPropertyListNotEmpty : IASTBase {
        public var variable0: ASTVerb? = null
        public var variable1: ASTObjectList? = null
        public var variable2: ASTListOfClassOfVerbAndObjectListOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyListNotEmpty\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVerb
                1 -> variable1 = value as ASTObjectList
                2 -> variable2 = value as ASTListOfClassOfVerbAndObjectListOptional
            }
        }
    }

    public sealed interface ASTVerb : IASTBase

    public class ASTRDFType : ASTVerb, ASTPathPrimary, ASTInterfaceOfiriOrRDFType, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRDFType\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTListOfObject : IASTBase {
        public val value: MutableList<ASTObject> = mutableListOf<ASTObject>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTObject)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfObject\",\"value\":$value}"
    }

    public class ASTObjectList : IASTBase {
        public var variable0: ASTObject? = null
        public var variable1: ASTListOfObject? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTObjectList\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTObject
                1 -> variable1 = value as ASTListOfObject
            }
        }
    }

    public class ASTObject : IASTBase {
        public var variable0: ASTGraphNode? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTObject\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGraphNode
        }
    }

    public class ASTClassOfVarOrTermAndPropertyListPathNotEmpty : ASTTriplesSameSubjectPath, IASTBase {
        public var variable0: ASTVarOrTerm? = null
        public var variable1: ASTPropertyListPathNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfVarOrTermAndPropertyListPathNotEmpty\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTVarOrTerm
                1 -> variable1 = value as ASTPropertyListPathNotEmpty
            }
        }
    }

    public class ASTPropertyListPathOptional : IASTBase {
        public var variable0: ASTPropertyListPath? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyListPathOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyListPath
        }
    }

    public class ASTClassOfTriplesNodePathAndPropertyListPathOptional : ASTTriplesSameSubjectPath, IASTBase {
        public var variable0: ASTTriplesNodePath? = null
        public var variable1: ASTPropertyListPathOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfTriplesNodePathAndPropertyListPathOptional\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTTriplesNodePath
                1 -> variable1 = value as ASTPropertyListPathOptional
            }
        }
    }

    public sealed interface ASTTriplesSameSubjectPath : IASTBase

    public class ASTPropertyListPath : IASTBase {
        public var variable0: ASTPropertyListPathNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyListPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyListPathNotEmpty
        }
    }

    public sealed interface ASTInterfaceOfVerbPathOrVerbSimple

    public class ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList : IASTBase {
        public var variable0: ASTInterfaceOfVerbPathOrVerbSimple? = null
        public var variable1: ASTObjectList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfVerbPathOrVerbSimple
                1 -> variable1 = value as ASTObjectList
            }
        }
    }

    public class ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional : IASTBase {
        public var variable0: ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList
        }
    }

    public class ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional : IASTBase {
        public val value: MutableList<ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional> = mutableListOf<ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional\",\"value\":$value}"
    }

    public class ASTPropertyListPathNotEmpty : IASTBase {
        public var variable0: ASTInterfaceOfVerbPathOrVerbSimple? = null
        public var variable1: ASTObjectListPath? = null
        public var variable2: ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPropertyListPathNotEmpty\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfVerbPathOrVerbSimple
                1 -> variable1 = value as ASTObjectListPath
                2 -> variable2 = value as ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional
            }
        }
    }

    public class ASTVerbPath : ASTInterfaceOfVerbPathOrVerbSimple, IASTBase {
        public var variable0: ASTPath? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTVerbPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPath
        }
    }

    public class ASTVerbSimple : ASTInterfaceOfVerbPathOrVerbSimple, IASTBase {
        public var variable0: ASTVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTVerbSimple\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTVar
        }
    }

    public class ASTListOfObjectPath : IASTBase {
        public val value: MutableList<ASTObjectPath> = mutableListOf<ASTObjectPath>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTObjectPath)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfObjectPath\",\"value\":$value}"
    }

    public class ASTObjectListPath : IASTBase {
        public var variable0: ASTObjectPath? = null
        public var variable1: ASTListOfObjectPath? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTObjectListPath\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTObjectPath
                1 -> variable1 = value as ASTListOfObjectPath
            }
        }
    }

    public class ASTObjectPath : IASTBase {
        public var variable0: ASTGraphNodePath? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTObjectPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGraphNodePath
        }
    }

    public class ASTPath : ASTPathPrimary, IASTBase {
        public var variable0: ASTPathAlternative? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPathAlternative
        }
    }

    public class ASTListOfPathSequence : IASTBase {
        public val value: MutableList<ASTPathSequence> = mutableListOf<ASTPathSequence>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTPathSequence)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfPathSequence\",\"value\":$value}"
    }

    public class ASTPathAlternative : IASTBase {
        public var variable0: ASTPathSequence? = null
        public var variable1: ASTListOfPathSequence? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPathAlternative\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPathSequence
                1 -> variable1 = value as ASTListOfPathSequence
            }
        }
    }

    public class ASTListOfPathEltOrInverse : IASTBase {
        public val value: MutableList<ASTPathEltOrInverse> = mutableListOf<ASTPathEltOrInverse>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTPathEltOrInverse)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfPathEltOrInverse\",\"value\":$value}"
    }

    public class ASTPathSequence : IASTBase {
        public var variable0: ASTPathEltOrInverse? = null
        public var variable1: ASTListOfPathEltOrInverse? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPathSequence\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPathEltOrInverse
                1 -> variable1 = value as ASTListOfPathEltOrInverse
            }
        }
    }

    public object ASTEnumOfoptionalAndanyAndatLeastOne {
        public const val _UNDEFINED: Int = -1
        public const val optional: Int = 0
        public const val any: Int = 1
        public const val atLeastOne: Int = 2
        public const val _COUNT: Int = 3
        public val values: Array<String> = arrayOf("optional", "any", "atLeastOne")
    }

    public class ASTPathElt : IASTBase {
        public var variable0: ASTPathPrimary? = null
        public var variable1: Int? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPathElt\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPathPrimary
                1 -> variable1 = ASTEnumOfoptionalAndanyAndatLeastOne.values.indexOf((value as ASTAnonymous).value)
            }
        }
    }

    public class ASTPathEltOrInverse : IASTBase {
        public var negated: Boolean = false
        public var variable1: ASTPathElt? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPathEltOrInverse\"")
            res.add("\"negated\": $negated")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> negated = true
                1 -> variable1 = value as ASTPathElt
            }
        }
    }

    public sealed interface ASTPathPrimary : IASTBase

    public class ASTListOfPathOneInPropertySet : IASTBase {
        public val value: MutableList<ASTPathOneInPropertySet> = mutableListOf<ASTPathOneInPropertySet>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTPathOneInPropertySet)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfPathOneInPropertySet\",\"value\":$value}"
    }

    public class ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet : IASTBase {
        public var variable0: ASTPathOneInPropertySet? = null
        public var variable1: ASTListOfPathOneInPropertySet? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTPathOneInPropertySet
                1 -> variable1 = value as ASTListOfPathOneInPropertySet
            }
        }
    }

    public class ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySetOptional : ASTPathNegatedPropertySet, IASTBase {
        public var variable0: ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySetOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet
        }
    }

    public sealed interface ASTPathNegatedPropertySet : ASTPathPrimary, IASTBase

    public sealed interface ASTInterfaceOfiriOrRDFType

    public class ASTPathOneInPropertySet : ASTPathNegatedPropertySet, IASTBase {
        public var negated: Boolean = false
        public var variable1: ASTInterfaceOfiriOrRDFType? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPathOneInPropertySet\"")
            res.add("\"negated\": $negated")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> negated = true
                1 -> variable1 = value as ASTInterfaceOfiriOrRDFType
            }
        }
    }

    public class ASTInteger : IASTBase {
        public var INTEGER: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInteger\"")
            res.add("\"INTEGER\" : \"${INTEGER}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER = value as String
        }
    }

    public sealed interface ASTTriplesNode : ASTGraphNode, IASTBase

    public class ASTBlankNodePropertyList : ASTTriplesNode, IASTBase {
        public var variable0: ASTPropertyListNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBlankNodePropertyList\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyListNotEmpty
        }
    }

    public sealed interface ASTTriplesNodePath : ASTGraphNodePath, IASTBase

    public class ASTBlankNodePropertyListPath : ASTTriplesNodePath, IASTBase {
        public var variable0: ASTPropertyListPathNotEmpty? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBlankNodePropertyListPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPropertyListPathNotEmpty
        }
    }

    public class ASTListOfGraphNode : IASTBase {
        public val value: MutableList<ASTGraphNode> = mutableListOf<ASTGraphNode>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTGraphNode)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfGraphNode\",\"value\":$value}"
    }

    public class ASTCollection : ASTTriplesNode, IASTBase {
        public var variable0: ASTListOfGraphNode? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTCollection\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTListOfGraphNode
        }
    }

    public class ASTListOfGraphNodePath : IASTBase {
        public val value: MutableList<ASTGraphNodePath> = mutableListOf<ASTGraphNodePath>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTGraphNodePath)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfGraphNodePath\",\"value\":$value}"
    }

    public class ASTCollectionPath : ASTTriplesNodePath, IASTBase {
        public var variable0: ASTListOfGraphNodePath? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTCollectionPath\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTListOfGraphNodePath
        }
    }

    public sealed interface ASTGraphNode : IASTBase

    public sealed interface ASTGraphNodePath : IASTBase

    public sealed interface ASTVarOrTerm : ASTGraphNode, ASTGraphNodePath, IASTBase

    public sealed interface ASTVarOrIri : ASTVerb, IASTBase

    public sealed interface ASTVar : ASTInterfaceOfVarOrClassOfExpressionAndVar, ASTGroupCondition, ASTInterfaceOfConstraintOrVar, ASTVarOrTerm, ASTVarOrIri, ASTPrimaryExpression, IASTBase

    public class ASTVar1 : ASTVar, IASTBase {
        public var VAR1: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTVar1\"")
            res.add("\"VAR1\" : \"${VAR1}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            VAR1 = value as String
        }
    }

    public class ASTVar2 : ASTVar, IASTBase {
        public var VAR2: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTVar2\"")
            res.add("\"VAR2\" : \"${VAR2}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            VAR2 = value as String
        }
    }

    public sealed interface ASTGraphTerm : ASTVarOrTerm, IASTBase

    public class ASTExpression : ASTInterfaceOfExpressionOrNILParam, ASTInterfaceOfAggregateCountAllOrExpression, IASTBase {
        public var variable0: ASTConditionalOrExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTExpression\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTConditionalOrExpression
        }
    }

    public class ASTListOfConditionalAndExpression : IASTBase {
        public val value: MutableList<ASTConditionalAndExpression> = mutableListOf<ASTConditionalAndExpression>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTConditionalAndExpression)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfConditionalAndExpression\",\"value\":$value}"
    }

    public class ASTConditionalOrExpression : IASTBase {
        public var variable0: ASTConditionalAndExpression? = null
        public var variable1: ASTListOfConditionalAndExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConditionalOrExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTConditionalAndExpression
                1 -> variable1 = value as ASTListOfConditionalAndExpression
            }
        }
    }

    public class ASTListOfValueLogical : IASTBase {
        public val value: MutableList<ASTValueLogical> = mutableListOf<ASTValueLogical>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTValueLogical)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfValueLogical\",\"value\":$value}"
    }

    public class ASTConditionalAndExpression : IASTBase {
        public var variable0: ASTValueLogical? = null
        public var variable1: ASTListOfValueLogical? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTConditionalAndExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTValueLogical
                1 -> variable1 = value as ASTListOfValueLogical
            }
        }
    }

    public class ASTValueLogical : IASTBase {
        public var variable0: ASTRelationalExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTValueLogical\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTRelationalExpression
        }
    }

    public sealed interface ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN

    public class ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional : IASTBase {
        public var variable0: ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN
        }
    }

    public class ASTRelationalExpression : IASTBase {
        public var variable0: ASTNumericExpression? = null
        public var variable1: ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTNumericExpression
                1 -> variable1 = value as ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional
            }
        }
    }

    public class ASTRelationalExpressionEQ : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionEQ\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionNEQ : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionNEQ\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionLT : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionLT\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionGT : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionGT\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionLEQ : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionLEQ\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionGEQ : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTNumericExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionGEQ\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNumericExpression
        }
    }

    public class ASTRelationalExpressionIN : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTExpressionList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionIN\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpressionList
        }
    }

    public class ASTRelationalExpressionNOTIN : ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTIN, IASTBase {
        public var variable0: ASTExpressionList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRelationalExpressionNOTIN\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpressionList
        }
    }

    public class ASTNumericExpression : IASTBase {
        public var variable0: ASTAdditiveExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericExpression\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTAdditiveExpression
        }
    }

    public sealed interface ASTInterfaceOfNumericLiteralPositiveOrNumericLiteralNegative

    public sealed interface ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE

    public class ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE : IASTBase {
        public val value: MutableList<ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE> = mutableListOf<ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE\",\"value\":$value}"
    }

    public class ASTClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE : ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE, IASTBase {
        public var variable0: ASTInterfaceOfNumericLiteralPositiveOrNumericLiteralNegative? = null
        public var variable1: ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTInterfaceOfNumericLiteralPositiveOrNumericLiteralNegative
                1 -> variable1 = value as ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE
            }
        }
    }

    public sealed interface ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE

    public class ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE : IASTBase {
        public val value: MutableList<ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE> = mutableListOf<ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE\",\"value\":$value}"
    }

    public class ASTAdditiveExpression : IASTBase {
        public var variable0: ASTMultiplicativeExpression? = null
        public var variable1: ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdditiveExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTMultiplicativeExpression
                1 -> variable1 = value as ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE
            }
        }
    }

    public class ASTAdditiveExpressionPLUS : ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE, IASTBase {
        public var variable0: ASTMultiplicativeExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdditiveExpressionPLUS\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTMultiplicativeExpression
        }
    }

    public class ASTAdditiveExpressionMINUS : ASTInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE, IASTBase {
        public var variable0: ASTMultiplicativeExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdditiveExpressionMINUS\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTMultiplicativeExpression
        }
    }

    public class ASTAdditiveExpressionMULTIPLY : ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE, IASTBase {
        public var variable0: ASTUnaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdditiveExpressionMULTIPLY\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTUnaryExpression
        }
    }

    public class ASTAdditiveExpressionDIVIDE : ASTInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE, IASTBase {
        public var variable0: ASTUnaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAdditiveExpressionDIVIDE\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTUnaryExpression
        }
    }

    public sealed interface ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE

    public class ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE : IASTBase {
        public val value: MutableList<ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE> = mutableListOf<ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE>()
        override fun astAssign(childID: Int, value: Any) {
            this.value.add(value as ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE)
        }

        override fun toString(): String = "{\"type\":\"ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE\",\"value\":$value}"
    }

    public class ASTMultiplicativeExpression : IASTBase {
        public var variable0: ASTUnaryExpression? = null
        public var variable1: ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTMultiplicativeExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTUnaryExpression
                1 -> variable1 = value as ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE
            }
        }
    }

    public class ASTMultiplicativeExpressionMULTIPLY : ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE, IASTBase {
        public var variable0: ASTUnaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTMultiplicativeExpressionMULTIPLY\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTUnaryExpression
        }
    }

    public class ASTMultiplicativeExpressionDIVIDE : ASTInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE, IASTBase {
        public var variable0: ASTUnaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTMultiplicativeExpressionDIVIDE\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTUnaryExpression
        }
    }

    public sealed interface ASTUnaryExpression : IASTBase

    public class ASTUnaryExpressionNOT : ASTUnaryExpression, IASTBase {
        public var variable0: ASTPrimaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUnaryExpressionNOT\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPrimaryExpression
        }
    }

    public class ASTUnaryExpressionPLUS : ASTUnaryExpression, IASTBase {
        public var variable0: ASTPrimaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUnaryExpressionPLUS\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPrimaryExpression
        }
    }

    public class ASTUnaryExpressionMINUS : ASTUnaryExpression, IASTBase {
        public var variable0: ASTPrimaryExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTUnaryExpressionMINUS\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTPrimaryExpression
        }
    }

    public sealed interface ASTPrimaryExpression : ASTUnaryExpression, IASTBase

    public class ASTBrackettedExpression : ASTConstraint, ASTPrimaryExpression, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBrackettedExpression\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public sealed interface ASTBuiltInCall : ASTGroupCondition, ASTConstraint, ASTPrimaryExpression, IASTBase

    public class ASTBuiltInCallYear : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallYear\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallMonth : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallMonth\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallHours : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallHours\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallNow : ASTBuiltInCall, IASTBase {
        public var variable0: ASTNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallNow\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNILParam
        }
    }

    public class ASTBuiltInCallSameTerm : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSameTerm\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallIsIri : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIsIri\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallIsBlanc : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIsBlanc\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallIsLiteral : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIsLiteral\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallMD5 : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallMD5\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallUUID : ASTBuiltInCall, IASTBase {
        public var variable0: ASTNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallUUID\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNILParam
        }
    }

    public class ASTBuiltInCallSTRUUID : ASTBuiltInCall, IASTBase {
        public var variable0: ASTNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSTRUUID\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNILParam
        }
    }

    public class ASTBuiltInCallSHA1 : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSHA1\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallSHA384 : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSHA384\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallSHA512 : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSHA512\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallCoalesce : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpressionList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallCoalesce\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpressionList
        }
    }

    public class ASTBuiltInCallIf : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        public var variable2: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIf\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallStrLang : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrLang\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallIsUri : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIsUri\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallMinutes : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallMinutes\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallSHA256 : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSHA256\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallStrDt : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrDt\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallIsNumeric : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIsNumeric\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallSeconds : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallSeconds\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallTimezone : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallTimezone\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallTz : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallTz\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallConcat : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpressionList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallConcat\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpressionList
        }
    }

    public class ASTBuiltInCallStrLen : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrLen\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallUCase : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallUCase\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallStrBefore : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrBefore\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallStrAfter : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrAfter\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallEncodeForUri : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallEncodeForUri\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallContains : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallContains\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallStrStarts : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrStarts\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallStrEnds : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStrEnds\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallDay : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallDay\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallStr : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallStr\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallLang : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallLang\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuildInCallLangMatches : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuildInCallLangMatches\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTBuiltInCallDataType : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallDataType\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallBound : ASTBuiltInCall, IASTBase {
        public var variable0: ASTVar? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallBound\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTVar
        }
    }

    public class ASTBuiltInCallIri : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallIri\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallUri : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallUri\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public sealed interface ASTInterfaceOfExpressionOrNILParam

    public class ASTBuiltInCallBNode : ASTBuiltInCall, IASTBase {
        public var variable0: ASTInterfaceOfExpressionOrNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallBNode\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfExpressionOrNILParam
        }
    }

    public class ASTBuiltInCallRand : ASTBuiltInCall, IASTBase {
        public var variable0: ASTNILParam? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallRand\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTNILParam
        }
    }

    public class ASTBuiltInCallAbs : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallAbs\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallCeil : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallCeil\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallLCase : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallLCase\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallFloor : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallFloor\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTBuiltInCallRound : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBuiltInCallRound\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTExpressionOptional : IASTBase {
        public var variable0: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTExpressionOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTExpression
        }
    }

    public class ASTRegexExpression : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        public var variable2: ASTExpressionOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRegexExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTExpressionOptional
            }
        }
    }

    public class ASTSubstringExpression : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        public var variable2: ASTExpressionOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTSubstringExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTExpressionOptional
            }
        }
    }

    public class ASTStrReplaceExpression : ASTBuiltInCall, IASTBase {
        public var variable0: ASTExpression? = null
        public var variable1: ASTExpression? = null
        public var variable2: ASTExpression? = null
        public var variable3: ASTExpressionOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTStrReplaceExpression\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            res.add("\"variable3\" : $variable3")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTExpression
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTExpression
                3 -> variable3 = value as ASTExpressionOptional
            }
        }
    }

    public class ASTExistsFunc : ASTBuiltInCall, IASTBase {
        public var variable0: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTExistsFunc\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGroupGraphPattern
        }
    }

    public class ASTNotExistsFunc : ASTBuiltInCall, IASTBase {
        public var variable0: ASTGroupGraphPattern? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNotExistsFunc\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTGroupGraphPattern
        }
    }

    public sealed interface ASTAggregate : ASTBuiltInCall, IASTBase

    public class ASTAggregateAvg : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateAvg\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public sealed interface ASTInterfaceOfAggregateCountAllOrExpression

    public class ASTAggregateCount : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTInterfaceOfAggregateCountAllOrExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateCount\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTInterfaceOfAggregateCountAllOrExpression
            }
        }
    }

    public class ASTAggregateCountAll : ASTInterfaceOfAggregateCountAllOrExpression, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateCountAll\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTAggregateSum : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateSum\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTAggregateMin : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateMin\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTAggregateMax : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateMax\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTAggregateSample : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateSample\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
            }
        }
    }

    public class ASTStringOptional : IASTBase {
        public var variable0: ASTString? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTStringOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTString
        }
    }

    public class ASTAggregateGroupConcat : ASTAggregate, IASTBase {
        public var DISTINCT: Boolean = false
        public var variable1: ASTExpression? = null
        public var variable2: ASTStringOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTAggregateGroupConcat\"")
            res.add("\"DISTINCT\": $DISTINCT")
            res.add("\"variable1\" : $variable1")
            res.add("\"variable2\" : $variable2")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> DISTINCT = true
                1 -> variable1 = value as ASTExpression
                2 -> variable2 = value as ASTStringOptional
            }
        }
    }

    public class ASTArgListOptional : IASTBase {
        public var variable0: ASTArgList? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTArgListOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTArgList
        }
    }

    public class ASTiriOrFunction : ASTPrimaryExpression, IASTBase {
        public var variable0: ASTiri? = null
        public var variable1: ASTArgListOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTiriOrFunction\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTiri
                1 -> variable1 = value as ASTArgListOptional
            }
        }
    }

    public sealed interface ASTInterfaceOfRDFLiteralLangOriri

    public class ASTInterfaceOfRDFLiteralLangOririOptional : IASTBase {
        public var variable0: ASTInterfaceOfRDFLiteralLangOriri? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTInterfaceOfRDFLiteralLangOririOptional\"")
            res.add("\"variable0\" : $variable0")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            variable0 = value as ASTInterfaceOfRDFLiteralLangOriri
        }
    }

    public class ASTRDFLiteral : ASTDataBlockValue, ASTGraphTerm, ASTPrimaryExpression, IASTBase {
        public var variable0: ASTString? = null
        public var variable1: ASTInterfaceOfRDFLiteralLangOririOptional? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRDFLiteral\"")
            res.add("\"variable0\" : $variable0")
            res.add("\"variable1\" : $variable1")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            when (childID) {
                0 -> variable0 = value as ASTString
                1 -> variable1 = value as ASTInterfaceOfRDFLiteralLangOririOptional
            }
        }
    }

    public class ASTRDFLiteralLang : ASTInterfaceOfRDFLiteralLangOriri, IASTBase {
        public var LANGTAG: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTRDFLiteralLang\"")
            res.add("\"LANGTAG\" : \"${LANGTAG}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            LANGTAG = value as String
        }
    }

    public sealed interface ASTNumericLiteral : ASTDataBlockValue, ASTGraphTerm, ASTPrimaryExpression, IASTBase

    public sealed interface ASTNumericLiteralUnsigned : ASTNumericLiteral, IASTBase

    public class ASTNumericLiteralUnsignedInteger : ASTNumericLiteralUnsigned, IASTBase {
        public var INTEGER: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralUnsignedInteger\"")
            res.add("\"INTEGER\" : \"${INTEGER}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER = value as String
        }
    }

    public class ASTNumericLiteralUnsignedDecimal : ASTNumericLiteralUnsigned, IASTBase {
        public var DECIMAL: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralUnsignedDecimal\"")
            res.add("\"DECIMAL\" : \"${DECIMAL}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DECIMAL = value as String
        }
    }

    public class ASTNumericLiteralUnsignedDouble : ASTNumericLiteralUnsigned, IASTBase {
        public var DOUBLE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralUnsignedDouble\"")
            res.add("\"DOUBLE\" : \"${DOUBLE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DOUBLE = value as String
        }
    }

    public sealed interface ASTNumericLiteralPositive : ASTInterfaceOfNumericLiteralPositiveOrNumericLiteralNegative, ASTNumericLiteral, IASTBase

    public class ASTNumericLiteralPositiveInteger : ASTNumericLiteralPositive, IASTBase {
        public var INTEGER_POSITIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralPositiveInteger\"")
            res.add("\"INTEGER_POSITIVE\" : \"${INTEGER_POSITIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER_POSITIVE = value as String
        }
    }

    public class ASTNumericLiteralPositiveDecimal : ASTNumericLiteralPositive, IASTBase {
        public var DECIMAL_POSITIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralPositiveDecimal\"")
            res.add("\"DECIMAL_POSITIVE\" : \"${DECIMAL_POSITIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DECIMAL_POSITIVE = value as String
        }
    }

    public class ASTNumericLiteralPositiveDouble : ASTNumericLiteralPositive, IASTBase {
        public var DOUBLE_POSITIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralPositiveDouble\"")
            res.add("\"DOUBLE_POSITIVE\" : \"${DOUBLE_POSITIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DOUBLE_POSITIVE = value as String
        }
    }

    public sealed interface ASTNumericLiteralNegative : ASTInterfaceOfNumericLiteralPositiveOrNumericLiteralNegative, ASTNumericLiteral, IASTBase

    public class ASTNumericLiteralNegativeInteger : ASTNumericLiteralNegative, IASTBase {
        public var INTEGER_NEGATIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralNegativeInteger\"")
            res.add("\"INTEGER_NEGATIVE\" : \"${INTEGER_NEGATIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            INTEGER_NEGATIVE = value as String
        }
    }

    public class ASTNumericLiteralNegativeDecimal : ASTNumericLiteralNegative, IASTBase {
        public var DECIMAL_NEGATIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralNegativeDecimal\"")
            res.add("\"DECIMAL_NEGATIVE\" : \"${DECIMAL_NEGATIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DECIMAL_NEGATIVE = value as String
        }
    }

    public class ASTNumericLiteralNegativeDouble : ASTNumericLiteralNegative, IASTBase {
        public var DOUBLE_NEGATIVE: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNumericLiteralNegativeDouble\"")
            res.add("\"DOUBLE_NEGATIVE\" : \"${DOUBLE_NEGATIVE}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            DOUBLE_NEGATIVE = value as String
        }
    }

    public sealed interface ASTBooleanLiteral : ASTDataBlockValue, ASTGraphTerm, ASTPrimaryExpression, IASTBase

    public class ASTBooleanLiteralTrue : ASTBooleanLiteral, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBooleanLiteralTrue\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public class ASTBooleanLiteralFalse : ASTBooleanLiteral, IASTBase {
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBooleanLiteralFalse\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
        }
    }

    public sealed interface ASTString : IASTBase

    public class ASTString1 : ASTString, IASTBase {
        public var STRING_LITERAL1: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTString1\"")
            res.add("\"STRING_LITERAL1\" : \"${STRING_LITERAL1}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            STRING_LITERAL1 = value as String
        }
    }

    public class ASTString2 : ASTString, IASTBase {
        public var STRING_LITERAL2: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTString2\"")
            res.add("\"STRING_LITERAL2\" : \"${STRING_LITERAL2}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            STRING_LITERAL2 = value as String
        }
    }

    public class ASTString1long : ASTString, IASTBase {
        public var STRING_LITERAL_LONG1: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTString1long\"")
            res.add("\"STRING_LITERAL_LONG1\" : \"${STRING_LITERAL_LONG1}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            STRING_LITERAL_LONG1 = value as String
        }
    }

    public class ASTString2long : ASTString, IASTBase {
        public var STRING_LITERAL_LONG2: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTString2long\"")
            res.add("\"STRING_LITERAL_LONG2\" : \"${STRING_LITERAL_LONG2}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            STRING_LITERAL_LONG2 = value as String
        }
    }

    public sealed interface ASTiri : ASTDataBlockValue, ASTPathPrimary, ASTInterfaceOfiriOrRDFType, ASTVarOrIri, ASTGraphTerm, ASTInterfaceOfRDFLiteralLangOriri, IASTBase

    public class ASTiriRef : ASTiri, IASTBase {
        public var IRIREF: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTiriRef\"")
            res.add("\"IRIREF\" : \"${IRIREF}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            IRIREF = value as String
        }
    }

    public sealed interface ASTPrefixedName : ASTiri, IASTBase

    public class ASTPrefixedNameLN : ASTPrefixedName, IASTBase {
        public var PNAME_LN: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPrefixedNameLN\"")
            res.add("\"PNAME_LN\" : \"${PNAME_LN}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            PNAME_LN = value as String
        }
    }

    public class ASTPrefixedNameNS : ASTPrefixedName, IASTBase {
        public var PNAME_NS: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTPrefixedNameNS\"")
            res.add("\"PNAME_NS\" : \"${PNAME_NS}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            PNAME_NS = value as String
        }
    }

    public sealed interface ASTBlankNode : ASTGraphTerm, IASTBase

    public class ASTBlankNodeLabel : ASTBlankNode, IASTBase {
        public var BLANK_NODE_LABEL: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBlankNodeLabel\"")
            res.add("\"BLANK_NODE_LABEL\" : \"${BLANK_NODE_LABEL}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            BLANK_NODE_LABEL = value as String
        }
    }

    public class ASTBlankNodeANON : ASTBlankNode, IASTBase {
        public var ANON: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTBlankNodeANON\"")
            res.add("\"ANON\" : \"${ANON}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            ANON = value as String
        }
    }

    public class ASTNILParam : ASTInterfaceOfNILParamOrListOfVar, ASTInterfaceOfListOfDataBlockValueOrNILParam, ASTArgList, ASTExpressionList, ASTGraphTerm, ASTInterfaceOfExpressionOrNILParam, IASTBase {
        public var NIL: String? = null
        override fun toString(): String {
            val res = mutableListOf<String>("\"type\":\"ASTNILParam\"")
            res.add("\"NIL\" : \"${NIL}\"")
            return "{${res.joinToString()}}"
        }

        override fun astAssign(childID: Int, value: Any) {
            NIL = value as String
        }
    }

    public sealed interface IASTBase {
        public abstract fun astAssign(childID: Int, value: Any)
    }

    public fun getResult(): IASTBase {
        return stack[0] as IASTBase
    }

    internal var parsererror: String? = null
    internal val stack: MutableList<Any> = mutableListOf()
    internal var bufferDefinedDataSize: Int = 0
    internal var bufferDefinedPosition: Int = 0
    internal var bufferDefinedLastSize: Int = 0
    internal var bufferDefinedAllocatedSize: Int = 4096
    internal var bufferDefinedData: ByteArray = ByteArray(bufferDefinedAllocatedSize)
    internal var bufferDefinedRangeStart: Int = 0
    internal var bufferDefinedInputStream: lupos.shared.IMyInputStream
    internal var bufferDefinedMaxPositionAvailable: Int = 0
    internal var scannerDefinedTokenFoundType: IntArray = IntArray(4)
    internal var scannerDefinedTokenFoundStart: IntArray = IntArray(4)
    internal var scannerDefinedTokenFoundEnd: IntArray = IntArray(4)
    internal var scannerDefinedTokenFoundReadOffset: Int = 0
    internal var scannerDefinedTokenFoundWriteOffset: Int = 0
    internal var scannerDefinedTokenFoundAvailable: Int = 0
    internal var scannerDefinedTokenPendingType: Int = -1
    internal var scannerDefinedTokenPendingStart: Int = bufferDefinedPosition
    internal var scannerDefinedTokenPendingEnd: Int = bufferDefinedPosition
    internal var scannerDefinedCurrentChar: Int = 0
    internal val scannerDefinedEntryPoints: Array<String> = arrayOf<String>("[WS_ANY]", "[]", "[generated0, generated1, generated119, generated120, generated121, generated2, generated122, generated124, generated127, generated128, generated130, generated131, generated132, generated133, generated135, generated136, generated137]", "[generated0]", "[generated1]", "[generated119, generated120, generated121, generated2, generated122, generated124, generated127, generated128, generated130, generated131, generated132, generated133, generated135, generated136, generated137]", "[IRIREF]", "[PNAME_NS]", "[generated2, generated119, generated120, generated121]", "[generated122, generated124, generated127, generated128, generated130, generated131, generated132, generated133, generated135, generated136, generated137]", "[generated119]", "[generated120]", "[generated121]", "[generated73, generated74, generated117]", "[VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated9]", "[generated134, generated73]", "[generated2]", "[generated3, generated4, generated5, VAR1, VAR2, generated9]", "[generated117, generated74]", "[generated9]", "[generated122]", "[generated124]", "[generated127]", "[generated128]", "[generated130]", "[generated131]", "[generated132]", "[generated136]", "[generated137, generated133, generated135]", "[generated3]", "[generated4]", "[VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS]", "[generated104, IRIREF, PNAME_LN, PNAME_NS]", "[generated104, generated125, generated118, generated126, generated102]", "[generated104, generated125, generated102, IRIREF, PNAME_LN, PNAME_NS]", "[generated104, generated102]", "[generated133]", "[generated135]", "[generated137]", "[VAR1, VAR2, generated5]", "[generated73]", "[generated74]", "[generated117]", "[generated104]", "[generated134]", "[generated135, generated133]", "[generated5, VAR1, VAR2, generated9]", "[VAR1, VAR2]", "[IRIREF, PNAME_LN, PNAME_NS]", "[IRIREF, PNAME_LN, PNAME_NS, generated118]", "[generated74, generated73]", "[generated102, generated125, generated118, generated126]", "[generated125, generated102, IRIREF, PNAME_LN, PNAME_NS]", "[generated5]", "[generated5, generated96, generated86, generated87, NIL, VAR1, VAR2, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS, generated89]", "[generated117, generated74, generated73, generated75, generated78, generated79, generated82, generated83, generated84, generated89]", "[generated102]", "[PNAME_LN, PNAME_NS]", "[generated125]", "[generated118]", "[generated126]", "[generated102, IRIREF, PNAME_LN, PNAME_NS]", "[generated89]", "[generated2, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated5, generated96, generated86, generated87, NIL, generated73, VAR1, VAR2, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS]", "[VAR1]", "[VAR2]", "[generated74, generated73, generated75, generated78, generated79, generated82, generated83, generated84, generated89]", "[generated5, generated96, generated86, generated87, NIL, VAR1, VAR2, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS, generated102, generated89]", "[generated86, generated87, NIL, VAR1, VAR2, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS, generated5, generated96]", "[PNAME_LN]", "[generated102, generated89]", "[generated5, generated96, generated86, generated87, NIL, VAR1, VAR2, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[generated75, generated78, generated79, generated82, generated83, generated84, generated89]", "[generated129]", "[VAR1, VAR2, generated86, generated87, NIL, BLANK_NODE_LABEL, ANON, IRIREF, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS]", "[generated5, generated96]", "[generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73, generated89]", "[VAR1, VAR2, generated5, generated74, generated117, generated73]", "[generated7]", "[VAR1, VAR2, generated7]", "[generated5, NIL, generated9, generated95, generated94, generated108, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated18, generated109, generated110, generated111, generated112, generated113, generated114, generated107, generated115, generated116, generated7, generated22, generated77, generated16]", "[generated123, generated16]", "[generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated78, generated79, generated82, generated83, generated84, generated89]", "[VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated117, generated74, generated73, generated75, generated78, generated79, generated82, generated83, generated84, generated89]", "[NIL, generated5]", "[generated88, generated86, generated87, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS, generated89]", "[generated88, generated86, generated87, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS, generated7]", "[generated93, generated9, generated94, generated95, generated92, generated7, generated5, generated96, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS]", "[generated123]", "[generated78, generated79, generated82, generated83, generated84, generated89]", "[IRIREF, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated86, generated87, BLANK_NODE_LABEL, ANON, NIL]", "[generated80, generated81, generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, VAR1, VAR2, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS, generated82, generated83, generated84, generated89]", "[generated5, generated96, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, PNAME_NS, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated7]", "[generated9, generated95, generated94, generated108, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated18, generated109, generated110, generated111, generated112, generated113, generated114, generated107, generated115, generated116, generated7, generated22, generated77, generated16]", "[generated93]", "[generated94]", "[generated92, generated7]", "[generated138, generated74]", "[generated75]", "[generated16]", "[generated96]", "[generated73, generated100, generated101, generated102, generated103, generated105, generated106, generated84]", "[generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS, generated5, VAR1, VAR2]", "[generated90, generated6, generated5, generated91, IRIREF, PNAME_LN, PNAME_NS, VAR1, VAR2]", "[IRIREF, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated86, generated87, generated88]", "[generated92]", "[generated76]", "[generated79, generated82, generated83, generated84, generated89]", "[INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[generated86, generated87]", "[BLANK_NODE_LABEL, ANON]", "[generated22, generated16, generated97, generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated91]", "[generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated5, generated96, generated73, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[NIL]", "[generated3, generated6, generated94, generated108, generated5, generated86, generated87, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, VAR1, VAR2, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS]", "[generated5, NIL, generated89]", "[generated78]", "[generated8, generated10, generated11, generated12, generated13, generated14, generated15, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107]", "[generated80, generated81, generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS, VAR1, VAR2]", "[generated22]", "[generated98]", "[generated95]", "[generated88]", "[generated138]", "[generated82, generated83, generated84, generated89]", "[STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2]", "[INTEGER, DECIMAL, DOUBLE]", "[INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE]", "[INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[generated86]", "[generated87]", "[generated100]", "[generated101]", "[generated103]", "[generated105]", "[generated106]", "[generated84]", "[generated80]", "[generated81]", "[generated91]", "[generated94, generated108, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated18, generated109, generated110, generated111, generated112, generated113, generated114, generated107, generated115, generated116, generated7, generated22, generated77, generated16]", "[generated95, generated92, generated7, generated5, generated96, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[generated90, IRIREF, PNAME_LN, PNAME_NS, generated91]", "[generated79]", "[generated133, generated74, generated138]", "[BLANK_NODE_LABEL]", "[ANON]", "[generated104, VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS]", "[generated99, generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated5, generated96, generated73, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS, generated79, generated82, generated83, generated84, generated89]", "[generated8, generated10, generated11, generated12, generated13, generated14, generated15]", "[generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS]", "[generated6, generated94, generated108, generated5, generated86, generated87, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, VAR1, VAR2, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS]", "[generated90]", "[generated82, generated83]", "[VAR1, VAR2, generated5, NIL]", "[generated99]", "[generated19]", "[generated20]", "[generated21]", "[generated23]", "[generated24]", "[generated25]", "[generated26]", "[generated27]", "[generated28]", "[generated29]", "[generated30]", "[generated31]", "[generated32]", "[generated33]", "[generated34]", "[generated35]", "[generated36]", "[generated37]", "[generated38]", "[generated39]", "[generated40]", "[generated41]", "[generated42]", "[generated43]", "[generated44]", "[generated45]", "[generated46]", "[generated47]", "[generated48]", "[generated49]", "[generated50]", "[generated51]", "[generated52]", "[generated53]", "[generated54]", "[generated55]", "[generated56]", "[generated57]", "[generated58]", "[generated59]", "[generated60]", "[generated61]", "[generated62]", "[generated63]", "[generated64]", "[generated65]", "[generated66]", "[generated67]", "[generated68]", "[generated69]", "[generated70]", "[generated71]", "[generated72]", "[generated107]", "[VAR1, VAR2, generated90, generated6, generated5, generated91, IRIREF, PNAME_LN, PNAME_NS, generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[generated16, generated97, generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[generated91, VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated98, generated89, generated102]", "[generated16, generated97, generated98, generated89, generated102]", "[generated98, generated102, generated89, generated5, generated96, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[STRING_LITERAL1]", "[STRING_LITERAL2]", "[STRING_LITERAL_LONG1]", "[STRING_LITERAL_LONG2]", "[INTEGER]", "[DECIMAL]", "[DOUBLE]", "[INTEGER_POSITIVE]", "[DECIMAL_POSITIVE]", "[DOUBLE_POSITIVE]", "[INTEGER_NEGATIVE]", "[DECIMAL_NEGATIVE]", "[DOUBLE_NEGATIVE]", "[generated5, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated86, generated87, VAR1, VAR2]", "[generated108]", "[IRIREF, PNAME_LN, PNAME_NS, generated91]", "[generated84, generated89]", "[generated8]", "[generated10]", "[generated11]", "[generated12]", "[generated13]", "[generated14]", "[generated15]", "[generated6]", "[generated90, generated6, generated5, generated91, IRIREF, PNAME_LN, PNAME_NS]", "[generated92, generated7, generated5, generated96, VAR1, VAR2, NIL, generated86, generated87, IRIREF, BLANK_NODE_LABEL, ANON, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE]", "[VAR1, VAR2, generated90, generated6, generated5, generated91, IRIREF, PNAME_LN, PNAME_NS, generated16, generated97, generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[generated91, VAR1, VAR2, IRIREF, PNAME_LN, PNAME_NS, generated16, generated97, generated98, generated89, generated102]", "[generated82]", "[generated83]", "[generated3, generated9, generated6, generated94, generated108, generated5, generated86, generated87, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, VAR1, VAR2, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS]", "[generated98, generated89, generated100, generated101, generated102, generated103, generated105, generated106, generated84, generated73]", "[generated97]", "[generated98, generated89]", "[generated98, generated89, generated102]", "[generated18, generated109, generated110, generated111, generated112, generated113, generated114, generated107, generated115, generated116, generated7, generated22, generated77, generated16]", "[LANGTAG, generated85, generated7, generated89, generated88, generated22, generated9, generated95, generated86, generated87, generated91, IRIREF, PNAME_LN, PNAME_NS, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, generated5, generated96, generated94, generated108, VAR1, VAR2, generated16, NIL, BLANK_NODE_LABEL, ANON, generated97, generated90, generated18, generated109, generated110, generated111, generated112, generated113, generated114, generated107, generated98, generated115, generated6, generated116, generated102, generated77, generated100, generated101, generated103, generated105, generated106, generated84, generated73]", "[IRIREF, PNAME_LN, PNAME_NS, generated91, generated6, generated5]", "[generated85]", "[generated9, generated6, generated94, generated108, generated5, generated86, generated87, generated19, generated20, generated21, generated23, generated24, generated25, generated26, generated27, generated28, generated29, generated30, generated31, generated32, generated33, generated34, generated35, generated36, generated37, generated38, generated39, generated40, generated41, generated42, generated43, generated44, generated45, generated46, generated47, generated48, generated49, generated50, generated51, generated52, generated53, generated54, generated55, generated56, generated57, generated58, generated59, generated60, generated61, generated62, generated63, generated64, generated65, generated66, generated67, generated68, generated69, generated70, generated71, generated72, generated107, VAR1, VAR2, generated8, generated10, generated11, generated12, generated13, generated14, generated15, IRIREF, STRING_LITERAL1, STRING_LITERAL2, STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, PNAME_LN, PNAME_NS]", "[generated18]", "[generated109]", "[generated110]", "[generated111]", "[generated112]", "[generated113]", "[generated114]", "[generated115, generated116, generated7, generated22, generated77, generated16]", "[generated115]", "[generated83, generated84, generated89]", "[generated82, generated84, generated89]", "[LANGTAG]", "[generated90, generated91, IRIREF, PNAME_LN, PNAME_NS, generated5]", "[generated116, generated7, generated22, generated77, generated16]", "[generated116]", "[generated90, generated91, IRIREF, PNAME_LN, PNAME_NS, generated7]", "[generated16, generated7]", "[generated22, generated7]", "[generated77, generated7]", "[generated77]", "[generated17]")
    internal val scannerDefinedScannerTokens: Array<String> = arrayOf<String>("")
    internal val parserDefinedStackData: IntArray = IntArray(1024)
    internal var parserDefinedStackPosition: Int = 0
    internal val parserDefinedScannerTokens: Array<String> = arrayOf<String>("", "generated0", "generated1", "generated119", "generated120", "generated121", "generated2", "generated122", "generated124", "generated127", "generated128", "generated130", "generated131", "generated132", "generated133", "generated135", "generated136", "generated137", "IRIREF", "PNAME_NS", "generated73", "generated74", "generated117", "VAR1", "VAR2", "PNAME_LN", "generated9", "generated134", "generated3", "generated4", "generated5", "generated104", "generated125", "generated118", "generated126", "generated102", "generated96", "generated86", "generated87", "NIL", "BLANK_NODE_LABEL", "ANON", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "generated89", "generated75", "generated78", "generated79", "generated82", "generated83", "generated84", "generated100", "generated101", "generated103", "generated105", "generated106", "generated129", "generated7", "generated95", "generated94", "generated108", "generated18", "generated109", "generated110", "generated111", "generated112", "generated113", "generated114", "generated107", "generated115", "generated116", "generated22", "generated77", "generated16", "generated123", "generated19", "generated20", "generated21", "generated23", "generated24", "generated25", "generated26", "generated27", "generated28", "generated29", "generated30", "generated31", "generated32", "generated33", "generated34", "generated35", "generated36", "generated37", "generated38", "generated39", "generated40", "generated41", "generated42", "generated43", "generated44", "generated45", "generated46", "generated47", "generated48", "generated49", "generated50", "generated51", "generated52", "generated53", "generated54", "generated55", "generated56", "generated57", "generated58", "generated59", "generated60", "generated61", "generated62", "generated63", "generated64", "generated65", "generated66", "generated67", "generated68", "generated69", "generated70", "generated71", "generated72", "generated8", "generated10", "generated11", "generated12", "generated13", "generated14", "generated15", "generated88", "generated93", "generated92", "generated80", "generated81", "generated138", "generated90", "generated6", "generated91", "generated76", "generated97", "generated98", "generated99", "LANGTAG", "generated85", "generated17")

    init {
        bufferDefinedInputStream = bufferDefinedInputStreamParam
        if ((bufferDefinedPosition >= bufferDefinedMaxPositionAvailable)) {
            val bufferDefinedEreaseLength: Int = ((scannerDefinedTokenFoundEnd[((scannerDefinedTokenFoundWriteOffset + 1) % 4)]) - bufferDefinedRangeStart)
            if ((bufferDefinedEreaseLength > 0)) {
                bufferDefinedData.copyInto(bufferDefinedData, 0, bufferDefinedEreaseLength, bufferDefinedDataSize)
                bufferDefinedDataSize = (bufferDefinedDataSize - bufferDefinedEreaseLength)
                bufferDefinedRangeStart = (bufferDefinedRangeStart + bufferDefinedEreaseLength)
            } else {
                if ((bufferDefinedPosition != 0)) {
                    var newSize: Int = (bufferDefinedAllocatedSize + bufferDefinedAllocatedSize)
                    var data: ByteArray = ByteArray(newSize)
                    bufferDefinedData.copyInto(data, 0, 0, bufferDefinedDataSize)
                    bufferDefinedAllocatedSize = newSize
                    bufferDefinedData = data
                }
            }
            val bufferDefinedLen: Int = bufferDefinedInputStream.read(bufferDefinedData, bufferDefinedDataSize, (bufferDefinedAllocatedSize - bufferDefinedDataSize))
            if ((bufferDefinedLen != -1)) {
                bufferDefinedDataSize = (bufferDefinedDataSize + bufferDefinedLen)
            }
            bufferDefinedMaxPositionAvailable = ((bufferDefinedDataSize + bufferDefinedRangeStart) - 8)
        }
    }

    public fun close() {
        bufferDefinedInputStream.close()
    }

    private fun scannerDefinedNode0(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 162
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            9, 10, 13, 32 -> {
                return 0
            }
            35 -> {
                return 280
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1(): Int {
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode2(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 285
            }
            66, 98 -> {
                return 281
            }
            67, 99 -> {
                return 283
            }
            68, 100 -> {
                return 284
            }
            73, 105 -> {
                return 289
            }
            76, 108 -> {
                return 287
            }
            77, 109 -> {
                return 288
            }
            80, 112 -> {
                return 282
            }
            83, 115 -> {
                return 286
            }
            87, 119 -> {
                return 290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode3(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 281
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode4(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 282
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode5(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 285
            }
            67, 99 -> {
                return 283
            }
            68, 100 -> {
                return 284
            }
            73, 105 -> {
                return 289
            }
            76, 108 -> {
                return 287
            }
            77, 109 -> {
                return 288
            }
            83, 115 -> {
                return 286
            }
            87, 119 -> {
                return 290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode6(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            60 -> {
                return 291
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode7(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 293
            }
            else -> {
                return 292
            }
        }
    }

    private fun scannerDefinedNode8(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 296
            }
            67, 99 -> {
                return 294
            }
            68, 100 -> {
                return 295
            }
            83, 115 -> {
                return 286
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode9(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 299
            }
            67, 99 -> {
                return 297
            }
            68, 100 -> {
                return 298
            }
            73, 105 -> {
                return 289
            }
            76, 108 -> {
                return 287
            }
            77, 109 -> {
                return 288
            }
            87, 119 -> {
                return 290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode10(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 294
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode11(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 295
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode12(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 296
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode13(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 302
            }
            87, 119 -> {
                return 301
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode14(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            42 -> {
                return 307
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode15(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 308
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode16(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 286
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode17(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            42 -> {
                return 307
            }
            63 -> {
                return 303
            }
            68, 100 -> {
                return 309
            }
            82, 114 -> {
                return 310
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode18(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 302
            }
            87, 119 -> {
                return 301
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode19(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            42 -> {
                return 307
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode20(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 287
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode21(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 312
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode22(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 313
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode23(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 299
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode24(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 288
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode25(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 314
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode26(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 315
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode27(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 316
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode28(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 317
            }
            73, 105 -> {
                return 289
            }
            87, 119 -> {
                return 290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode29(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 309
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode30(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 310
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode31(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode32(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            83, 115 -> {
                return 318
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode33(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 322
            }
            68, 100 -> {
                return 320
            }
            71, 103 -> {
                return 323
            }
            78, 110 -> {
                return 321
            }
            83, 115 -> {
                return 319
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode34(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            68, 100 -> {
                return 324
            }
            71, 103 -> {
                return 325
            }
            83, 115 -> {
                return 318
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode35(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 323
            }
            83, 115 -> {
                return 319
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode36(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 289
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode37(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 317
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode38(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            87, 119 -> {
                return 290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode39(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode40(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode41(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            87, 119 -> {
                return 301
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode42(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 302
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode43(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 319
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode44(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 308
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode45(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 317
            }
            73, 105 -> {
                return 289
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode46(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            42 -> {
                return 307
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode47(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode48(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode49(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            78, 110 -> {
                return 326
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode50(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            87, 119 -> {
                return 301
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode51(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 322
            }
            68, 100 -> {
                return 320
            }
            71, 103 -> {
                return 323
            }
            78, 110 -> {
                return 321
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode52(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            68, 100 -> {
                return 324
            }
            71, 103 -> {
                return 325
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode53(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            40 -> {
                return 311
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode54(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode55(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 302
            }
            71, 103 -> {
                return 339
            }
            72, 104 -> {
                return 340
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 341
            }
            86, 118 -> {
                return 343
            }
            87, 119 -> {
                return 301
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode56(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 323
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode57(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode58(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 320
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode59(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 321
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode60(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 322
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode61(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            71, 103 -> {
                return 325
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode62(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode63(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 347
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 344
            }
            84, 116 -> {
                return 329
            }
            86, 118 -> {
                return 349
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode64(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode65(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode66(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 339
            }
            72, 104 -> {
                return 340
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 341
            }
            86, 118 -> {
                return 343
            }
            87, 119 -> {
                return 301
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode67(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            71, 103 -> {
                return 325
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode68(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode69(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 351
            }
            else -> {
                return 350
            }
        }
    }

    private fun scannerDefinedNode70(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 323
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode71(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 347
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            84, 116 -> {
                return 329
            }
            86, 118 -> {
                return 349
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode72(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 339
            }
            72, 104 -> {
                return 340
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 341
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode73(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 353
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode74(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 354
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 355
            }
            95 -> {
                return 331
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode75(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            40 -> {
                return 311
            }
            91 -> {
                return 356
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode76(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 361
            }
            70, 102 -> {
                return 360
            }
            71, 103 -> {
                return 323
            }
            77, 109 -> {
                return 358
            }
            79, 111 -> {
                return 357
            }
            83, 115 -> {
                return 359
            }
            86, 118 -> {
                return 343
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode77(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 302
            }
            87, 119 -> {
                return 301
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode78(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode79(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            41 -> {
                return 362
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode80(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 367
            }
            38 -> {
                return 372
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            44 -> {
                return 374
            }
            45 -> {
                return 365
            }
            47 -> {
                return 363
            }
            59 -> {
                return 376
            }
            60 -> {
                return 368
            }
            61 -> {
                return 366
            }
            62 -> {
                return 369
            }
            65, 97 -> {
                return 375
            }
            73, 105 -> {
                return 370
            }
            78, 110 -> {
                return 371
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode81(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            59 -> {
                return 376
            }
            73, 105 -> {
                return 377
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode82(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 391
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 379
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            79, 111 -> {
                return 395
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            86, 118 -> {
                return 349
            }
            89, 121 -> {
                return 389
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode83(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 396
            }
            71, 103 -> {
                return 397
            }
            72, 104 -> {
                return 399
            }
            76, 108 -> {
                return 400
            }
            79, 111 -> {
                return 395
            }
            86, 118 -> {
                return 349
            }
            87, 119 -> {
                return 398
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode84(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            40 -> {
                return 327
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode85(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 44, 47, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            39 -> {
                return 335
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            85, 117 -> {
                return 401
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode86(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 44, 47, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            39 -> {
                return 335
            }
            41 -> {
                return 362
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            85, 117 -> {
                return 401
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode87(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 44, 59, 61, 62, 64, 92, 93, 94, 96, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            47 -> {
                return 363
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 402
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            124 -> {
                return 403
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode88(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 377
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode89(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 340
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 341
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode90(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 41, 42, 44, 47, 59, 61, 62, 63, 64, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            39 -> {
                return 335
            }
            40 -> {
                return 354
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 355
            }
            95 -> {
                return 331
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode91(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 404
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 405
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 379
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            79, 111 -> {
                return 407
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            86, 118 -> {
                return 349
            }
            89, 121 -> {
                return 389
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode92(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode93(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 367
            }
            38 -> {
                return 372
            }
            41 -> {
                return 362
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            44 -> {
                return 374
            }
            45 -> {
                return 365
            }
            47 -> {
                return 363
            }
            59 -> {
                return 376
            }
            60 -> {
                return 368
            }
            61 -> {
                return 366
            }
            62 -> {
                return 369
            }
            65, 97 -> {
                return 375
            }
            73, 105 -> {
                return 370
            }
            78, 110 -> {
                return 371
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode94(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            63 -> {
                return 408
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode95(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 409
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode96(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            124 -> {
                return 403
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode97(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 410
            }
            87, 119 -> {
                return 301
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode98(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 339
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode99(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            59 -> {
                return 376
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode100(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            91 -> {
                return 356
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode101(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 361
            }
            70, 102 -> {
                return 360
            }
            71, 103 -> {
                return 323
            }
            77, 109 -> {
                return 358
            }
            79, 111 -> {
                return 357
            }
            83, 115 -> {
                return 359
            }
            86, 118 -> {
                return 343
            }
            123 -> {
                return 300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode102(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode103(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode104(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 44, 47, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            39 -> {
                return 335
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            85, 117 -> {
                return 401
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode105(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            124 -> {
                return 403
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode106(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 415
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode107(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 341
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode108(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode109(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 417
            }
            84, 116 -> {
                return 416
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode110(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            91 -> {
                return 355
            }
            95 -> {
                return 331
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode111(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            44 -> {
                return 374
            }
            46 -> {
                return 419
            }
            59 -> {
                return 376
            }
            66, 98 -> {
                return 361
            }
            70, 102 -> {
                return 360
            }
            71, 103 -> {
                return 323
            }
            77, 109 -> {
                return 358
            }
            79, 111 -> {
                return 357
            }
            83, 115 -> {
                return 359
            }
            86, 118 -> {
                return 343
            }
            93 -> {
                return 418
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode112(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode113(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 420
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 347
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            84, 116 -> {
                return 329
            }
            86, 118 -> {
                return 349
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode114(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            40 -> {
                return 354
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode115(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 311
            }
            43 -> {
                return 364
            }
            45 -> {
                return 365
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 421
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 423
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 422
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode116(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            40 -> {
                return 327
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode117(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 340
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode118(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 427
            }
            66, 98 -> {
                return 431
            }
            67, 99 -> {
                return 424
            }
            68, 100 -> {
                return 430
            }
            69, 101 -> {
                return 436
            }
            70, 102 -> {
                return 435
            }
            71, 103 -> {
                return 428
            }
            72, 104 -> {
                return 438
            }
            73, 105 -> {
                return 432
            }
            76, 108 -> {
                return 429
            }
            77, 109 -> {
                return 426
            }
            78, 110 -> {
                return 440
            }
            82, 114 -> {
                return 434
            }
            83, 115 -> {
                return 425
            }
            84, 116 -> {
                return 439
            }
            85, 117 -> {
                return 433
            }
            89, 121 -> {
                return 437
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode119(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 404
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 405
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode120(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            44 -> {
                return 374
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode121(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode122(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            47 -> {
                return 363
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode123(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 441
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode124(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 410
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode125(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 442
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode126(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 336
            }
            39 -> {
                return 335
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode127(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode128(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 333
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode129(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 334
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode130(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 416
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode131(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 417
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode132(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 357
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode133(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 358
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode134(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 359
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode135(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 360
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode136(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 361
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode137(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 343
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode138(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 443
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode139(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 444
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode140(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            97 -> {
                return 445
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode141(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 367
            }
            38 -> {
                return 372
            }
            41 -> {
                return 362
            }
            43 -> {
                return 364
            }
            44 -> {
                return 374
            }
            45 -> {
                return 365
            }
            59 -> {
                return 376
            }
            60 -> {
                return 368
            }
            61 -> {
                return 366
            }
            62 -> {
                return 369
            }
            65, 97 -> {
                return 375
            }
            73, 105 -> {
                return 370
            }
            78, 110 -> {
                return 371
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode142(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 42, 44, 59, 61, 62, 64, 92, 93, 94, 96, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            47 -> {
                return 363
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            124 -> {
                return 403
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode143(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode144(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 446
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode145(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 289
            }
            85, 117 -> {
                return 410
            }
            87, 119 -> {
                return 301
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode146(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            95 -> {
                return 331
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode147(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            91 -> {
                return 355
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode148(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            83, 115 -> {
                return 318
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode149(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 420
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 347
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            84, 116 -> {
                return 329
            }
            85, 117 -> {
                return 447
            }
            86, 118 -> {
                return 349
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode150(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 379
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            79, 111 -> {
                return 395
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            86, 118 -> {
                return 349
            }
            89, 121 -> {
                return 389
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode151(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 451
            }
            67, 99 -> {
                return 448
            }
            71, 103 -> {
                return 428
            }
            77, 109 -> {
                return 450
            }
            83, 115 -> {
                return 449
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode152(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 387
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 392
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode153(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 311
            }
            43 -> {
                return 364
            }
            45 -> {
                return 365
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 423
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 422
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode154(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            94 -> {
                return 412
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode155(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 342
            }
            79, 111 -> {
                return 442
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode156(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            36 -> {
                return 304
            }
            40 -> {
                return 327
            }
            63 -> {
                return 303
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode157(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 452
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode158(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 453
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode159(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 454
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode160(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 455
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode161(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 456
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode162(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 457
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode163(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 458
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode164(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 459
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode165(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 460
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode166(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 461
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode167(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 462
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode168(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 463
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode169(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 435
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode170(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 464
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode171(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 465
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode172(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 466
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode173(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 467
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode174(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 468
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode175(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 469
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode176(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 470
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode177(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 471
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode178(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 472
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode179(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 473
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode180(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 474
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode181(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 475
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode182(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 476
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode183(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            89, 121 -> {
                return 437
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode184(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 477
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode185(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 478
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode186(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 438
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode187(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 479
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode188(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 480
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode189(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 481
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode190(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 482
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode191(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 483
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode192(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 484
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode193(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 485
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode194(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 486
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode195(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 487
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode196(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 488
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode197(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 489
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode198(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 490
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode199(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 491
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode200(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 492
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode201(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 493
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode202(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 494
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode203(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 495
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode204(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 496
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode205(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 497
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode206(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 498
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode207(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 499
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode208(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 500
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode209(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 501
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode210(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 502
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode211(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 371
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode212(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 95, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            46 -> {
                return 419
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 503
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            86, 118 -> {
                return 349
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode213(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            59 -> {
                return 376
            }
            66, 98 -> {
                return 361
            }
            70, 102 -> {
                return 360
            }
            71, 103 -> {
                return 323
            }
            77, 109 -> {
                return 358
            }
            79, 111 -> {
                return 357
            }
            83, 115 -> {
                return 359
            }
            86, 118 -> {
                return 343
            }
            93 -> {
                return 418
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode214(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            46 -> {
                return 419
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            71, 103 -> {
                return 325
            }
            97 -> {
                return 414
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode215(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            59 -> {
                return 376
            }
            71, 103 -> {
                return 323
            }
            93 -> {
                return 418
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode216(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 420
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            71, 103 -> {
                return 325
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode217(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode218(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            39 -> {
                return 504
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode219(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 505
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode220(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            39 -> {
                return 506
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode221(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 507
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode222(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 508
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode223(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 509
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 223
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode224(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 510
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 511
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode225(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 512
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode226(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 513
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode227(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43 -> {
                return 514
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode228(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 515
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode229(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 516
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode230(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 517
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode231(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 41, 42, 44, 47, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 311
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 423
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 422
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode232(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 518
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode233(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode234(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode235(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 448
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode236(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 519
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode237(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 520
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode238(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 521
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode239(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 451
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode240(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 522
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode241(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 428
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode242(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 413
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode243(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode244(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 42, 44, 47, 59, 61, 62, 64, 92, 93, 94, 96, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            43 -> {
                return 333
            }
            45 -> {
                return 334
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            70, 102 -> {
                return 330
            }
            84, 116 -> {
                return 329
            }
            91 -> {
                return 328
            }
            95 -> {
                return 331
            }
            124 -> {
                return 403
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode245(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 91, 92, 95, 96, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            36 -> {
                return 304
            }
            40 -> {
                return 311
            }
            46 -> {
                return 419
            }
            58 -> {
                return 306
            }
            59 -> {
                return 376
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 503
            }
            71, 103 -> {
                return 325
            }
            77, 109 -> {
                return 346
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            86, 118 -> {
                return 349
            }
            93 -> {
                return 418
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode246(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 91, 92, 94, 95, 96, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            36 -> {
                return 304
            }
            46 -> {
                return 419
            }
            58 -> {
                return 306
            }
            59 -> {
                return 376
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            71, 103 -> {
                return 325
            }
            93 -> {
                return 418
            }
            97 -> {
                return 414
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode247(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 342
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode248(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 442
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode249(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 41, 44, 47, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 311
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            45 -> {
                return 365
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 421
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 423
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 422
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode250(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            66, 98 -> {
                return 361
            }
            70, 102 -> {
                return 360
            }
            71, 103 -> {
                return 323
            }
            77, 109 -> {
                return 358
            }
            79, 111 -> {
                return 357
            }
            83, 115 -> {
                return 359
            }
            86, 118 -> {
                return 343
            }
            123 -> {
                return 300
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode251(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            93 -> {
                return 418
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode252(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode253(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 419
            }
            71, 103 -> {
                return 323
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode254(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 367
            }
            38 -> {
                return 372
            }
            41 -> {
                return 362
            }
            44 -> {
                return 374
            }
            59 -> {
                return 376
            }
            60 -> {
                return 368
            }
            61 -> {
                return 366
            }
            62 -> {
                return 369
            }
            65, 97 -> {
                return 375
            }
            73, 105 -> {
                return 370
            }
            78, 110 -> {
                return 371
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode255(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 92, 96, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 530
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            38 -> {
                return 372
            }
            39 -> {
                return 335
            }
            40 -> {
                return 327
            }
            41 -> {
                return 362
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            44 -> {
                return 374
            }
            45 -> {
                return 365
            }
            46 -> {
                return 420
            }
            47 -> {
                return 363
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            59 -> {
                return 376
            }
            60 -> {
                return 526
            }
            61 -> {
                return 366
            }
            62 -> {
                return 369
            }
            63 -> {
                return 303
            }
            64 -> {
                return 523
            }
            65 -> {
                return 528
            }
            66, 98 -> {
                return 348
            }
            70, 102 -> {
                return 347
            }
            71, 103 -> {
                return 325
            }
            73, 105 -> {
                return 529
            }
            77, 109 -> {
                return 346
            }
            78, 110 -> {
                return 527
            }
            79, 111 -> {
                return 345
            }
            83, 115 -> {
                return 352
            }
            84, 116 -> {
                return 329
            }
            85, 117 -> {
                return 401
            }
            86, 118 -> {
                return 349
            }
            91 -> {
                return 328
            }
            93 -> {
                return 418
            }
            94 -> {
                return 524
            }
            95 -> {
                return 331
            }
            97 -> {
                return 525
            }
            123 -> {
                return 300
            }
            124 -> {
                return 373
            }
            125 -> {
                return 337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode256(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode257(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            94 -> {
                return 531
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode258(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 41, 44, 47, 59, 61, 62, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            33 -> {
                return 413
            }
            34 -> {
                return 336
            }
            36 -> {
                return 304
            }
            39 -> {
                return 335
            }
            40 -> {
                return 311
            }
            42 -> {
                return 307
            }
            43 -> {
                return 364
            }
            45 -> {
                return 365
            }
            46 -> {
                return 332
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            63 -> {
                return 303
            }
            65, 97 -> {
                return 385
            }
            66, 98 -> {
                return 381
            }
            67, 99 -> {
                return 386
            }
            68, 100 -> {
                return 380
            }
            69, 101 -> {
                return 388
            }
            70, 102 -> {
                return 423
            }
            71, 103 -> {
                return 394
            }
            72, 104 -> {
                return 406
            }
            73, 105 -> {
                return 382
            }
            76, 108 -> {
                return 411
            }
            77, 109 -> {
                return 390
            }
            78, 110 -> {
                return 393
            }
            82, 114 -> {
                return 384
            }
            83, 115 -> {
                return 378
            }
            84, 116 -> {
                return 422
            }
            85, 117 -> {
                return 383
            }
            89, 121 -> {
                return 389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode259(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 366
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode260(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33 -> {
                return 367
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode261(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            60 -> {
                return 532
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode262(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            62 -> {
                return 533
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode263(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            60 -> {
                return 534
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode264(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            62 -> {
                return 535
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode265(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 370
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode266(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            38 -> {
                return 372
            }
            41 -> {
                return 362
            }
            44 -> {
                return 374
            }
            59 -> {
                return 376
            }
            65, 97 -> {
                return 375
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode267(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            38 -> {
                return 372
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode268(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 442
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode269(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 342
            }
            86, 118 -> {
                return 343
            }
            125 -> {
                return 337
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode270(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            64 -> {
                return 523
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode271(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            40 -> {
                return 311
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode272(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            44 -> {
                return 374
            }
            59 -> {
                return 376
            }
            65, 97 -> {
                return 375
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode273(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            124 -> {
                return 373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode274(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 91, 92, 93, 95, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            41 -> {
                return 362
            }
            58 -> {
                return 306
            }
            60 -> {
                return 291
            }
            94 -> {
                return 412
            }
            97 -> {
                return 414
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode275(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            59 -> {
                return 376
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode276(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            44 -> {
                return 374
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode277(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            41 -> {
                return 362
            }
            65, 97 -> {
                return 375
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode278(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 375
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode279(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 536
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode280(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 280
            }
            10, 13 -> {
                return 0
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode281(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 537
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode282(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 538
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode283(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 540
            }
            79, 111 -> {
                return 539
            }
            82, 114 -> {
                return 541
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode284(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 542
            }
            82, 114 -> {
                return 543
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode285(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 545
            }
            83, 115 -> {
                return 544
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode286(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 546
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode287(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 547
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode288(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 548
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode289(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 549
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode290(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 550
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode291(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 291
            }
            62 -> {
                return 551
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode292(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 552
            }
            58 -> {
                return 293
            }
            else -> {
                return 292
            }
        }
    }

    private fun scannerDefinedNode293(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 19
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode294(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 553
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode295(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 554
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode296(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 544
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode297(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 540
            }
            79, 111 -> {
                return 555
            }
            82, 114 -> {
                return 541
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode298(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 556
            }
            82, 114 -> {
                return 543
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode299(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 545
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode300(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 20
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode301(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 557
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode302(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 558
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode303(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 559
            }
        }
    }

    private fun scannerDefinedNode304(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 560
            }
        }
    }

    private fun scannerDefinedNode305(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode306(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 19
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 91, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            37 -> {
                return 563
            }
            92 -> {
                return 564
            }
            else -> {
                return 562
            }
        }
    }

    private fun scannerDefinedNode307(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 26
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode308(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 565
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode309(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 566
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode310(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 567
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode311(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 30
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode312(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 540
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode313(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 543
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode314(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 555
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode315(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 541
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode316(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 568
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode317(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 569
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode318(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 570
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode319(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 571
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode320(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 572
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode321(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 573
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode322(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 574
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode323(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 575
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode324(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 576
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode325(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 577
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode326(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 578
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode327(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 30
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            9, 10, 13, 32 -> {
                return 354
            }
            35 -> {
                return 579
            }
            41 -> {
                return 580
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode328(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 36
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            9, 10, 13, 32 -> {
                return 355
            }
            35 -> {
                return 581
            }
            93 -> {
                return 582
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode329(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 583
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode330(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 584
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode331(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            58 -> {
                return 585
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode332(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 586
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode333(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 587
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 588
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode334(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 589
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 590
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode335(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 504
            }
            39 -> {
                return 592
            }
            92 -> {
                return 591
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode336(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 505
            }
            34 -> {
                return 594
            }
            92 -> {
                return 593
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode337(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 55
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode338(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 42
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 595
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 338
            }
            69, 101 -> {
                return 596
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode339(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 597
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode340(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 598
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode341(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 600
            }
            82, 114 -> {
                return 599
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode342(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 601
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode343(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 602
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode344(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 603
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode345(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            80, 112 -> {
                return 604
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode346(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 605
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode347(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 584
            }
            73, 105 -> {
                return 606
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode348(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 607
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode349(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 608
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode350(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 609
            }
            58 -> {
                return 351
            }
            else -> {
                return 350
            }
        }
    }

    private fun scannerDefinedNode351(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 91, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            37 -> {
                return 563
            }
            92 -> {
                return 564
            }
            else -> {
                return 562
            }
        }
    }

    private fun scannerDefinedNode352(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 610
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode353(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 611
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode354(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            9, 10, 13, 32 -> {
                return 354
            }
            35 -> {
                return 579
            }
            41 -> {
                return 580
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode355(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            9, 10, 13, 32 -> {
                return 355
            }
            35 -> {
                return 581
            }
            93 -> {
                return 582
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode356(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 36
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode357(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 612
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode358(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 613
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode359(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 614
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode360(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 615
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode361(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 616
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode362(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 68
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode363(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 69
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode364(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 70
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 587
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 588
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode365(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 71
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 589
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 590
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode366(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 72
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode367(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 617
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode368(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 74
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 618
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode369(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 75
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 619
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode370(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 620
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode371(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 621
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode372(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            38 -> {
                return 622
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode373(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            124 -> {
                return 623
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode374(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 82
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode375(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 624
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode376(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 84
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode377(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 625
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode378(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 630
            }
            69, 101 -> {
                return 628
            }
            72, 104 -> {
                return 629
            }
            84, 116 -> {
                return 626
            }
            85, 117 -> {
                return 627
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode379(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 631
            }
            67, 99 -> {
                return 632
            }
            73, 105 -> {
                return 633
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode380(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 634
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode381(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 636
            }
            79, 111 -> {
                return 635
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode382(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 638
            }
            82, 114 -> {
                return 637
            }
            83, 115 -> {
                return 639
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode383(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 641
            }
            82, 114 -> {
                return 640
            }
            85, 117 -> {
                return 642
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode384(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 643
            }
            69, 101 -> {
                return 645
            }
            79, 111 -> {
                return 644
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode385(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            66, 98 -> {
                return 646
            }
            86, 118 -> {
                return 647
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode386(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 648
            }
            79, 111 -> {
                return 649
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode387(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 650
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode388(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 651
            }
            88, 120 -> {
                return 652
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode389(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 653
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode390(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 657
            }
            68, 100 -> {
                return 656
            }
            73, 105 -> {
                return 655
            }
            79, 111 -> {
                return 654
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode391(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 659
            }
            79, 111 -> {
                return 658
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode392(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 660
            }
            90, 122 -> {
                return 661
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode393(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 662
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode394(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 663
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode395(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 665
            }
            82, 114 -> {
                return 664
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode396(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 666
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode397(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 667
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode398(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            72, 104 -> {
                return 668
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode399(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 659
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode400(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 633
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode401(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 669
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode402(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 147
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 559
            }
        }
    }

    private fun scannerDefinedNode403(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 148
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode404(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            66, 98 -> {
                return 646
            }
            83, 115 -> {
                return 670
            }
            86, 118 -> {
                return 647
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode405(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 634
            }
            69, 101 -> {
                return 671
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode406(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 658
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode407(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 665
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode408(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 147
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode409(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 70
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode410(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 672
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode411(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 631
            }
            67, 99 -> {
                return 632
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode412(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 152
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode413(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 153
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode414(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 154
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode415(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            89, 121 -> {
                return 673
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode416(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 674
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode417(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 675
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode418(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 156
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode419(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 157
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode420(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 157
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 586
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode421(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 634
            }
            73, 105 -> {
                return 676
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode422(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 660
            }
            82, 114 -> {
                return 583
            }
            90, 122 -> {
                return 661
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode423(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 584
            }
            76, 108 -> {
                return 650
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode424(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 678
            }
            79, 111 -> {
                return 677
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode425(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 680
            }
            69, 101 -> {
                return 682
            }
            72, 104 -> {
                return 683
            }
            84, 116 -> {
                return 681
            }
            85, 117 -> {
                return 679
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode426(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 685
            }
            68, 100 -> {
                return 687
            }
            73, 105 -> {
                return 684
            }
            79, 111 -> {
                return 686
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode427(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 689
            }
            86, 118 -> {
                return 688
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode428(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 690
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode429(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 691
            }
            67, 99 -> {
                return 692
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode430(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 693
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode431(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 695
            }
            79, 111 -> {
                return 694
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode432(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 697
            }
            82, 114 -> {
                return 696
            }
            83, 115 -> {
                return 698
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode433(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 700
            }
            82, 114 -> {
                return 699
            }
            85, 117 -> {
                return 701
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode434(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 702
            }
            69, 101 -> {
                return 704
            }
            79, 111 -> {
                return 703
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode435(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 705
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode436(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 706
            }
            88, 120 -> {
                return 707
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode437(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 708
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode438(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 709
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode439(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 710
            }
            90, 122 -> {
                return 711
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode440(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 712
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode441(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 713
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode442(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 600
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode443(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 714
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode444(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 715
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode445(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 154
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode446(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 599
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode447(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 716
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode448(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 717
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode449(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 719
            }
            85, 117 -> {
                return 718
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode450(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 685
            }
            73, 105 -> {
                return 720
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode451(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 688
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode452(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 721
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode453(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 722
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode454(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 723
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode455(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 724
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode456(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 725
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode457(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 694
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode458(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 696
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode459(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 699
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode460(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 695
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode461(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 702
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode462(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 689
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode463(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 678
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode464(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 703
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode465(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 726
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode466(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 727
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode467(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 728
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode468(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 729
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode469(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 700
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode470(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 692
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode471(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 706
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode472(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 730
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode473(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 731
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode474(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 732
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode475(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 733
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode476(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 734
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode477(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 686
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode478(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 735
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode479(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 736
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode480(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 682
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode481(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 710
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode482(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            90, 122 -> {
                return 711
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode483(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 737
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode484(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 701
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode485(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 738
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode486(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 687
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode487(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 739
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode488(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 740
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode489(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 741
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode490(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 742
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode491(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 743
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode492(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 697
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode493(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 744
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode494(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 745
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode495(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 746
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode496(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 747
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode497(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 748
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode498(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 749
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode499(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 750
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode500(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 751
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode501(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 752
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode502(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            88, 120 -> {
                return 707
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode503(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 606
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode504(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 504
            }
            39 -> {
                return 753
            }
            92 -> {
                return 591
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode505(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 505
            }
            34 -> {
                return 754
            }
            92 -> {
                return 593
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode506(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            39 -> {
                return 755
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode507(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 756
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode508(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 42
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 508
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode509(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 757
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode510(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 758
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode511(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 758
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 511
            }
            69, 101 -> {
                return 596
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode512(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 759
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode513(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 760
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 513
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode514(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 761
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 762
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode515(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 763
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode516(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 764
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 516
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode517(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 765
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 766
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode518(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 71
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode519(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 718
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode520(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 720
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode521(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 685
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode522(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 719
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode523(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 -> {
                return 767
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode524(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 152
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            94 -> {
                return 768
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode525(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 154
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 769
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode526(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 74
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 291
            }
            61 -> {
                return 770
            }
            62 -> {
                return 551
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode527(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 771
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode528(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 769
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode529(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 772
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode530(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 153
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 617
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode531(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            94 -> {
                return 768
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode532(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 74
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode533(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 75
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode534(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 618
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode535(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            61 -> {
                return 619
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode536(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 773
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode537(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 774
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode538(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 775
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode539(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 776
            }
            80, 112 -> {
                return 777
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode540(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 778
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode541(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 779
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode542(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 781
            }
            83, 115 -> {
                return 780
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode543(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 782
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode544(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            75, 107 -> {
                return 783
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode545(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 784
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode546(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 785
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode547(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 786
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode548(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 787
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode549(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 788
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode550(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 789
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode551(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 18
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode552(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 552
            }
            else -> {
                return 292
            }
        }
    }

    private fun scannerDefinedNode553(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 776
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode554(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 780
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode555(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 777
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode556(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 781
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode557(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 790
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode558(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 791
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode559(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 23
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 559
            }
        }
    }

    private fun scannerDefinedNode560(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 24
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 560
            }
        }
    }

    private fun scannerDefinedNode561(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode562(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 25
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            37 -> {
                return 563
            }
            46 -> {
                return 792
            }
            92 -> {
                return 564
            }
            else -> {
                return 562
            }
        }
    }

    private fun scannerDefinedNode563(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102 -> {
                return 793
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode564(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 61, 63, 64, 95, 126 -> {
                return 562
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode565(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 794
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode566(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 795
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode567(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 796
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode568(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 797
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode569(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 798
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode570(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 799
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode571(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 800
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode572(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 801
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode573(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 802
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode574(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 803
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode575(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 804
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode576(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 805
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode577(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 806
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode578(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 807
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode579(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 579
            }
            10, 13 -> {
                return 354
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode580(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 39
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode581(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 581
            }
            10, 13 -> {
                return 355
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode582(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 41
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode583(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 808
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode584(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 809
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode585(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            else -> {
                return 810
            }
        }
    }

    private fun scannerDefinedNode586(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 43
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 586
            }
            69, 101 -> {
                return 596
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode587(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 811
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode588(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 45
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 812
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 588
            }
            69, 101 -> {
                return 813
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode589(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 814
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode590(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 48
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 815
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 590
            }
            69, 101 -> {
                return 816
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode591(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34, 39, 98, 102, 110, 114, 116 -> {
                return 504
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode592(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 51
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            39 -> {
                return 817
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode593(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34, 39, 98, 102, 110, 114, 116 -> {
                return 505
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode594(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 52
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 818
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode595(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 586
            }
            69, 101 -> {
                return 596
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode596(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43, 45 -> {
                return 819
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 820
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode597(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 821
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode598(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 822
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode599(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 823
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode600(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 824
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode601(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 825
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode602(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 826
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode603(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 827
            }
            82, 114 -> {
                return 828
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode604(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 829
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode605(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 830
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode606(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 831
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode607(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 832
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode608(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 833
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode609(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 609
            }
            else -> {
                return 350
            }
        }
    }

    private fun scannerDefinedNode610(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 828
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode611(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 67
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode612(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 834
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode613(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 835
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode614(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 836
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode615(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 837
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode616(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 838
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode617(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 73
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode618(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 76
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode619(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 77
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode620(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 78
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode621(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 839
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode622(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 80
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode623(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 81
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode624(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 83
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode625(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 840
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode626(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 841
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode627(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            66, 98 -> {
                return 842
            }
            77, 109 -> {
                return 843
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode628(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 844
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode629(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 845
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode630(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 846
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode631(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 847
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode632(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 848
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode633(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 849
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode634(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 850
            }
            89, 121 -> {
                return 851
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode635(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 852
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode636(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 853
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode637(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 854
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode638(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 128
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode639(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            66, 98 -> {
                return 857
            }
            73, 105 -> {
                return 855
            }
            76, 108 -> {
                return 858
            }
            78, 110 -> {
                return 859
            }
            85, 117 -> {
                return 856
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode640(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 860
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode641(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 861
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode642(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 862
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode643(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 863
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode644(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 864
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode645(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            71, 103 -> {
                return 866
            }
            80, 112 -> {
                return 865
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode646(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 867
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode647(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            71, 103 -> {
                return 868
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode648(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 869
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode649(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 871
            }
            78, 110 -> {
                return 870
            }
            85, 117 -> {
                return 872
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode650(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 873
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode651(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 874
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode652(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 875
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode653(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 876
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode654(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 877
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode655(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 878
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode656(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            53 -> {
                return 879
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode657(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            88, 120 -> {
                return 880
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode658(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 881
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode659(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            86, 118 -> {
                return 882
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode660(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 883
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode661(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 118
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode662(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 885
            }
            87, 119 -> {
                return 884
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode663(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 886
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode664(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 887
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode665(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 888
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode666(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 889
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode667(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 890
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode668(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 891
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode669(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 892
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode670(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 893
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode671(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 894
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode672(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 895
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode673(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 155
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode674(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 896
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode675(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 897
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode676(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 898
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode677(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 901
            }
            78, 110 -> {
                return 900
            }
            85, 117 -> {
                return 899
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode678(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 902
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode679(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 904
            }
            77, 109 -> {
                return 903
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode680(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 905
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode681(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 906
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode682(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 907
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode683(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 908
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode684(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 909
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode685(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            88, 120 -> {
                return 910
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode686(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 911
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode687(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            53 -> {
                return 912
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode688(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 913
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode689(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 914
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode690(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 915
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode691(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 916
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode692(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 917
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode693(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 918
            }
            89, 121 -> {
                return 919
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode694(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 920
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode695(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 921
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode696(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 922
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode697(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 128
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode698(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 925
            }
            73, 105 -> {
                return 923
            }
            76, 108 -> {
                return 926
            }
            78, 110 -> {
                return 927
            }
            85, 117 -> {
                return 924
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode699(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 928
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode700(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 929
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode701(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 930
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode702(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 931
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode703(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 932
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode704(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 934
            }
            80, 112 -> {
                return 933
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode705(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 935
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode706(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 936
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode707(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 937
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode708(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 938
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode709(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 939
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode710(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 940
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode711(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 118
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode712(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 839
            }
            87, 119 -> {
                return 941
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode713(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 942
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode714(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 943
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode715(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 944
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode716(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 945
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode717(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 899
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode718(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 903
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode719(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 946
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode720(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 947
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode721(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 948
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode722(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 949
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode723(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 950
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode724(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 951
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode725(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 918
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode726(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 952
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode727(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 904
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode728(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 953
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode729(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 933
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode730(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 954
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode731(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 955
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode732(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 956
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode733(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 957
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode734(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 958
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode735(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            89, 121 -> {
                return 919
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode736(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 959
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode737(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            87, 119 -> {
                return 941
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode738(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 960
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode739(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 961
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode740(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 962
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode741(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 963
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode742(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 964
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode743(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 901
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode744(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 965
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode745(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 966
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode746(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 967
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode747(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 923
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode748(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 924
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode749(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 925
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode750(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 926
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode751(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 927
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode752(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 934
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode753(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 51
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode754(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 52
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode755(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            39 -> {
                return 817
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode756(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34 -> {
                return 818
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode757(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 43
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 757
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode758(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 758
            }
            69, 101 -> {
                return 596
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode759(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 45
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 759
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode760(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 968
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode761(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 969
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode762(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 969
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 762
            }
            69, 101 -> {
                return 813
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode763(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 48
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 763
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode764(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 970
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode765(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 971
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode766(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            46 -> {
                return 971
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 766
            }
            69, 101 -> {
                return 816
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode767(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 159
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 972
            }
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 -> {
                return 767
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode768(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 160
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode769(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 83
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode770(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 76
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 291
            }
            62 -> {
                return 551
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode771(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 885
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode772(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 78
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode773(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 973
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode774(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 974
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode775(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 975
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode776(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 976
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode777(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            89, 121 -> {
                return 977
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode778(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 978
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode779(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 979
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode780(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 980
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode781(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 981
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode782(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 982
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode783(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 5
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode784(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 10
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode785(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 983
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode786(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 984
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode787(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 985
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode788(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 986
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode789(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 987
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode790(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 988
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode791(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 989
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode792(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            37 -> {
                return 563
            }
            46 -> {
                return 792
            }
            92 -> {
                return 564
            }
            else -> {
                return 562
            }
        }
    }

    private fun scannerDefinedNode793(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102 -> {
                return 562
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode794(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 990
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode795(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 991
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode796(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 992
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode797(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 993
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode798(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 994
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode799(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 995
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode800(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 996
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode801(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 997
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode802(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 998
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode803(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 34
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode804(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 999
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode805(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1000
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode806(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            80, 112 -> {
                return 1001
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode807(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1002
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode808(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1003
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode809(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1004
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode810(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 40
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 1005
            }
            else -> {
                return 810
            }
        }
    }

    private fun scannerDefinedNode811(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 46
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 811
            }
            69, 101 -> {
                return 813
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode812(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 811
            }
            69, 101 -> {
                return 813
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode813(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43, 45 -> {
                return 1006
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1007
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode814(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 49
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 814
            }
            69, 101 -> {
                return 816
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode815(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 814
            }
            69, 101 -> {
                return 816
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode816(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            43, 45 -> {
                return 1008
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1009
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode817(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 817
            }
            39 -> {
                return 1010
            }
            92 -> {
                return 1011
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode818(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 818
            }
            34 -> {
                return 1012
            }
            92 -> {
                return 1013
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode819(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 820
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode820(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 44
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 820
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode821(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1014
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode822(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1015
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode823(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1016
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode824(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1017
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode825(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1018
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode826(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1019
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode827(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1020
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode828(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            86, 118 -> {
                return 1021
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode829(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1022
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode830(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1023
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode831(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1024
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode832(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1025
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode833(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1026
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode834(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1027
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode835(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1028
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode836(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            86, 118 -> {
                return 1029
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode837(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1030
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode838(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1031
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode839(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 79
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode840(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1032
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode841(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 86
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1037
            }
            66, 98 -> {
                return 1036
            }
            68, 100 -> {
                return 1039
            }
            69, 101 -> {
                return 1035
            }
            76, 108 -> {
                return 1033
            }
            83, 115 -> {
                return 1034
            }
            85, 117 -> {
                return 1038
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode842(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1040
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode843(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 140
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode844(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1041
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode845(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            49 -> {
                return 1042
            }
            50 -> {
                return 1043
            }
            51 -> {
                return 1044
            }
            53 -> {
                return 1045
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode846(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1046
            }
            80, 112 -> {
                return 1047
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode847(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            71, 103 -> {
                return 1048
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode848(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1049
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode849(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1050
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode850(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1051
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode851(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 113
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode852(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1052
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode853(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1053
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode854(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 91
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode855(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1054
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode856(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1055
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode857(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1056
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode858(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1057
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode859(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1058
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode860(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 92
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode861(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1059
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode862(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1060
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode863(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1061
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode864(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1062
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode865(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1063
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode866(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1064
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode867(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 95
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode868(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 143
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode869(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1065
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode870(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1066
            }
            84, 116 -> {
                return 1067
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode871(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1068
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode872(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1069
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode873(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1070
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode874(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1071
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode875(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1072
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode876(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1073
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode877(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1074
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode878(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 141
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1075
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode879(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 122
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode880(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 142
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode881(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1076
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode882(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1077
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode883(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1078
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode884(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 119
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode885(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 79
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode886(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1079
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode887(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1080
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode888(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1081
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode889(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 1082
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode890(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1083
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode891(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1084
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode892(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1085
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode893(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 149
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode894(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1086
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode895(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1087
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode896(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1088
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode897(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1089
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode898(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1090
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode899(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1091
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode900(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1092
            }
            84, 116 -> {
                return 1093
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode901(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1094
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode902(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1095
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode903(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 140
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode904(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1096
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode905(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1098
            }
            80, 112 -> {
                return 1097
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode906(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 86
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1103
            }
            66, 98 -> {
                return 1102
            }
            68, 100 -> {
                return 1105
            }
            69, 101 -> {
                return 1101
            }
            76, 108 -> {
                return 1099
            }
            83, 115 -> {
                return 1100
            }
            85, 117 -> {
                return 1104
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode907(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1106
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode908(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            49 -> {
                return 1107
            }
            50 -> {
                return 1108
            }
            51 -> {
                return 1109
            }
            53 -> {
                return 1110
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode909(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 141
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1111
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode910(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 142
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode911(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1112
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode912(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 122
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode913(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 143
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode914(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 95
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode915(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1113
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode916(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1114
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode917(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1115
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode918(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1116
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode919(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 113
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode920(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1117
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode921(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1118
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode922(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 91
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode923(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1119
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode924(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1120
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode925(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1121
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode926(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1122
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode927(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1123
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode928(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 92
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode929(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1124
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode930(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1125
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode931(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1126
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode932(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1127
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode933(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1128
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode934(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1129
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode935(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1130
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode936(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1131
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode937(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1132
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode938(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1133
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode939(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1134
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode940(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1135
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode941(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 119
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode942(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1136
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode943(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 149
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode944(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1137
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode945(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1138
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode946(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 1097
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode947(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 141
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode948(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1139
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode949(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 86
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode950(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1140
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode951(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1141
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode952(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1092
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode953(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1142
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode954(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1093
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode955(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1100
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode956(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1101
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode957(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 1102
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode958(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1103
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode959(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1111
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode960(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1104
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode961(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            49 -> {
                return 1107
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode962(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            50 -> {
                return 1108
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode963(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            51 -> {
                return 1109
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode964(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            53 -> {
                return 1110
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode965(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1143
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode966(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1105
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode967(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1098
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode968(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 46
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 968
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode969(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 969
            }
            69, 101 -> {
                return 813
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode970(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 49
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 970
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode971(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 971
            }
            69, 101 -> {
                return 816
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode972(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 -> {
                return 1144
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode973(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1145
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode974(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 1
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode975(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1146
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode976(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1147
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode977(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 12
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode978(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1148
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode979(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1149
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode980(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1150
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode981(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1151
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode982(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 9
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode983(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1152
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode984(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 7
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode985(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 11
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode986(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1153
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode987(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 17
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode988(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1154
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode989(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 22
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode990(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 27
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode991(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1155
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode992(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1156
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode993(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1157
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode994(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1158
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode995(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1159
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode996(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1160
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode997(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1161
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode998(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1162
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode999(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 1163
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1000(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1164
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1001(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            72, 104 -> {
                return 1165
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1002(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1166
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1003(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 37
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1004(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1167
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1005(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 1005
            }
            else -> {
                return 810
            }
        }
    }

    private fun scannerDefinedNode1006(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1007
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1007(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 47
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1007
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1008(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1009
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1009(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 50
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57 -> {
                return 1009
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1010(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 817
            }
            39 -> {
                return 1168
            }
            92 -> {
                return 1011
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1011(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34, 39, 98, 102, 110, 114, 116 -> {
                return 817
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1012(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 818
            }
            34 -> {
                return 1169
            }
            92 -> {
                return 1013
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1013(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            34, 39, 98, 102, 110, 114, 116 -> {
                return 818
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1014(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 1170
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1015(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1171
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1016(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1172
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1017(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1173
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1018(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1174
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1019(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1175
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1020(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1176
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1021(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1177
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1022(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1178
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1023(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1179
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1024(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1180
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1025(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 66
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1026(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1181
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1027(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1182
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1028(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1183
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1029(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1184
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1030(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1185
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1031(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 66
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1032(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 85
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1033(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1187
            }
            69, 101 -> {
                return 1186
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1034(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1188
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1035(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1189
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1036(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1190
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1037(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 1191
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1038(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1192
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1039(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1193
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1040(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1194
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1041(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1195
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1042(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 123
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1043(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            53 -> {
                return 1196
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1044(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            56 -> {
                return 1197
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1045(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            49 -> {
                return 1198
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1046(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1199
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1047(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1200
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1048(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 87
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 1201
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1049(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1202
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1050(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1203
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1051(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1204
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1052(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1205
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1053(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1206
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1054(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1207
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1055(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1208
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1056(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1209
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1057(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1210
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1058(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 1211
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1059(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1212
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1060(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 120
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1061(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 94
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1062(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1213
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1063(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1214
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1064(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            88, 120 -> {
                return 1215
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1065(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 96
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1066(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1216
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1067(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1217
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1068(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1218
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1069(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1219
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1070(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1220
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1071(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1221
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1072(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1222
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1073(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 111
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1074(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            72, 104 -> {
                return 1223
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1075(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1224
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1076(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1225
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1077(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1226
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1078(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            90, 122 -> {
                return 1227
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1079(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            80, 112 -> {
                return 1228
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1080(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1229
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1081(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1230
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1082(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 22
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1083(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            80, 112 -> {
                return 1231
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1084(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1232
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1085(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 1233
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1086(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 150
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1087(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1234
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1088(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 37
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1089(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1235
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1090(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1236
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1091(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1237
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1092(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1238
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1093(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1239
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1094(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1240
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1095(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 96
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1096(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1241
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1097(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1242
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1098(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1243
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1099(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1245
            }
            69, 101 -> {
                return 1244
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1100(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1246
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1101(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1247
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1102(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1248
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1103(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 1249
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1104(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1250
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1105(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1251
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1106(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1252
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1107(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 123
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1108(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            53 -> {
                return 1253
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1109(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            56 -> {
                return 1254
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1110(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            49 -> {
                return 1255
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1111(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1256
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1112(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 1257
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1113(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 1258
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1114(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 87
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 1259
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1115(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1260
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1116(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1261
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1117(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1262
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1118(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1263
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1119(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1264
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1120(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1265
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1121(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1266
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1122(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1267
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1123(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 1268
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1124(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1269
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1125(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 120
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1126(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 94
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1127(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1270
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1128(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1271
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1129(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            88, 120 -> {
                return 1272
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1130(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1273
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1131(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1274
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1132(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1275
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1133(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 111
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1134(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1276
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1135(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            90, 122 -> {
                return 1277
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1136(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 1278
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1137(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 150
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1138(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1279
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1139(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1280
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1140(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 87
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1141(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 1259
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1142(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1244
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1143(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1245
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1144(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 159
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            45 -> {
                return 972
            }
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 -> {
                return 1144
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1145(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1281
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1146(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            88, 120 -> {
                return 1282
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1147(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1283
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1148(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 8
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1149(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1284
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1150(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1285
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1151(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1286
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1152(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1287
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1153(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1288
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1154(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 21
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1155(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1289
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1156(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1290
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1157(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1291
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1158(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1292
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1159(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1293
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1160(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1294
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1161(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1295
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1162(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 33
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1163(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 35
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1164(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1296
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1165(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 35
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1166(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 33
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1167(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 38
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1168(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 817
            }
            39 -> {
                return 1297
            }
            92 -> {
                return 1011
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1169(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 -> {
                return 818
            }
            34 -> {
                return 1298
            }
            92 -> {
                return 1013
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1170(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 56
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1171(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1299
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1172(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 58
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1173(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1300
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1174(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 59
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1175(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1301
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1176(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1302
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1177(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1303
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1178(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1304
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1179(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 63
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1180(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1305
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1181(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1182(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1307
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1183(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 63
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1184(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1308
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1185(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1309
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1186(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1310
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1187(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1311
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1188(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1312
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1189(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1313
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1190(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 1314
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1191(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1315
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1192(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1316
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1193(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 130
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1194(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1317
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1195(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1318
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1196(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            54 -> {
                return 1319
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1197(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            52 -> {
                return 1320
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1198(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            50 -> {
                return 1321
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1199(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1322
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1200(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1323
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1201(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1324
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1202(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 104
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1203(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 59
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1204(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            89, 121 -> {
                return 1325
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1205(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 90
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1206(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 93
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1207(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 132
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1208(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 133
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1209(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1326
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1210(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1327
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1211(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1328
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1212(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 103
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1213(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 98
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1214(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1329
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1215(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 137
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1216(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1330
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1217(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1331
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1218(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1332
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1219(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 139
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1220(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 97
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1221(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1333
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1222(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1334
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1223(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 112
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1224(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1335
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1225(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 114
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1226(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            71, 103 -> {
                return 1336
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1227(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1337
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1228(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            95 -> {
                return 1338
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1229(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 58
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1230(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1339
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1231(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 56
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1232(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 21
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1233(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 146
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1234(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 151
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1235(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 38
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1236(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1340
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1237(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 139
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1238(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1341
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1239(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1342
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1240(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1343
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1241(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1344
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1242(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1345
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1243(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1346
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1244(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1347
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1245(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1348
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1246(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1349
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1247(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1350
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1248(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 1351
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1249(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1352
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1250(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1353
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1251(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 130
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1252(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1354
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1253(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            54 -> {
                return 1355
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1254(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            52 -> {
                return 1356
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1255(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            50 -> {
                return 1357
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1256(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1358
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1257(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 112
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1258(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            95 -> {
                return 1359
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1259(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1360
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1260(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 104
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1261(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            89, 121 -> {
                return 1361
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1262(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 90
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1263(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 93
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1264(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 132
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1265(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 133
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1266(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1362
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1267(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1363
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1268(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1364
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1269(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 103
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1270(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 98
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1271(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1365
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1272(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 137
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1273(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 97
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1274(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1366
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1275(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1367
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1276(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 114
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1277(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1368
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1278(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 146
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1279(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 158
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1280(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 158
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1281(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1369
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1282(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 2
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1283(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1370
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1284(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 13
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1285(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            66, 98 -> {
                return 1371
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1286(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 15
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            32 -> {
                return 1372
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1287(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 6
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1288(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 14
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1289(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1373
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1290(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1374
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1291(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            32 -> {
                return 1372
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1292(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 15
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1293(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 31
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1294(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 31
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1295(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1375
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1296(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1376
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1297(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 53
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1298(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 54
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1299(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 57
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1300(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 60
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1301(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 61
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1302(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 6
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1303(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1377
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1304(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1378
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1305(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 65
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1306(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 61
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1307(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1379
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1308(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1380
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1309(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 65
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1310(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 101
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1311(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            71, 103 -> {
                return 1381
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1312(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1382
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1313(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1383
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1314(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1384
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1315(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1385
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1316(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            68, 100 -> {
                return 1386
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1317(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 100
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1318(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1387
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1319(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 124
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1320(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 125
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1321(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 126
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1322(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1388
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1323(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 144
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1324(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1389
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1325(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            80, 112 -> {
                return 1390
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1326(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            75, 107 -> {
                return 1391
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1327(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1392
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1328(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1393
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1329(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1394
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1330(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 99
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1331(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1395
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1332(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1396
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1333(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            95 -> {
                return 1397
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1334(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 138
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1335(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1398
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1336(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 57
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1337(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1399
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1338(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1400
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1339(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 60
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1340(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1401
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1341(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 99
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1342(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1402
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1343(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1403
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1344(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 100
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1345(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 144
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1346(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1404
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1347(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 101
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1348(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            71, 103 -> {
                return 1405
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1349(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1406
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1350(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1407
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1351(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1408
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1352(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1409
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1353(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            68, 100 -> {
                return 1410
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1354(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1411
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1355(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 124
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1356(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 125
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1357(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 126
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1358(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1412
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1359(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1413
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1360(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1414
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1361(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            80, 112 -> {
                return 1415
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1362(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            75, 107 -> {
                return 1416
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1363(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1417
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1364(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1418
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1365(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1419
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1366(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            95 -> {
                return 1420
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1367(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 138
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1368(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1421
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1369(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1422
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1370(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1423
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1371(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1424
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1372(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            87, 119 -> {
                return 1425
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1373(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1426
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1374(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 29
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1375(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 32
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1376(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 32
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1377(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 64
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1378(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1427
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1379(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1428
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1380(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 64
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1381(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 129
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1382(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1429
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1383(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 108
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1384(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1430
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1385(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1431
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1386(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 121
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1387(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 116
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1388(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            77, 109 -> {
                return 1432
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1389(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1433
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1390(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1434
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1391(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 134
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1392(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1435
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1393(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1436
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1394(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 102
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1395(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1437
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1396(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1438
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1397(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            70, 102 -> {
                return 1439
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1398(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 115
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1399(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1440
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1400(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1441
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1401(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1442
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1402(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1443
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1403(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1444
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1404(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            77, 109 -> {
                return 1445
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1405(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 129
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1406(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1446
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1407(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 108
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1408(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1447
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1409(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1448
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1410(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 121
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1411(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 116
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1412(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 115
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1413(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1449
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1414(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1450
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1415(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1451
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1416(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 134
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1417(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1452
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1418(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1453
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1419(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 102
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1420(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            70, 102 -> {
                return 1454
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1421(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1455
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1422(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1456
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1423(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1457
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1424(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 4
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1425(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 1458
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1426(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 28
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1427(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 62
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1428(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 62
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1429(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1459
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1430(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1460
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1431(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 110
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1432(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 131
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1433(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            72, 104 -> {
                return 1461
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1434(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 89
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1435(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            76, 108 -> {
                return 1462
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1436(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1463
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1437(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 106
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1438(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 127
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1439(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            79, 111 -> {
                return 1464
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1440(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 117
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1441(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            78, 110 -> {
                return 1465
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1442(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 28
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1443(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 106
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1444(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 127
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1445(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 131
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1446(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1466
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1447(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1467
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1448(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 110
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1449(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            78, 110 -> {
                return 1468
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1450(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            72, 104 -> {
                return 1469
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1451(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 89
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1452(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            76, 108 -> {
                return 1470
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1453(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1471
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1454(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            79, 111 -> {
                return 1472
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1455(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 117
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1456(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1473
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1457(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 3
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1458(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1474
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1459(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 107
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1460(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 109
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1461(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            69, 101 -> {
                return 1475
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1462(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 135
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1463(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 136
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1464(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1476
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1465(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            67, 99 -> {
                return 1477
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1466(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 107
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1467(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 109
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1468(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            67, 99 -> {
                return 1478
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1469(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1479
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1470(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 135
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1471(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 136
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1472(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1480
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1473(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 161
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1474(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1481
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1475(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            83, 115 -> {
                return 1482
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1476(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            95 -> {
                return 1483
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1477(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            65, 97 -> {
                return 1484
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1478(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            65, 97 -> {
                return 1485
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1479(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            83, 115 -> {
                return 1486
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1480(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            95 -> {
                return 1487
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1481(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            69, 101 -> {
                return 1488
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1482(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 88
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1483(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            85, 117 -> {
                return 1489
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1484(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            84, 116 -> {
                return 1490
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1485(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            84, 116 -> {
                return 1491
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1486(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 88
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1487(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            85, 117 -> {
                return 1492
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1488(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 16
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1489(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            82, 114 -> {
                return 1493
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1490(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 145
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1491(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 145
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNode1492(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            82, 114 -> {
                return 1494
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1493(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            73, 105 -> {
                return 1495
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1494(): Int {
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            73, 105 -> {
                return 1496
            }
            else -> {
                return -1
            }
        }
    }

    private fun scannerDefinedNode1495(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 105
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        when (scannerDefinedCurrentChar) {
            -2 -> {
                return -2
            }
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 215, 247 -> {
                return -1
            }
            46 -> {
                return 561
            }
            58 -> {
                return 306
            }
            else -> {
                return 305
            }
        }
    }

    private fun scannerDefinedNode1496(): Int {
        scannerDefinedTokenPendingEnd = bufferDefinedPosition
        scannerDefinedTokenPendingType = 105
        scannerDefinedTokenFoundStart[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingStart
        scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingEnd
        scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = scannerDefinedTokenPendingType
        if ((scannerDefinedCurrentChar == -2)) {
            return -2
        } else {
            return -1
        }
    }

    private fun scannerDefinedNextToken(startNode: Int) {
        scannerDefinedNextTokenInternal(0)
        scannerDefinedNextTokenInternal(startNode)
        scannerDefinedTokenFoundWriteOffset = ((scannerDefinedTokenFoundWriteOffset + 1) % 4)
        scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable + 1)
    }

    private fun scannerDefinedNextTokenInternal(startNode: Int) {
        scannerDefinedTokenPendingStart = bufferDefinedPosition
        scannerDefinedTokenPendingType = -1
        var node: Int = startNode
        while ((node >= 0)) {
            bufferDefinedPosition = (bufferDefinedPosition + bufferDefinedLastSize)
            val bufferDefinedCurrentPosition: Int = (bufferDefinedPosition - bufferDefinedRangeStart)
            if ((bufferDefinedCurrentPosition >= bufferDefinedDataSize)) {
                scannerDefinedCurrentChar = -2
            } else {
                val firstByte: Int = ((bufferDefinedData[bufferDefinedCurrentPosition]).toInt() and 0xff)
                if ((firstByte < 0b10000000)) {
                    scannerDefinedCurrentChar = firstByte
                    bufferDefinedLastSize = 1
                } else {
                    val secondByte: Int = (((bufferDefinedData[(bufferDefinedCurrentPosition + 1)]).toInt() and 0xff) and 0b00111111)
                    if ((((firstByte and 0b11100000) == 0b11000000) && ((secondByte and 0b11000000) == 0b10000000))) {
                        scannerDefinedCurrentChar = (((firstByte and 0b00011111) shl 6) or secondByte)
                        bufferDefinedLastSize = 2
                    } else {
                        val thirdByte: Int = (((bufferDefinedData[(bufferDefinedCurrentPosition + 2)]).toInt() and 0xff) and 0b00111111)
                        if (((((firstByte and 0b11110000) == 0b11100000) && ((secondByte and 0b11000000) == 0b10000000)) && ((thirdByte and 0b11000000) == 0b10000000))) {
                            scannerDefinedCurrentChar = (((firstByte and 0b00001111) shl 12) or ((secondByte shl 6) or thirdByte))
                            bufferDefinedLastSize = 3
                        } else {
                            val fourthByte: Int = (((bufferDefinedData[(bufferDefinedCurrentPosition + 3)]).toInt() and 0xff) and 0b00111111)
                            if ((((((firstByte and 0b11111000) == 0b11110000) && ((secondByte and 0b11000000) == 0b10000000)) && ((thirdByte and 0b11000000) == 0b10000000)) && ((fourthByte and 0b11000000) == 0b10000000))) {
                                scannerDefinedCurrentChar = (((firstByte and 0b00000111) shl 18) or ((secondByte shl 12) or ((thirdByte shl 6) or fourthByte)))
                                bufferDefinedLastSize = 4
                            } else {
                                scannerDefinedCurrentChar = firstByte
                                bufferDefinedLastSize = 1
                            }
                        }
                    }
                }
                if ((bufferDefinedPosition >= bufferDefinedMaxPositionAvailable)) {
                    val bufferDefinedEreaseLength: Int = ((scannerDefinedTokenFoundEnd[((scannerDefinedTokenFoundWriteOffset + 1) % 4)]) - bufferDefinedRangeStart)
                    if ((bufferDefinedEreaseLength > 0)) {
                        bufferDefinedData.copyInto(bufferDefinedData, 0, bufferDefinedEreaseLength, bufferDefinedDataSize)
                        bufferDefinedDataSize = (bufferDefinedDataSize - bufferDefinedEreaseLength)
                        bufferDefinedRangeStart = (bufferDefinedRangeStart + bufferDefinedEreaseLength)
                    } else {
                        if ((bufferDefinedPosition != 0)) {
                            var newSize: Int = (bufferDefinedAllocatedSize + bufferDefinedAllocatedSize)
                            var data: ByteArray = ByteArray(newSize)
                            bufferDefinedData.copyInto(data, 0, 0, bufferDefinedDataSize)
                            bufferDefinedAllocatedSize = newSize
                            bufferDefinedData = data
                        }
                    }
                    val bufferDefinedLen: Int = bufferDefinedInputStream.read(bufferDefinedData, bufferDefinedDataSize, (bufferDefinedAllocatedSize - bufferDefinedDataSize))
                    if ((bufferDefinedLen != -1)) {
                        bufferDefinedDataSize = (bufferDefinedDataSize + bufferDefinedLen)
                    }
                    bufferDefinedMaxPositionAvailable = ((bufferDefinedDataSize + bufferDefinedRangeStart) - 8)
                }
            }
            when (node) {
                0 -> {
                    node = scannerDefinedNode0()
                }
                1 -> {
                    node = scannerDefinedNode1()
                }
                2 -> {
                    node = scannerDefinedNode2()
                }
                3 -> {
                    node = scannerDefinedNode3()
                }
                4 -> {
                    node = scannerDefinedNode4()
                }
                5 -> {
                    node = scannerDefinedNode5()
                }
                6 -> {
                    node = scannerDefinedNode6()
                }
                7 -> {
                    node = scannerDefinedNode7()
                }
                8 -> {
                    node = scannerDefinedNode8()
                }
                9 -> {
                    node = scannerDefinedNode9()
                }
                10 -> {
                    node = scannerDefinedNode10()
                }
                11 -> {
                    node = scannerDefinedNode11()
                }
                12 -> {
                    node = scannerDefinedNode12()
                }
                13 -> {
                    node = scannerDefinedNode13()
                }
                14 -> {
                    node = scannerDefinedNode14()
                }
                15 -> {
                    node = scannerDefinedNode15()
                }
                16 -> {
                    node = scannerDefinedNode16()
                }
                17 -> {
                    node = scannerDefinedNode17()
                }
                18 -> {
                    node = scannerDefinedNode18()
                }
                19 -> {
                    node = scannerDefinedNode19()
                }
                20 -> {
                    node = scannerDefinedNode20()
                }
                21 -> {
                    node = scannerDefinedNode21()
                }
                22 -> {
                    node = scannerDefinedNode22()
                }
                23 -> {
                    node = scannerDefinedNode23()
                }
                24 -> {
                    node = scannerDefinedNode24()
                }
                25 -> {
                    node = scannerDefinedNode25()
                }
                26 -> {
                    node = scannerDefinedNode26()
                }
                27 -> {
                    node = scannerDefinedNode27()
                }
                28 -> {
                    node = scannerDefinedNode28()
                }
                29 -> {
                    node = scannerDefinedNode29()
                }
                30 -> {
                    node = scannerDefinedNode30()
                }
                31 -> {
                    node = scannerDefinedNode31()
                }
                32 -> {
                    node = scannerDefinedNode32()
                }
                33 -> {
                    node = scannerDefinedNode33()
                }
                34 -> {
                    node = scannerDefinedNode34()
                }
                35 -> {
                    node = scannerDefinedNode35()
                }
                36 -> {
                    node = scannerDefinedNode36()
                }
                37 -> {
                    node = scannerDefinedNode37()
                }
                38 -> {
                    node = scannerDefinedNode38()
                }
                39 -> {
                    node = scannerDefinedNode39()
                }
                40 -> {
                    node = scannerDefinedNode40()
                }
                41 -> {
                    node = scannerDefinedNode41()
                }
                42 -> {
                    node = scannerDefinedNode42()
                }
                43 -> {
                    node = scannerDefinedNode43()
                }
                44 -> {
                    node = scannerDefinedNode44()
                }
                45 -> {
                    node = scannerDefinedNode45()
                }
                46 -> {
                    node = scannerDefinedNode46()
                }
                47 -> {
                    node = scannerDefinedNode47()
                }
                48 -> {
                    node = scannerDefinedNode48()
                }
                49 -> {
                    node = scannerDefinedNode49()
                }
                50 -> {
                    node = scannerDefinedNode50()
                }
                51 -> {
                    node = scannerDefinedNode51()
                }
                52 -> {
                    node = scannerDefinedNode52()
                }
                53 -> {
                    node = scannerDefinedNode53()
                }
                54 -> {
                    node = scannerDefinedNode54()
                }
                55 -> {
                    node = scannerDefinedNode55()
                }
                56 -> {
                    node = scannerDefinedNode56()
                }
                57 -> {
                    node = scannerDefinedNode57()
                }
                58 -> {
                    node = scannerDefinedNode58()
                }
                59 -> {
                    node = scannerDefinedNode59()
                }
                60 -> {
                    node = scannerDefinedNode60()
                }
                61 -> {
                    node = scannerDefinedNode61()
                }
                62 -> {
                    node = scannerDefinedNode62()
                }
                63 -> {
                    node = scannerDefinedNode63()
                }
                64 -> {
                    node = scannerDefinedNode64()
                }
                65 -> {
                    node = scannerDefinedNode65()
                }
                66 -> {
                    node = scannerDefinedNode66()
                }
                67 -> {
                    node = scannerDefinedNode67()
                }
                68 -> {
                    node = scannerDefinedNode68()
                }
                69 -> {
                    node = scannerDefinedNode69()
                }
                70 -> {
                    node = scannerDefinedNode70()
                }
                71 -> {
                    node = scannerDefinedNode71()
                }
                72 -> {
                    node = scannerDefinedNode72()
                }
                73 -> {
                    node = scannerDefinedNode73()
                }
                74 -> {
                    node = scannerDefinedNode74()
                }
                75 -> {
                    node = scannerDefinedNode75()
                }
                76 -> {
                    node = scannerDefinedNode76()
                }
                77 -> {
                    node = scannerDefinedNode77()
                }
                78 -> {
                    node = scannerDefinedNode78()
                }
                79 -> {
                    node = scannerDefinedNode79()
                }
                80 -> {
                    node = scannerDefinedNode80()
                }
                81 -> {
                    node = scannerDefinedNode81()
                }
                82 -> {
                    node = scannerDefinedNode82()
                }
                83 -> {
                    node = scannerDefinedNode83()
                }
                84 -> {
                    node = scannerDefinedNode84()
                }
                85 -> {
                    node = scannerDefinedNode85()
                }
                86 -> {
                    node = scannerDefinedNode86()
                }
                87 -> {
                    node = scannerDefinedNode87()
                }
                88 -> {
                    node = scannerDefinedNode88()
                }
                89 -> {
                    node = scannerDefinedNode89()
                }
                90 -> {
                    node = scannerDefinedNode90()
                }
                91 -> {
                    node = scannerDefinedNode91()
                }
                92 -> {
                    node = scannerDefinedNode92()
                }
                93 -> {
                    node = scannerDefinedNode93()
                }
                94 -> {
                    node = scannerDefinedNode94()
                }
                95 -> {
                    node = scannerDefinedNode95()
                }
                96 -> {
                    node = scannerDefinedNode96()
                }
                97 -> {
                    node = scannerDefinedNode97()
                }
                98 -> {
                    node = scannerDefinedNode98()
                }
                99 -> {
                    node = scannerDefinedNode99()
                }
                100 -> {
                    node = scannerDefinedNode100()
                }
                101 -> {
                    node = scannerDefinedNode101()
                }
                102 -> {
                    node = scannerDefinedNode102()
                }
                103 -> {
                    node = scannerDefinedNode103()
                }
                104 -> {
                    node = scannerDefinedNode104()
                }
                105 -> {
                    node = scannerDefinedNode105()
                }
                106 -> {
                    node = scannerDefinedNode106()
                }
                107 -> {
                    node = scannerDefinedNode107()
                }
                108 -> {
                    node = scannerDefinedNode108()
                }
                109 -> {
                    node = scannerDefinedNode109()
                }
                110 -> {
                    node = scannerDefinedNode110()
                }
                111 -> {
                    node = scannerDefinedNode111()
                }
                112 -> {
                    node = scannerDefinedNode112()
                }
                113 -> {
                    node = scannerDefinedNode113()
                }
                114 -> {
                    node = scannerDefinedNode114()
                }
                115 -> {
                    node = scannerDefinedNode115()
                }
                116 -> {
                    node = scannerDefinedNode116()
                }
                117 -> {
                    node = scannerDefinedNode117()
                }
                118 -> {
                    node = scannerDefinedNode118()
                }
                119 -> {
                    node = scannerDefinedNode119()
                }
                120 -> {
                    node = scannerDefinedNode120()
                }
                121 -> {
                    node = scannerDefinedNode121()
                }
                122 -> {
                    node = scannerDefinedNode122()
                }
                123 -> {
                    node = scannerDefinedNode123()
                }
                124 -> {
                    node = scannerDefinedNode124()
                }
                125 -> {
                    node = scannerDefinedNode125()
                }
                126 -> {
                    node = scannerDefinedNode126()
                }
                127 -> {
                    node = scannerDefinedNode127()
                }
                128 -> {
                    node = scannerDefinedNode128()
                }
                129 -> {
                    node = scannerDefinedNode129()
                }
                130 -> {
                    node = scannerDefinedNode130()
                }
                131 -> {
                    node = scannerDefinedNode131()
                }
                132 -> {
                    node = scannerDefinedNode132()
                }
                133 -> {
                    node = scannerDefinedNode133()
                }
                134 -> {
                    node = scannerDefinedNode134()
                }
                135 -> {
                    node = scannerDefinedNode135()
                }
                136 -> {
                    node = scannerDefinedNode136()
                }
                137 -> {
                    node = scannerDefinedNode137()
                }
                138 -> {
                    node = scannerDefinedNode138()
                }
                139 -> {
                    node = scannerDefinedNode139()
                }
                140 -> {
                    node = scannerDefinedNode140()
                }
                141 -> {
                    node = scannerDefinedNode141()
                }
                142 -> {
                    node = scannerDefinedNode142()
                }
                143 -> {
                    node = scannerDefinedNode143()
                }
                144 -> {
                    node = scannerDefinedNode144()
                }
                145 -> {
                    node = scannerDefinedNode145()
                }
                146 -> {
                    node = scannerDefinedNode146()
                }
                147 -> {
                    node = scannerDefinedNode147()
                }
                148 -> {
                    node = scannerDefinedNode148()
                }
                149 -> {
                    node = scannerDefinedNode149()
                }
                150 -> {
                    node = scannerDefinedNode150()
                }
                151 -> {
                    node = scannerDefinedNode151()
                }
                152 -> {
                    node = scannerDefinedNode152()
                }
                153 -> {
                    node = scannerDefinedNode153()
                }
                154 -> {
                    node = scannerDefinedNode154()
                }
                155 -> {
                    node = scannerDefinedNode155()
                }
                156 -> {
                    node = scannerDefinedNode156()
                }
                157 -> {
                    node = scannerDefinedNode157()
                }
                158 -> {
                    node = scannerDefinedNode158()
                }
                159 -> {
                    node = scannerDefinedNode159()
                }
                160 -> {
                    node = scannerDefinedNode160()
                }
                161 -> {
                    node = scannerDefinedNode161()
                }
                162 -> {
                    node = scannerDefinedNode162()
                }
                163 -> {
                    node = scannerDefinedNode163()
                }
                164 -> {
                    node = scannerDefinedNode164()
                }
                165 -> {
                    node = scannerDefinedNode165()
                }
                166 -> {
                    node = scannerDefinedNode166()
                }
                167 -> {
                    node = scannerDefinedNode167()
                }
                168 -> {
                    node = scannerDefinedNode168()
                }
                169 -> {
                    node = scannerDefinedNode169()
                }
                170 -> {
                    node = scannerDefinedNode170()
                }
                171 -> {
                    node = scannerDefinedNode171()
                }
                172 -> {
                    node = scannerDefinedNode172()
                }
                173 -> {
                    node = scannerDefinedNode173()
                }
                174 -> {
                    node = scannerDefinedNode174()
                }
                175 -> {
                    node = scannerDefinedNode175()
                }
                176 -> {
                    node = scannerDefinedNode176()
                }
                177 -> {
                    node = scannerDefinedNode177()
                }
                178 -> {
                    node = scannerDefinedNode178()
                }
                179 -> {
                    node = scannerDefinedNode179()
                }
                180 -> {
                    node = scannerDefinedNode180()
                }
                181 -> {
                    node = scannerDefinedNode181()
                }
                182 -> {
                    node = scannerDefinedNode182()
                }
                183 -> {
                    node = scannerDefinedNode183()
                }
                184 -> {
                    node = scannerDefinedNode184()
                }
                185 -> {
                    node = scannerDefinedNode185()
                }
                186 -> {
                    node = scannerDefinedNode186()
                }
                187 -> {
                    node = scannerDefinedNode187()
                }
                188 -> {
                    node = scannerDefinedNode188()
                }
                189 -> {
                    node = scannerDefinedNode189()
                }
                190 -> {
                    node = scannerDefinedNode190()
                }
                191 -> {
                    node = scannerDefinedNode191()
                }
                192 -> {
                    node = scannerDefinedNode192()
                }
                193 -> {
                    node = scannerDefinedNode193()
                }
                194 -> {
                    node = scannerDefinedNode194()
                }
                195 -> {
                    node = scannerDefinedNode195()
                }
                196 -> {
                    node = scannerDefinedNode196()
                }
                197 -> {
                    node = scannerDefinedNode197()
                }
                198 -> {
                    node = scannerDefinedNode198()
                }
                199 -> {
                    node = scannerDefinedNode199()
                }
                200 -> {
                    node = scannerDefinedNode200()
                }
                201 -> {
                    node = scannerDefinedNode201()
                }
                202 -> {
                    node = scannerDefinedNode202()
                }
                203 -> {
                    node = scannerDefinedNode203()
                }
                204 -> {
                    node = scannerDefinedNode204()
                }
                205 -> {
                    node = scannerDefinedNode205()
                }
                206 -> {
                    node = scannerDefinedNode206()
                }
                207 -> {
                    node = scannerDefinedNode207()
                }
                208 -> {
                    node = scannerDefinedNode208()
                }
                209 -> {
                    node = scannerDefinedNode209()
                }
                210 -> {
                    node = scannerDefinedNode210()
                }
                211 -> {
                    node = scannerDefinedNode211()
                }
                212 -> {
                    node = scannerDefinedNode212()
                }
                213 -> {
                    node = scannerDefinedNode213()
                }
                214 -> {
                    node = scannerDefinedNode214()
                }
                215 -> {
                    node = scannerDefinedNode215()
                }
                216 -> {
                    node = scannerDefinedNode216()
                }
                217 -> {
                    node = scannerDefinedNode217()
                }
                218 -> {
                    node = scannerDefinedNode218()
                }
                219 -> {
                    node = scannerDefinedNode219()
                }
                220 -> {
                    node = scannerDefinedNode220()
                }
                221 -> {
                    node = scannerDefinedNode221()
                }
                222 -> {
                    node = scannerDefinedNode222()
                }
                223 -> {
                    node = scannerDefinedNode223()
                }
                224 -> {
                    node = scannerDefinedNode224()
                }
                225 -> {
                    node = scannerDefinedNode225()
                }
                226 -> {
                    node = scannerDefinedNode226()
                }
                227 -> {
                    node = scannerDefinedNode227()
                }
                228 -> {
                    node = scannerDefinedNode228()
                }
                229 -> {
                    node = scannerDefinedNode229()
                }
                230 -> {
                    node = scannerDefinedNode230()
                }
                231 -> {
                    node = scannerDefinedNode231()
                }
                232 -> {
                    node = scannerDefinedNode232()
                }
                233 -> {
                    node = scannerDefinedNode233()
                }
                234 -> {
                    node = scannerDefinedNode234()
                }
                235 -> {
                    node = scannerDefinedNode235()
                }
                236 -> {
                    node = scannerDefinedNode236()
                }
                237 -> {
                    node = scannerDefinedNode237()
                }
                238 -> {
                    node = scannerDefinedNode238()
                }
                239 -> {
                    node = scannerDefinedNode239()
                }
                240 -> {
                    node = scannerDefinedNode240()
                }
                241 -> {
                    node = scannerDefinedNode241()
                }
                242 -> {
                    node = scannerDefinedNode242()
                }
                243 -> {
                    node = scannerDefinedNode243()
                }
                244 -> {
                    node = scannerDefinedNode244()
                }
                245 -> {
                    node = scannerDefinedNode245()
                }
                246 -> {
                    node = scannerDefinedNode246()
                }
                247 -> {
                    node = scannerDefinedNode247()
                }
                248 -> {
                    node = scannerDefinedNode248()
                }
                249 -> {
                    node = scannerDefinedNode249()
                }
                250 -> {
                    node = scannerDefinedNode250()
                }
                251 -> {
                    node = scannerDefinedNode251()
                }
                252 -> {
                    node = scannerDefinedNode252()
                }
                253 -> {
                    node = scannerDefinedNode253()
                }
                254 -> {
                    node = scannerDefinedNode254()
                }
                255 -> {
                    node = scannerDefinedNode255()
                }
                256 -> {
                    node = scannerDefinedNode256()
                }
                257 -> {
                    node = scannerDefinedNode257()
                }
                258 -> {
                    node = scannerDefinedNode258()
                }
                259 -> {
                    node = scannerDefinedNode259()
                }
                260 -> {
                    node = scannerDefinedNode260()
                }
                261 -> {
                    node = scannerDefinedNode261()
                }
                262 -> {
                    node = scannerDefinedNode262()
                }
                263 -> {
                    node = scannerDefinedNode263()
                }
                264 -> {
                    node = scannerDefinedNode264()
                }
                265 -> {
                    node = scannerDefinedNode265()
                }
                266 -> {
                    node = scannerDefinedNode266()
                }
                267 -> {
                    node = scannerDefinedNode267()
                }
                268 -> {
                    node = scannerDefinedNode268()
                }
                269 -> {
                    node = scannerDefinedNode269()
                }
                270 -> {
                    node = scannerDefinedNode270()
                }
                271 -> {
                    node = scannerDefinedNode271()
                }
                272 -> {
                    node = scannerDefinedNode272()
                }
                273 -> {
                    node = scannerDefinedNode273()
                }
                274 -> {
                    node = scannerDefinedNode274()
                }
                275 -> {
                    node = scannerDefinedNode275()
                }
                276 -> {
                    node = scannerDefinedNode276()
                }
                277 -> {
                    node = scannerDefinedNode277()
                }
                278 -> {
                    node = scannerDefinedNode278()
                }
                279 -> {
                    node = scannerDefinedNode279()
                }
                280 -> {
                    node = scannerDefinedNode280()
                }
                281 -> {
                    node = scannerDefinedNode281()
                }
                282 -> {
                    node = scannerDefinedNode282()
                }
                283 -> {
                    node = scannerDefinedNode283()
                }
                284 -> {
                    node = scannerDefinedNode284()
                }
                285 -> {
                    node = scannerDefinedNode285()
                }
                286 -> {
                    node = scannerDefinedNode286()
                }
                287 -> {
                    node = scannerDefinedNode287()
                }
                288 -> {
                    node = scannerDefinedNode288()
                }
                289 -> {
                    node = scannerDefinedNode289()
                }
                290 -> {
                    node = scannerDefinedNode290()
                }
                291 -> {
                    node = scannerDefinedNode291()
                }
                292 -> {
                    node = scannerDefinedNode292()
                }
                293 -> {
                    node = scannerDefinedNode293()
                }
                294 -> {
                    node = scannerDefinedNode294()
                }
                295 -> {
                    node = scannerDefinedNode295()
                }
                296 -> {
                    node = scannerDefinedNode296()
                }
                297 -> {
                    node = scannerDefinedNode297()
                }
                298 -> {
                    node = scannerDefinedNode298()
                }
                299 -> {
                    node = scannerDefinedNode299()
                }
                300 -> {
                    node = scannerDefinedNode300()
                }
                301 -> {
                    node = scannerDefinedNode301()
                }
                302 -> {
                    node = scannerDefinedNode302()
                }
                303 -> {
                    node = scannerDefinedNode303()
                }
                304 -> {
                    node = scannerDefinedNode304()
                }
                305 -> {
                    node = scannerDefinedNode305()
                }
                306 -> {
                    node = scannerDefinedNode306()
                }
                307 -> {
                    node = scannerDefinedNode307()
                }
                308 -> {
                    node = scannerDefinedNode308()
                }
                309 -> {
                    node = scannerDefinedNode309()
                }
                310 -> {
                    node = scannerDefinedNode310()
                }
                311 -> {
                    node = scannerDefinedNode311()
                }
                312 -> {
                    node = scannerDefinedNode312()
                }
                313 -> {
                    node = scannerDefinedNode313()
                }
                314 -> {
                    node = scannerDefinedNode314()
                }
                315 -> {
                    node = scannerDefinedNode315()
                }
                316 -> {
                    node = scannerDefinedNode316()
                }
                317 -> {
                    node = scannerDefinedNode317()
                }
                318 -> {
                    node = scannerDefinedNode318()
                }
                319 -> {
                    node = scannerDefinedNode319()
                }
                320 -> {
                    node = scannerDefinedNode320()
                }
                321 -> {
                    node = scannerDefinedNode321()
                }
                322 -> {
                    node = scannerDefinedNode322()
                }
                323 -> {
                    node = scannerDefinedNode323()
                }
                324 -> {
                    node = scannerDefinedNode324()
                }
                325 -> {
                    node = scannerDefinedNode325()
                }
                326 -> {
                    node = scannerDefinedNode326()
                }
                327 -> {
                    node = scannerDefinedNode327()
                }
                328 -> {
                    node = scannerDefinedNode328()
                }
                329 -> {
                    node = scannerDefinedNode329()
                }
                330 -> {
                    node = scannerDefinedNode330()
                }
                331 -> {
                    node = scannerDefinedNode331()
                }
                332 -> {
                    node = scannerDefinedNode332()
                }
                333 -> {
                    node = scannerDefinedNode333()
                }
                334 -> {
                    node = scannerDefinedNode334()
                }
                335 -> {
                    node = scannerDefinedNode335()
                }
                336 -> {
                    node = scannerDefinedNode336()
                }
                337 -> {
                    node = scannerDefinedNode337()
                }
                338 -> {
                    node = scannerDefinedNode338()
                }
                339 -> {
                    node = scannerDefinedNode339()
                }
                340 -> {
                    node = scannerDefinedNode340()
                }
                341 -> {
                    node = scannerDefinedNode341()
                }
                342 -> {
                    node = scannerDefinedNode342()
                }
                343 -> {
                    node = scannerDefinedNode343()
                }
                344 -> {
                    node = scannerDefinedNode344()
                }
                345 -> {
                    node = scannerDefinedNode345()
                }
                346 -> {
                    node = scannerDefinedNode346()
                }
                347 -> {
                    node = scannerDefinedNode347()
                }
                348 -> {
                    node = scannerDefinedNode348()
                }
                349 -> {
                    node = scannerDefinedNode349()
                }
                350 -> {
                    node = scannerDefinedNode350()
                }
                351 -> {
                    node = scannerDefinedNode351()
                }
                352 -> {
                    node = scannerDefinedNode352()
                }
                353 -> {
                    node = scannerDefinedNode353()
                }
                354 -> {
                    node = scannerDefinedNode354()
                }
                355 -> {
                    node = scannerDefinedNode355()
                }
                356 -> {
                    node = scannerDefinedNode356()
                }
                357 -> {
                    node = scannerDefinedNode357()
                }
                358 -> {
                    node = scannerDefinedNode358()
                }
                359 -> {
                    node = scannerDefinedNode359()
                }
                360 -> {
                    node = scannerDefinedNode360()
                }
                361 -> {
                    node = scannerDefinedNode361()
                }
                362 -> {
                    node = scannerDefinedNode362()
                }
                363 -> {
                    node = scannerDefinedNode363()
                }
                364 -> {
                    node = scannerDefinedNode364()
                }
                365 -> {
                    node = scannerDefinedNode365()
                }
                366 -> {
                    node = scannerDefinedNode366()
                }
                367 -> {
                    node = scannerDefinedNode367()
                }
                368 -> {
                    node = scannerDefinedNode368()
                }
                369 -> {
                    node = scannerDefinedNode369()
                }
                370 -> {
                    node = scannerDefinedNode370()
                }
                371 -> {
                    node = scannerDefinedNode371()
                }
                372 -> {
                    node = scannerDefinedNode372()
                }
                373 -> {
                    node = scannerDefinedNode373()
                }
                374 -> {
                    node = scannerDefinedNode374()
                }
                375 -> {
                    node = scannerDefinedNode375()
                }
                376 -> {
                    node = scannerDefinedNode376()
                }
                377 -> {
                    node = scannerDefinedNode377()
                }
                378 -> {
                    node = scannerDefinedNode378()
                }
                379 -> {
                    node = scannerDefinedNode379()
                }
                380 -> {
                    node = scannerDefinedNode380()
                }
                381 -> {
                    node = scannerDefinedNode381()
                }
                382 -> {
                    node = scannerDefinedNode382()
                }
                383 -> {
                    node = scannerDefinedNode383()
                }
                384 -> {
                    node = scannerDefinedNode384()
                }
                385 -> {
                    node = scannerDefinedNode385()
                }
                386 -> {
                    node = scannerDefinedNode386()
                }
                387 -> {
                    node = scannerDefinedNode387()
                }
                388 -> {
                    node = scannerDefinedNode388()
                }
                389 -> {
                    node = scannerDefinedNode389()
                }
                390 -> {
                    node = scannerDefinedNode390()
                }
                391 -> {
                    node = scannerDefinedNode391()
                }
                392 -> {
                    node = scannerDefinedNode392()
                }
                393 -> {
                    node = scannerDefinedNode393()
                }
                394 -> {
                    node = scannerDefinedNode394()
                }
                395 -> {
                    node = scannerDefinedNode395()
                }
                396 -> {
                    node = scannerDefinedNode396()
                }
                397 -> {
                    node = scannerDefinedNode397()
                }
                398 -> {
                    node = scannerDefinedNode398()
                }
                399 -> {
                    node = scannerDefinedNode399()
                }
                400 -> {
                    node = scannerDefinedNode400()
                }
                401 -> {
                    node = scannerDefinedNode401()
                }
                402 -> {
                    node = scannerDefinedNode402()
                }
                403 -> {
                    node = scannerDefinedNode403()
                }
                404 -> {
                    node = scannerDefinedNode404()
                }
                405 -> {
                    node = scannerDefinedNode405()
                }
                406 -> {
                    node = scannerDefinedNode406()
                }
                407 -> {
                    node = scannerDefinedNode407()
                }
                408 -> {
                    node = scannerDefinedNode408()
                }
                409 -> {
                    node = scannerDefinedNode409()
                }
                410 -> {
                    node = scannerDefinedNode410()
                }
                411 -> {
                    node = scannerDefinedNode411()
                }
                412 -> {
                    node = scannerDefinedNode412()
                }
                413 -> {
                    node = scannerDefinedNode413()
                }
                414 -> {
                    node = scannerDefinedNode414()
                }
                415 -> {
                    node = scannerDefinedNode415()
                }
                416 -> {
                    node = scannerDefinedNode416()
                }
                417 -> {
                    node = scannerDefinedNode417()
                }
                418 -> {
                    node = scannerDefinedNode418()
                }
                419 -> {
                    node = scannerDefinedNode419()
                }
                420 -> {
                    node = scannerDefinedNode420()
                }
                421 -> {
                    node = scannerDefinedNode421()
                }
                422 -> {
                    node = scannerDefinedNode422()
                }
                423 -> {
                    node = scannerDefinedNode423()
                }
                424 -> {
                    node = scannerDefinedNode424()
                }
                425 -> {
                    node = scannerDefinedNode425()
                }
                426 -> {
                    node = scannerDefinedNode426()
                }
                427 -> {
                    node = scannerDefinedNode427()
                }
                428 -> {
                    node = scannerDefinedNode428()
                }
                429 -> {
                    node = scannerDefinedNode429()
                }
                430 -> {
                    node = scannerDefinedNode430()
                }
                431 -> {
                    node = scannerDefinedNode431()
                }
                432 -> {
                    node = scannerDefinedNode432()
                }
                433 -> {
                    node = scannerDefinedNode433()
                }
                434 -> {
                    node = scannerDefinedNode434()
                }
                435 -> {
                    node = scannerDefinedNode435()
                }
                436 -> {
                    node = scannerDefinedNode436()
                }
                437 -> {
                    node = scannerDefinedNode437()
                }
                438 -> {
                    node = scannerDefinedNode438()
                }
                439 -> {
                    node = scannerDefinedNode439()
                }
                440 -> {
                    node = scannerDefinedNode440()
                }
                441 -> {
                    node = scannerDefinedNode441()
                }
                442 -> {
                    node = scannerDefinedNode442()
                }
                443 -> {
                    node = scannerDefinedNode443()
                }
                444 -> {
                    node = scannerDefinedNode444()
                }
                445 -> {
                    node = scannerDefinedNode445()
                }
                446 -> {
                    node = scannerDefinedNode446()
                }
                447 -> {
                    node = scannerDefinedNode447()
                }
                448 -> {
                    node = scannerDefinedNode448()
                }
                449 -> {
                    node = scannerDefinedNode449()
                }
                450 -> {
                    node = scannerDefinedNode450()
                }
                451 -> {
                    node = scannerDefinedNode451()
                }
                452 -> {
                    node = scannerDefinedNode452()
                }
                453 -> {
                    node = scannerDefinedNode453()
                }
                454 -> {
                    node = scannerDefinedNode454()
                }
                455 -> {
                    node = scannerDefinedNode455()
                }
                456 -> {
                    node = scannerDefinedNode456()
                }
                457 -> {
                    node = scannerDefinedNode457()
                }
                458 -> {
                    node = scannerDefinedNode458()
                }
                459 -> {
                    node = scannerDefinedNode459()
                }
                460 -> {
                    node = scannerDefinedNode460()
                }
                461 -> {
                    node = scannerDefinedNode461()
                }
                462 -> {
                    node = scannerDefinedNode462()
                }
                463 -> {
                    node = scannerDefinedNode463()
                }
                464 -> {
                    node = scannerDefinedNode464()
                }
                465 -> {
                    node = scannerDefinedNode465()
                }
                466 -> {
                    node = scannerDefinedNode466()
                }
                467 -> {
                    node = scannerDefinedNode467()
                }
                468 -> {
                    node = scannerDefinedNode468()
                }
                469 -> {
                    node = scannerDefinedNode469()
                }
                470 -> {
                    node = scannerDefinedNode470()
                }
                471 -> {
                    node = scannerDefinedNode471()
                }
                472 -> {
                    node = scannerDefinedNode472()
                }
                473 -> {
                    node = scannerDefinedNode473()
                }
                474 -> {
                    node = scannerDefinedNode474()
                }
                475 -> {
                    node = scannerDefinedNode475()
                }
                476 -> {
                    node = scannerDefinedNode476()
                }
                477 -> {
                    node = scannerDefinedNode477()
                }
                478 -> {
                    node = scannerDefinedNode478()
                }
                479 -> {
                    node = scannerDefinedNode479()
                }
                480 -> {
                    node = scannerDefinedNode480()
                }
                481 -> {
                    node = scannerDefinedNode481()
                }
                482 -> {
                    node = scannerDefinedNode482()
                }
                483 -> {
                    node = scannerDefinedNode483()
                }
                484 -> {
                    node = scannerDefinedNode484()
                }
                485 -> {
                    node = scannerDefinedNode485()
                }
                486 -> {
                    node = scannerDefinedNode486()
                }
                487 -> {
                    node = scannerDefinedNode487()
                }
                488 -> {
                    node = scannerDefinedNode488()
                }
                489 -> {
                    node = scannerDefinedNode489()
                }
                490 -> {
                    node = scannerDefinedNode490()
                }
                491 -> {
                    node = scannerDefinedNode491()
                }
                492 -> {
                    node = scannerDefinedNode492()
                }
                493 -> {
                    node = scannerDefinedNode493()
                }
                494 -> {
                    node = scannerDefinedNode494()
                }
                495 -> {
                    node = scannerDefinedNode495()
                }
                496 -> {
                    node = scannerDefinedNode496()
                }
                497 -> {
                    node = scannerDefinedNode497()
                }
                498 -> {
                    node = scannerDefinedNode498()
                }
                499 -> {
                    node = scannerDefinedNode499()
                }
                500 -> {
                    node = scannerDefinedNode500()
                }
                501 -> {
                    node = scannerDefinedNode501()
                }
                502 -> {
                    node = scannerDefinedNode502()
                }
                503 -> {
                    node = scannerDefinedNode503()
                }
                504 -> {
                    node = scannerDefinedNode504()
                }
                505 -> {
                    node = scannerDefinedNode505()
                }
                506 -> {
                    node = scannerDefinedNode506()
                }
                507 -> {
                    node = scannerDefinedNode507()
                }
                508 -> {
                    node = scannerDefinedNode508()
                }
                509 -> {
                    node = scannerDefinedNode509()
                }
                510 -> {
                    node = scannerDefinedNode510()
                }
                511 -> {
                    node = scannerDefinedNode511()
                }
                512 -> {
                    node = scannerDefinedNode512()
                }
                513 -> {
                    node = scannerDefinedNode513()
                }
                514 -> {
                    node = scannerDefinedNode514()
                }
                515 -> {
                    node = scannerDefinedNode515()
                }
                516 -> {
                    node = scannerDefinedNode516()
                }
                517 -> {
                    node = scannerDefinedNode517()
                }
                518 -> {
                    node = scannerDefinedNode518()
                }
                519 -> {
                    node = scannerDefinedNode519()
                }
                520 -> {
                    node = scannerDefinedNode520()
                }
                521 -> {
                    node = scannerDefinedNode521()
                }
                522 -> {
                    node = scannerDefinedNode522()
                }
                523 -> {
                    node = scannerDefinedNode523()
                }
                524 -> {
                    node = scannerDefinedNode524()
                }
                525 -> {
                    node = scannerDefinedNode525()
                }
                526 -> {
                    node = scannerDefinedNode526()
                }
                527 -> {
                    node = scannerDefinedNode527()
                }
                528 -> {
                    node = scannerDefinedNode528()
                }
                529 -> {
                    node = scannerDefinedNode529()
                }
                530 -> {
                    node = scannerDefinedNode530()
                }
                531 -> {
                    node = scannerDefinedNode531()
                }
                532 -> {
                    node = scannerDefinedNode532()
                }
                533 -> {
                    node = scannerDefinedNode533()
                }
                534 -> {
                    node = scannerDefinedNode534()
                }
                535 -> {
                    node = scannerDefinedNode535()
                }
                536 -> {
                    node = scannerDefinedNode536()
                }
                537 -> {
                    node = scannerDefinedNode537()
                }
                538 -> {
                    node = scannerDefinedNode538()
                }
                539 -> {
                    node = scannerDefinedNode539()
                }
                540 -> {
                    node = scannerDefinedNode540()
                }
                541 -> {
                    node = scannerDefinedNode541()
                }
                542 -> {
                    node = scannerDefinedNode542()
                }
                543 -> {
                    node = scannerDefinedNode543()
                }
                544 -> {
                    node = scannerDefinedNode544()
                }
                545 -> {
                    node = scannerDefinedNode545()
                }
                546 -> {
                    node = scannerDefinedNode546()
                }
                547 -> {
                    node = scannerDefinedNode547()
                }
                548 -> {
                    node = scannerDefinedNode548()
                }
                549 -> {
                    node = scannerDefinedNode549()
                }
                550 -> {
                    node = scannerDefinedNode550()
                }
                551 -> {
                    node = scannerDefinedNode551()
                }
                552 -> {
                    node = scannerDefinedNode552()
                }
                553 -> {
                    node = scannerDefinedNode553()
                }
                554 -> {
                    node = scannerDefinedNode554()
                }
                555 -> {
                    node = scannerDefinedNode555()
                }
                556 -> {
                    node = scannerDefinedNode556()
                }
                557 -> {
                    node = scannerDefinedNode557()
                }
                558 -> {
                    node = scannerDefinedNode558()
                }
                559 -> {
                    node = scannerDefinedNode559()
                }
                560 -> {
                    node = scannerDefinedNode560()
                }
                561 -> {
                    node = scannerDefinedNode561()
                }
                562 -> {
                    node = scannerDefinedNode562()
                }
                563 -> {
                    node = scannerDefinedNode563()
                }
                564 -> {
                    node = scannerDefinedNode564()
                }
                565 -> {
                    node = scannerDefinedNode565()
                }
                566 -> {
                    node = scannerDefinedNode566()
                }
                567 -> {
                    node = scannerDefinedNode567()
                }
                568 -> {
                    node = scannerDefinedNode568()
                }
                569 -> {
                    node = scannerDefinedNode569()
                }
                570 -> {
                    node = scannerDefinedNode570()
                }
                571 -> {
                    node = scannerDefinedNode571()
                }
                572 -> {
                    node = scannerDefinedNode572()
                }
                573 -> {
                    node = scannerDefinedNode573()
                }
                574 -> {
                    node = scannerDefinedNode574()
                }
                575 -> {
                    node = scannerDefinedNode575()
                }
                576 -> {
                    node = scannerDefinedNode576()
                }
                577 -> {
                    node = scannerDefinedNode577()
                }
                578 -> {
                    node = scannerDefinedNode578()
                }
                579 -> {
                    node = scannerDefinedNode579()
                }
                580 -> {
                    node = scannerDefinedNode580()
                }
                581 -> {
                    node = scannerDefinedNode581()
                }
                582 -> {
                    node = scannerDefinedNode582()
                }
                583 -> {
                    node = scannerDefinedNode583()
                }
                584 -> {
                    node = scannerDefinedNode584()
                }
                585 -> {
                    node = scannerDefinedNode585()
                }
                586 -> {
                    node = scannerDefinedNode586()
                }
                587 -> {
                    node = scannerDefinedNode587()
                }
                588 -> {
                    node = scannerDefinedNode588()
                }
                589 -> {
                    node = scannerDefinedNode589()
                }
                590 -> {
                    node = scannerDefinedNode590()
                }
                591 -> {
                    node = scannerDefinedNode591()
                }
                592 -> {
                    node = scannerDefinedNode592()
                }
                593 -> {
                    node = scannerDefinedNode593()
                }
                594 -> {
                    node = scannerDefinedNode594()
                }
                595 -> {
                    node = scannerDefinedNode595()
                }
                596 -> {
                    node = scannerDefinedNode596()
                }
                597 -> {
                    node = scannerDefinedNode597()
                }
                598 -> {
                    node = scannerDefinedNode598()
                }
                599 -> {
                    node = scannerDefinedNode599()
                }
                600 -> {
                    node = scannerDefinedNode600()
                }
                601 -> {
                    node = scannerDefinedNode601()
                }
                602 -> {
                    node = scannerDefinedNode602()
                }
                603 -> {
                    node = scannerDefinedNode603()
                }
                604 -> {
                    node = scannerDefinedNode604()
                }
                605 -> {
                    node = scannerDefinedNode605()
                }
                606 -> {
                    node = scannerDefinedNode606()
                }
                607 -> {
                    node = scannerDefinedNode607()
                }
                608 -> {
                    node = scannerDefinedNode608()
                }
                609 -> {
                    node = scannerDefinedNode609()
                }
                610 -> {
                    node = scannerDefinedNode610()
                }
                611 -> {
                    node = scannerDefinedNode611()
                }
                612 -> {
                    node = scannerDefinedNode612()
                }
                613 -> {
                    node = scannerDefinedNode613()
                }
                614 -> {
                    node = scannerDefinedNode614()
                }
                615 -> {
                    node = scannerDefinedNode615()
                }
                616 -> {
                    node = scannerDefinedNode616()
                }
                617 -> {
                    node = scannerDefinedNode617()
                }
                618 -> {
                    node = scannerDefinedNode618()
                }
                619 -> {
                    node = scannerDefinedNode619()
                }
                620 -> {
                    node = scannerDefinedNode620()
                }
                621 -> {
                    node = scannerDefinedNode621()
                }
                622 -> {
                    node = scannerDefinedNode622()
                }
                623 -> {
                    node = scannerDefinedNode623()
                }
                624 -> {
                    node = scannerDefinedNode624()
                }
                625 -> {
                    node = scannerDefinedNode625()
                }
                626 -> {
                    node = scannerDefinedNode626()
                }
                627 -> {
                    node = scannerDefinedNode627()
                }
                628 -> {
                    node = scannerDefinedNode628()
                }
                629 -> {
                    node = scannerDefinedNode629()
                }
                630 -> {
                    node = scannerDefinedNode630()
                }
                631 -> {
                    node = scannerDefinedNode631()
                }
                632 -> {
                    node = scannerDefinedNode632()
                }
                633 -> {
                    node = scannerDefinedNode633()
                }
                634 -> {
                    node = scannerDefinedNode634()
                }
                635 -> {
                    node = scannerDefinedNode635()
                }
                636 -> {
                    node = scannerDefinedNode636()
                }
                637 -> {
                    node = scannerDefinedNode637()
                }
                638 -> {
                    node = scannerDefinedNode638()
                }
                639 -> {
                    node = scannerDefinedNode639()
                }
                640 -> {
                    node = scannerDefinedNode640()
                }
                641 -> {
                    node = scannerDefinedNode641()
                }
                642 -> {
                    node = scannerDefinedNode642()
                }
                643 -> {
                    node = scannerDefinedNode643()
                }
                644 -> {
                    node = scannerDefinedNode644()
                }
                645 -> {
                    node = scannerDefinedNode645()
                }
                646 -> {
                    node = scannerDefinedNode646()
                }
                647 -> {
                    node = scannerDefinedNode647()
                }
                648 -> {
                    node = scannerDefinedNode648()
                }
                649 -> {
                    node = scannerDefinedNode649()
                }
                650 -> {
                    node = scannerDefinedNode650()
                }
                651 -> {
                    node = scannerDefinedNode651()
                }
                652 -> {
                    node = scannerDefinedNode652()
                }
                653 -> {
                    node = scannerDefinedNode653()
                }
                654 -> {
                    node = scannerDefinedNode654()
                }
                655 -> {
                    node = scannerDefinedNode655()
                }
                656 -> {
                    node = scannerDefinedNode656()
                }
                657 -> {
                    node = scannerDefinedNode657()
                }
                658 -> {
                    node = scannerDefinedNode658()
                }
                659 -> {
                    node = scannerDefinedNode659()
                }
                660 -> {
                    node = scannerDefinedNode660()
                }
                661 -> {
                    node = scannerDefinedNode661()
                }
                662 -> {
                    node = scannerDefinedNode662()
                }
                663 -> {
                    node = scannerDefinedNode663()
                }
                664 -> {
                    node = scannerDefinedNode664()
                }
                665 -> {
                    node = scannerDefinedNode665()
                }
                666 -> {
                    node = scannerDefinedNode666()
                }
                667 -> {
                    node = scannerDefinedNode667()
                }
                668 -> {
                    node = scannerDefinedNode668()
                }
                669 -> {
                    node = scannerDefinedNode669()
                }
                670 -> {
                    node = scannerDefinedNode670()
                }
                671 -> {
                    node = scannerDefinedNode671()
                }
                672 -> {
                    node = scannerDefinedNode672()
                }
                673 -> {
                    node = scannerDefinedNode673()
                }
                674 -> {
                    node = scannerDefinedNode674()
                }
                675 -> {
                    node = scannerDefinedNode675()
                }
                676 -> {
                    node = scannerDefinedNode676()
                }
                677 -> {
                    node = scannerDefinedNode677()
                }
                678 -> {
                    node = scannerDefinedNode678()
                }
                679 -> {
                    node = scannerDefinedNode679()
                }
                680 -> {
                    node = scannerDefinedNode680()
                }
                681 -> {
                    node = scannerDefinedNode681()
                }
                682 -> {
                    node = scannerDefinedNode682()
                }
                683 -> {
                    node = scannerDefinedNode683()
                }
                684 -> {
                    node = scannerDefinedNode684()
                }
                685 -> {
                    node = scannerDefinedNode685()
                }
                686 -> {
                    node = scannerDefinedNode686()
                }
                687 -> {
                    node = scannerDefinedNode687()
                }
                688 -> {
                    node = scannerDefinedNode688()
                }
                689 -> {
                    node = scannerDefinedNode689()
                }
                690 -> {
                    node = scannerDefinedNode690()
                }
                691 -> {
                    node = scannerDefinedNode691()
                }
                692 -> {
                    node = scannerDefinedNode692()
                }
                693 -> {
                    node = scannerDefinedNode693()
                }
                694 -> {
                    node = scannerDefinedNode694()
                }
                695 -> {
                    node = scannerDefinedNode695()
                }
                696 -> {
                    node = scannerDefinedNode696()
                }
                697 -> {
                    node = scannerDefinedNode697()
                }
                698 -> {
                    node = scannerDefinedNode698()
                }
                699 -> {
                    node = scannerDefinedNode699()
                }
                700 -> {
                    node = scannerDefinedNode700()
                }
                701 -> {
                    node = scannerDefinedNode701()
                }
                702 -> {
                    node = scannerDefinedNode702()
                }
                703 -> {
                    node = scannerDefinedNode703()
                }
                704 -> {
                    node = scannerDefinedNode704()
                }
                705 -> {
                    node = scannerDefinedNode705()
                }
                706 -> {
                    node = scannerDefinedNode706()
                }
                707 -> {
                    node = scannerDefinedNode707()
                }
                708 -> {
                    node = scannerDefinedNode708()
                }
                709 -> {
                    node = scannerDefinedNode709()
                }
                710 -> {
                    node = scannerDefinedNode710()
                }
                711 -> {
                    node = scannerDefinedNode711()
                }
                712 -> {
                    node = scannerDefinedNode712()
                }
                713 -> {
                    node = scannerDefinedNode713()
                }
                714 -> {
                    node = scannerDefinedNode714()
                }
                715 -> {
                    node = scannerDefinedNode715()
                }
                716 -> {
                    node = scannerDefinedNode716()
                }
                717 -> {
                    node = scannerDefinedNode717()
                }
                718 -> {
                    node = scannerDefinedNode718()
                }
                719 -> {
                    node = scannerDefinedNode719()
                }
                720 -> {
                    node = scannerDefinedNode720()
                }
                721 -> {
                    node = scannerDefinedNode721()
                }
                722 -> {
                    node = scannerDefinedNode722()
                }
                723 -> {
                    node = scannerDefinedNode723()
                }
                724 -> {
                    node = scannerDefinedNode724()
                }
                725 -> {
                    node = scannerDefinedNode725()
                }
                726 -> {
                    node = scannerDefinedNode726()
                }
                727 -> {
                    node = scannerDefinedNode727()
                }
                728 -> {
                    node = scannerDefinedNode728()
                }
                729 -> {
                    node = scannerDefinedNode729()
                }
                730 -> {
                    node = scannerDefinedNode730()
                }
                731 -> {
                    node = scannerDefinedNode731()
                }
                732 -> {
                    node = scannerDefinedNode732()
                }
                733 -> {
                    node = scannerDefinedNode733()
                }
                734 -> {
                    node = scannerDefinedNode734()
                }
                735 -> {
                    node = scannerDefinedNode735()
                }
                736 -> {
                    node = scannerDefinedNode736()
                }
                737 -> {
                    node = scannerDefinedNode737()
                }
                738 -> {
                    node = scannerDefinedNode738()
                }
                739 -> {
                    node = scannerDefinedNode739()
                }
                740 -> {
                    node = scannerDefinedNode740()
                }
                741 -> {
                    node = scannerDefinedNode741()
                }
                742 -> {
                    node = scannerDefinedNode742()
                }
                743 -> {
                    node = scannerDefinedNode743()
                }
                744 -> {
                    node = scannerDefinedNode744()
                }
                745 -> {
                    node = scannerDefinedNode745()
                }
                746 -> {
                    node = scannerDefinedNode746()
                }
                747 -> {
                    node = scannerDefinedNode747()
                }
                748 -> {
                    node = scannerDefinedNode748()
                }
                749 -> {
                    node = scannerDefinedNode749()
                }
                750 -> {
                    node = scannerDefinedNode750()
                }
                751 -> {
                    node = scannerDefinedNode751()
                }
                752 -> {
                    node = scannerDefinedNode752()
                }
                753 -> {
                    node = scannerDefinedNode753()
                }
                754 -> {
                    node = scannerDefinedNode754()
                }
                755 -> {
                    node = scannerDefinedNode755()
                }
                756 -> {
                    node = scannerDefinedNode756()
                }
                757 -> {
                    node = scannerDefinedNode757()
                }
                758 -> {
                    node = scannerDefinedNode758()
                }
                759 -> {
                    node = scannerDefinedNode759()
                }
                760 -> {
                    node = scannerDefinedNode760()
                }
                761 -> {
                    node = scannerDefinedNode761()
                }
                762 -> {
                    node = scannerDefinedNode762()
                }
                763 -> {
                    node = scannerDefinedNode763()
                }
                764 -> {
                    node = scannerDefinedNode764()
                }
                765 -> {
                    node = scannerDefinedNode765()
                }
                766 -> {
                    node = scannerDefinedNode766()
                }
                767 -> {
                    node = scannerDefinedNode767()
                }
                768 -> {
                    node = scannerDefinedNode768()
                }
                769 -> {
                    node = scannerDefinedNode769()
                }
                770 -> {
                    node = scannerDefinedNode770()
                }
                771 -> {
                    node = scannerDefinedNode771()
                }
                772 -> {
                    node = scannerDefinedNode772()
                }
                773 -> {
                    node = scannerDefinedNode773()
                }
                774 -> {
                    node = scannerDefinedNode774()
                }
                775 -> {
                    node = scannerDefinedNode775()
                }
                776 -> {
                    node = scannerDefinedNode776()
                }
                777 -> {
                    node = scannerDefinedNode777()
                }
                778 -> {
                    node = scannerDefinedNode778()
                }
                779 -> {
                    node = scannerDefinedNode779()
                }
                780 -> {
                    node = scannerDefinedNode780()
                }
                781 -> {
                    node = scannerDefinedNode781()
                }
                782 -> {
                    node = scannerDefinedNode782()
                }
                783 -> {
                    node = scannerDefinedNode783()
                }
                784 -> {
                    node = scannerDefinedNode784()
                }
                785 -> {
                    node = scannerDefinedNode785()
                }
                786 -> {
                    node = scannerDefinedNode786()
                }
                787 -> {
                    node = scannerDefinedNode787()
                }
                788 -> {
                    node = scannerDefinedNode788()
                }
                789 -> {
                    node = scannerDefinedNode789()
                }
                790 -> {
                    node = scannerDefinedNode790()
                }
                791 -> {
                    node = scannerDefinedNode791()
                }
                792 -> {
                    node = scannerDefinedNode792()
                }
                793 -> {
                    node = scannerDefinedNode793()
                }
                794 -> {
                    node = scannerDefinedNode794()
                }
                795 -> {
                    node = scannerDefinedNode795()
                }
                796 -> {
                    node = scannerDefinedNode796()
                }
                797 -> {
                    node = scannerDefinedNode797()
                }
                798 -> {
                    node = scannerDefinedNode798()
                }
                799 -> {
                    node = scannerDefinedNode799()
                }
                800 -> {
                    node = scannerDefinedNode800()
                }
                801 -> {
                    node = scannerDefinedNode801()
                }
                802 -> {
                    node = scannerDefinedNode802()
                }
                803 -> {
                    node = scannerDefinedNode803()
                }
                804 -> {
                    node = scannerDefinedNode804()
                }
                805 -> {
                    node = scannerDefinedNode805()
                }
                806 -> {
                    node = scannerDefinedNode806()
                }
                807 -> {
                    node = scannerDefinedNode807()
                }
                808 -> {
                    node = scannerDefinedNode808()
                }
                809 -> {
                    node = scannerDefinedNode809()
                }
                810 -> {
                    node = scannerDefinedNode810()
                }
                811 -> {
                    node = scannerDefinedNode811()
                }
                812 -> {
                    node = scannerDefinedNode812()
                }
                813 -> {
                    node = scannerDefinedNode813()
                }
                814 -> {
                    node = scannerDefinedNode814()
                }
                815 -> {
                    node = scannerDefinedNode815()
                }
                816 -> {
                    node = scannerDefinedNode816()
                }
                817 -> {
                    node = scannerDefinedNode817()
                }
                818 -> {
                    node = scannerDefinedNode818()
                }
                819 -> {
                    node = scannerDefinedNode819()
                }
                820 -> {
                    node = scannerDefinedNode820()
                }
                821 -> {
                    node = scannerDefinedNode821()
                }
                822 -> {
                    node = scannerDefinedNode822()
                }
                823 -> {
                    node = scannerDefinedNode823()
                }
                824 -> {
                    node = scannerDefinedNode824()
                }
                825 -> {
                    node = scannerDefinedNode825()
                }
                826 -> {
                    node = scannerDefinedNode826()
                }
                827 -> {
                    node = scannerDefinedNode827()
                }
                828 -> {
                    node = scannerDefinedNode828()
                }
                829 -> {
                    node = scannerDefinedNode829()
                }
                830 -> {
                    node = scannerDefinedNode830()
                }
                831 -> {
                    node = scannerDefinedNode831()
                }
                832 -> {
                    node = scannerDefinedNode832()
                }
                833 -> {
                    node = scannerDefinedNode833()
                }
                834 -> {
                    node = scannerDefinedNode834()
                }
                835 -> {
                    node = scannerDefinedNode835()
                }
                836 -> {
                    node = scannerDefinedNode836()
                }
                837 -> {
                    node = scannerDefinedNode837()
                }
                838 -> {
                    node = scannerDefinedNode838()
                }
                839 -> {
                    node = scannerDefinedNode839()
                }
                840 -> {
                    node = scannerDefinedNode840()
                }
                841 -> {
                    node = scannerDefinedNode841()
                }
                842 -> {
                    node = scannerDefinedNode842()
                }
                843 -> {
                    node = scannerDefinedNode843()
                }
                844 -> {
                    node = scannerDefinedNode844()
                }
                845 -> {
                    node = scannerDefinedNode845()
                }
                846 -> {
                    node = scannerDefinedNode846()
                }
                847 -> {
                    node = scannerDefinedNode847()
                }
                848 -> {
                    node = scannerDefinedNode848()
                }
                849 -> {
                    node = scannerDefinedNode849()
                }
                850 -> {
                    node = scannerDefinedNode850()
                }
                851 -> {
                    node = scannerDefinedNode851()
                }
                852 -> {
                    node = scannerDefinedNode852()
                }
                853 -> {
                    node = scannerDefinedNode853()
                }
                854 -> {
                    node = scannerDefinedNode854()
                }
                855 -> {
                    node = scannerDefinedNode855()
                }
                856 -> {
                    node = scannerDefinedNode856()
                }
                857 -> {
                    node = scannerDefinedNode857()
                }
                858 -> {
                    node = scannerDefinedNode858()
                }
                859 -> {
                    node = scannerDefinedNode859()
                }
                860 -> {
                    node = scannerDefinedNode860()
                }
                861 -> {
                    node = scannerDefinedNode861()
                }
                862 -> {
                    node = scannerDefinedNode862()
                }
                863 -> {
                    node = scannerDefinedNode863()
                }
                864 -> {
                    node = scannerDefinedNode864()
                }
                865 -> {
                    node = scannerDefinedNode865()
                }
                866 -> {
                    node = scannerDefinedNode866()
                }
                867 -> {
                    node = scannerDefinedNode867()
                }
                868 -> {
                    node = scannerDefinedNode868()
                }
                869 -> {
                    node = scannerDefinedNode869()
                }
                870 -> {
                    node = scannerDefinedNode870()
                }
                871 -> {
                    node = scannerDefinedNode871()
                }
                872 -> {
                    node = scannerDefinedNode872()
                }
                873 -> {
                    node = scannerDefinedNode873()
                }
                874 -> {
                    node = scannerDefinedNode874()
                }
                875 -> {
                    node = scannerDefinedNode875()
                }
                876 -> {
                    node = scannerDefinedNode876()
                }
                877 -> {
                    node = scannerDefinedNode877()
                }
                878 -> {
                    node = scannerDefinedNode878()
                }
                879 -> {
                    node = scannerDefinedNode879()
                }
                880 -> {
                    node = scannerDefinedNode880()
                }
                881 -> {
                    node = scannerDefinedNode881()
                }
                882 -> {
                    node = scannerDefinedNode882()
                }
                883 -> {
                    node = scannerDefinedNode883()
                }
                884 -> {
                    node = scannerDefinedNode884()
                }
                885 -> {
                    node = scannerDefinedNode885()
                }
                886 -> {
                    node = scannerDefinedNode886()
                }
                887 -> {
                    node = scannerDefinedNode887()
                }
                888 -> {
                    node = scannerDefinedNode888()
                }
                889 -> {
                    node = scannerDefinedNode889()
                }
                890 -> {
                    node = scannerDefinedNode890()
                }
                891 -> {
                    node = scannerDefinedNode891()
                }
                892 -> {
                    node = scannerDefinedNode892()
                }
                893 -> {
                    node = scannerDefinedNode893()
                }
                894 -> {
                    node = scannerDefinedNode894()
                }
                895 -> {
                    node = scannerDefinedNode895()
                }
                896 -> {
                    node = scannerDefinedNode896()
                }
                897 -> {
                    node = scannerDefinedNode897()
                }
                898 -> {
                    node = scannerDefinedNode898()
                }
                899 -> {
                    node = scannerDefinedNode899()
                }
                900 -> {
                    node = scannerDefinedNode900()
                }
                901 -> {
                    node = scannerDefinedNode901()
                }
                902 -> {
                    node = scannerDefinedNode902()
                }
                903 -> {
                    node = scannerDefinedNode903()
                }
                904 -> {
                    node = scannerDefinedNode904()
                }
                905 -> {
                    node = scannerDefinedNode905()
                }
                906 -> {
                    node = scannerDefinedNode906()
                }
                907 -> {
                    node = scannerDefinedNode907()
                }
                908 -> {
                    node = scannerDefinedNode908()
                }
                909 -> {
                    node = scannerDefinedNode909()
                }
                910 -> {
                    node = scannerDefinedNode910()
                }
                911 -> {
                    node = scannerDefinedNode911()
                }
                912 -> {
                    node = scannerDefinedNode912()
                }
                913 -> {
                    node = scannerDefinedNode913()
                }
                914 -> {
                    node = scannerDefinedNode914()
                }
                915 -> {
                    node = scannerDefinedNode915()
                }
                916 -> {
                    node = scannerDefinedNode916()
                }
                917 -> {
                    node = scannerDefinedNode917()
                }
                918 -> {
                    node = scannerDefinedNode918()
                }
                919 -> {
                    node = scannerDefinedNode919()
                }
                920 -> {
                    node = scannerDefinedNode920()
                }
                921 -> {
                    node = scannerDefinedNode921()
                }
                922 -> {
                    node = scannerDefinedNode922()
                }
                923 -> {
                    node = scannerDefinedNode923()
                }
                924 -> {
                    node = scannerDefinedNode924()
                }
                925 -> {
                    node = scannerDefinedNode925()
                }
                926 -> {
                    node = scannerDefinedNode926()
                }
                927 -> {
                    node = scannerDefinedNode927()
                }
                928 -> {
                    node = scannerDefinedNode928()
                }
                929 -> {
                    node = scannerDefinedNode929()
                }
                930 -> {
                    node = scannerDefinedNode930()
                }
                931 -> {
                    node = scannerDefinedNode931()
                }
                932 -> {
                    node = scannerDefinedNode932()
                }
                933 -> {
                    node = scannerDefinedNode933()
                }
                934 -> {
                    node = scannerDefinedNode934()
                }
                935 -> {
                    node = scannerDefinedNode935()
                }
                936 -> {
                    node = scannerDefinedNode936()
                }
                937 -> {
                    node = scannerDefinedNode937()
                }
                938 -> {
                    node = scannerDefinedNode938()
                }
                939 -> {
                    node = scannerDefinedNode939()
                }
                940 -> {
                    node = scannerDefinedNode940()
                }
                941 -> {
                    node = scannerDefinedNode941()
                }
                942 -> {
                    node = scannerDefinedNode942()
                }
                943 -> {
                    node = scannerDefinedNode943()
                }
                944 -> {
                    node = scannerDefinedNode944()
                }
                945 -> {
                    node = scannerDefinedNode945()
                }
                946 -> {
                    node = scannerDefinedNode946()
                }
                947 -> {
                    node = scannerDefinedNode947()
                }
                948 -> {
                    node = scannerDefinedNode948()
                }
                949 -> {
                    node = scannerDefinedNode949()
                }
                950 -> {
                    node = scannerDefinedNode950()
                }
                951 -> {
                    node = scannerDefinedNode951()
                }
                952 -> {
                    node = scannerDefinedNode952()
                }
                953 -> {
                    node = scannerDefinedNode953()
                }
                954 -> {
                    node = scannerDefinedNode954()
                }
                955 -> {
                    node = scannerDefinedNode955()
                }
                956 -> {
                    node = scannerDefinedNode956()
                }
                957 -> {
                    node = scannerDefinedNode957()
                }
                958 -> {
                    node = scannerDefinedNode958()
                }
                959 -> {
                    node = scannerDefinedNode959()
                }
                960 -> {
                    node = scannerDefinedNode960()
                }
                961 -> {
                    node = scannerDefinedNode961()
                }
                962 -> {
                    node = scannerDefinedNode962()
                }
                963 -> {
                    node = scannerDefinedNode963()
                }
                964 -> {
                    node = scannerDefinedNode964()
                }
                965 -> {
                    node = scannerDefinedNode965()
                }
                966 -> {
                    node = scannerDefinedNode966()
                }
                967 -> {
                    node = scannerDefinedNode967()
                }
                968 -> {
                    node = scannerDefinedNode968()
                }
                969 -> {
                    node = scannerDefinedNode969()
                }
                970 -> {
                    node = scannerDefinedNode970()
                }
                971 -> {
                    node = scannerDefinedNode971()
                }
                972 -> {
                    node = scannerDefinedNode972()
                }
                973 -> {
                    node = scannerDefinedNode973()
                }
                974 -> {
                    node = scannerDefinedNode974()
                }
                975 -> {
                    node = scannerDefinedNode975()
                }
                976 -> {
                    node = scannerDefinedNode976()
                }
                977 -> {
                    node = scannerDefinedNode977()
                }
                978 -> {
                    node = scannerDefinedNode978()
                }
                979 -> {
                    node = scannerDefinedNode979()
                }
                980 -> {
                    node = scannerDefinedNode980()
                }
                981 -> {
                    node = scannerDefinedNode981()
                }
                982 -> {
                    node = scannerDefinedNode982()
                }
                983 -> {
                    node = scannerDefinedNode983()
                }
                984 -> {
                    node = scannerDefinedNode984()
                }
                985 -> {
                    node = scannerDefinedNode985()
                }
                986 -> {
                    node = scannerDefinedNode986()
                }
                987 -> {
                    node = scannerDefinedNode987()
                }
                988 -> {
                    node = scannerDefinedNode988()
                }
                989 -> {
                    node = scannerDefinedNode989()
                }
                990 -> {
                    node = scannerDefinedNode990()
                }
                991 -> {
                    node = scannerDefinedNode991()
                }
                992 -> {
                    node = scannerDefinedNode992()
                }
                993 -> {
                    node = scannerDefinedNode993()
                }
                994 -> {
                    node = scannerDefinedNode994()
                }
                995 -> {
                    node = scannerDefinedNode995()
                }
                996 -> {
                    node = scannerDefinedNode996()
                }
                997 -> {
                    node = scannerDefinedNode997()
                }
                998 -> {
                    node = scannerDefinedNode998()
                }
                999 -> {
                    node = scannerDefinedNode999()
                }
                1000 -> {
                    node = scannerDefinedNode1000()
                }
                1001 -> {
                    node = scannerDefinedNode1001()
                }
                1002 -> {
                    node = scannerDefinedNode1002()
                }
                1003 -> {
                    node = scannerDefinedNode1003()
                }
                1004 -> {
                    node = scannerDefinedNode1004()
                }
                1005 -> {
                    node = scannerDefinedNode1005()
                }
                1006 -> {
                    node = scannerDefinedNode1006()
                }
                1007 -> {
                    node = scannerDefinedNode1007()
                }
                1008 -> {
                    node = scannerDefinedNode1008()
                }
                1009 -> {
                    node = scannerDefinedNode1009()
                }
                1010 -> {
                    node = scannerDefinedNode1010()
                }
                1011 -> {
                    node = scannerDefinedNode1011()
                }
                1012 -> {
                    node = scannerDefinedNode1012()
                }
                1013 -> {
                    node = scannerDefinedNode1013()
                }
                1014 -> {
                    node = scannerDefinedNode1014()
                }
                1015 -> {
                    node = scannerDefinedNode1015()
                }
                1016 -> {
                    node = scannerDefinedNode1016()
                }
                1017 -> {
                    node = scannerDefinedNode1017()
                }
                1018 -> {
                    node = scannerDefinedNode1018()
                }
                1019 -> {
                    node = scannerDefinedNode1019()
                }
                1020 -> {
                    node = scannerDefinedNode1020()
                }
                1021 -> {
                    node = scannerDefinedNode1021()
                }
                1022 -> {
                    node = scannerDefinedNode1022()
                }
                1023 -> {
                    node = scannerDefinedNode1023()
                }
                1024 -> {
                    node = scannerDefinedNode1024()
                }
                1025 -> {
                    node = scannerDefinedNode1025()
                }
                1026 -> {
                    node = scannerDefinedNode1026()
                }
                1027 -> {
                    node = scannerDefinedNode1027()
                }
                1028 -> {
                    node = scannerDefinedNode1028()
                }
                1029 -> {
                    node = scannerDefinedNode1029()
                }
                1030 -> {
                    node = scannerDefinedNode1030()
                }
                1031 -> {
                    node = scannerDefinedNode1031()
                }
                1032 -> {
                    node = scannerDefinedNode1032()
                }
                1033 -> {
                    node = scannerDefinedNode1033()
                }
                1034 -> {
                    node = scannerDefinedNode1034()
                }
                1035 -> {
                    node = scannerDefinedNode1035()
                }
                1036 -> {
                    node = scannerDefinedNode1036()
                }
                1037 -> {
                    node = scannerDefinedNode1037()
                }
                1038 -> {
                    node = scannerDefinedNode1038()
                }
                1039 -> {
                    node = scannerDefinedNode1039()
                }
                1040 -> {
                    node = scannerDefinedNode1040()
                }
                1041 -> {
                    node = scannerDefinedNode1041()
                }
                1042 -> {
                    node = scannerDefinedNode1042()
                }
                1043 -> {
                    node = scannerDefinedNode1043()
                }
                1044 -> {
                    node = scannerDefinedNode1044()
                }
                1045 -> {
                    node = scannerDefinedNode1045()
                }
                1046 -> {
                    node = scannerDefinedNode1046()
                }
                1047 -> {
                    node = scannerDefinedNode1047()
                }
                1048 -> {
                    node = scannerDefinedNode1048()
                }
                1049 -> {
                    node = scannerDefinedNode1049()
                }
                1050 -> {
                    node = scannerDefinedNode1050()
                }
                1051 -> {
                    node = scannerDefinedNode1051()
                }
                1052 -> {
                    node = scannerDefinedNode1052()
                }
                1053 -> {
                    node = scannerDefinedNode1053()
                }
                1054 -> {
                    node = scannerDefinedNode1054()
                }
                1055 -> {
                    node = scannerDefinedNode1055()
                }
                1056 -> {
                    node = scannerDefinedNode1056()
                }
                1057 -> {
                    node = scannerDefinedNode1057()
                }
                1058 -> {
                    node = scannerDefinedNode1058()
                }
                1059 -> {
                    node = scannerDefinedNode1059()
                }
                1060 -> {
                    node = scannerDefinedNode1060()
                }
                1061 -> {
                    node = scannerDefinedNode1061()
                }
                1062 -> {
                    node = scannerDefinedNode1062()
                }
                1063 -> {
                    node = scannerDefinedNode1063()
                }
                1064 -> {
                    node = scannerDefinedNode1064()
                }
                1065 -> {
                    node = scannerDefinedNode1065()
                }
                1066 -> {
                    node = scannerDefinedNode1066()
                }
                1067 -> {
                    node = scannerDefinedNode1067()
                }
                1068 -> {
                    node = scannerDefinedNode1068()
                }
                1069 -> {
                    node = scannerDefinedNode1069()
                }
                1070 -> {
                    node = scannerDefinedNode1070()
                }
                1071 -> {
                    node = scannerDefinedNode1071()
                }
                1072 -> {
                    node = scannerDefinedNode1072()
                }
                1073 -> {
                    node = scannerDefinedNode1073()
                }
                1074 -> {
                    node = scannerDefinedNode1074()
                }
                1075 -> {
                    node = scannerDefinedNode1075()
                }
                1076 -> {
                    node = scannerDefinedNode1076()
                }
                1077 -> {
                    node = scannerDefinedNode1077()
                }
                1078 -> {
                    node = scannerDefinedNode1078()
                }
                1079 -> {
                    node = scannerDefinedNode1079()
                }
                1080 -> {
                    node = scannerDefinedNode1080()
                }
                1081 -> {
                    node = scannerDefinedNode1081()
                }
                1082 -> {
                    node = scannerDefinedNode1082()
                }
                1083 -> {
                    node = scannerDefinedNode1083()
                }
                1084 -> {
                    node = scannerDefinedNode1084()
                }
                1085 -> {
                    node = scannerDefinedNode1085()
                }
                1086 -> {
                    node = scannerDefinedNode1086()
                }
                1087 -> {
                    node = scannerDefinedNode1087()
                }
                1088 -> {
                    node = scannerDefinedNode1088()
                }
                1089 -> {
                    node = scannerDefinedNode1089()
                }
                1090 -> {
                    node = scannerDefinedNode1090()
                }
                1091 -> {
                    node = scannerDefinedNode1091()
                }
                1092 -> {
                    node = scannerDefinedNode1092()
                }
                1093 -> {
                    node = scannerDefinedNode1093()
                }
                1094 -> {
                    node = scannerDefinedNode1094()
                }
                1095 -> {
                    node = scannerDefinedNode1095()
                }
                1096 -> {
                    node = scannerDefinedNode1096()
                }
                1097 -> {
                    node = scannerDefinedNode1097()
                }
                1098 -> {
                    node = scannerDefinedNode1098()
                }
                1099 -> {
                    node = scannerDefinedNode1099()
                }
                1100 -> {
                    node = scannerDefinedNode1100()
                }
                1101 -> {
                    node = scannerDefinedNode1101()
                }
                1102 -> {
                    node = scannerDefinedNode1102()
                }
                1103 -> {
                    node = scannerDefinedNode1103()
                }
                1104 -> {
                    node = scannerDefinedNode1104()
                }
                1105 -> {
                    node = scannerDefinedNode1105()
                }
                1106 -> {
                    node = scannerDefinedNode1106()
                }
                1107 -> {
                    node = scannerDefinedNode1107()
                }
                1108 -> {
                    node = scannerDefinedNode1108()
                }
                1109 -> {
                    node = scannerDefinedNode1109()
                }
                1110 -> {
                    node = scannerDefinedNode1110()
                }
                1111 -> {
                    node = scannerDefinedNode1111()
                }
                1112 -> {
                    node = scannerDefinedNode1112()
                }
                1113 -> {
                    node = scannerDefinedNode1113()
                }
                1114 -> {
                    node = scannerDefinedNode1114()
                }
                1115 -> {
                    node = scannerDefinedNode1115()
                }
                1116 -> {
                    node = scannerDefinedNode1116()
                }
                1117 -> {
                    node = scannerDefinedNode1117()
                }
                1118 -> {
                    node = scannerDefinedNode1118()
                }
                1119 -> {
                    node = scannerDefinedNode1119()
                }
                1120 -> {
                    node = scannerDefinedNode1120()
                }
                1121 -> {
                    node = scannerDefinedNode1121()
                }
                1122 -> {
                    node = scannerDefinedNode1122()
                }
                1123 -> {
                    node = scannerDefinedNode1123()
                }
                1124 -> {
                    node = scannerDefinedNode1124()
                }
                1125 -> {
                    node = scannerDefinedNode1125()
                }
                1126 -> {
                    node = scannerDefinedNode1126()
                }
                1127 -> {
                    node = scannerDefinedNode1127()
                }
                1128 -> {
                    node = scannerDefinedNode1128()
                }
                1129 -> {
                    node = scannerDefinedNode1129()
                }
                1130 -> {
                    node = scannerDefinedNode1130()
                }
                1131 -> {
                    node = scannerDefinedNode1131()
                }
                1132 -> {
                    node = scannerDefinedNode1132()
                }
                1133 -> {
                    node = scannerDefinedNode1133()
                }
                1134 -> {
                    node = scannerDefinedNode1134()
                }
                1135 -> {
                    node = scannerDefinedNode1135()
                }
                1136 -> {
                    node = scannerDefinedNode1136()
                }
                1137 -> {
                    node = scannerDefinedNode1137()
                }
                1138 -> {
                    node = scannerDefinedNode1138()
                }
                1139 -> {
                    node = scannerDefinedNode1139()
                }
                1140 -> {
                    node = scannerDefinedNode1140()
                }
                1141 -> {
                    node = scannerDefinedNode1141()
                }
                1142 -> {
                    node = scannerDefinedNode1142()
                }
                1143 -> {
                    node = scannerDefinedNode1143()
                }
                1144 -> {
                    node = scannerDefinedNode1144()
                }
                1145 -> {
                    node = scannerDefinedNode1145()
                }
                1146 -> {
                    node = scannerDefinedNode1146()
                }
                1147 -> {
                    node = scannerDefinedNode1147()
                }
                1148 -> {
                    node = scannerDefinedNode1148()
                }
                1149 -> {
                    node = scannerDefinedNode1149()
                }
                1150 -> {
                    node = scannerDefinedNode1150()
                }
                1151 -> {
                    node = scannerDefinedNode1151()
                }
                1152 -> {
                    node = scannerDefinedNode1152()
                }
                1153 -> {
                    node = scannerDefinedNode1153()
                }
                1154 -> {
                    node = scannerDefinedNode1154()
                }
                1155 -> {
                    node = scannerDefinedNode1155()
                }
                1156 -> {
                    node = scannerDefinedNode1156()
                }
                1157 -> {
                    node = scannerDefinedNode1157()
                }
                1158 -> {
                    node = scannerDefinedNode1158()
                }
                1159 -> {
                    node = scannerDefinedNode1159()
                }
                1160 -> {
                    node = scannerDefinedNode1160()
                }
                1161 -> {
                    node = scannerDefinedNode1161()
                }
                1162 -> {
                    node = scannerDefinedNode1162()
                }
                1163 -> {
                    node = scannerDefinedNode1163()
                }
                1164 -> {
                    node = scannerDefinedNode1164()
                }
                1165 -> {
                    node = scannerDefinedNode1165()
                }
                1166 -> {
                    node = scannerDefinedNode1166()
                }
                1167 -> {
                    node = scannerDefinedNode1167()
                }
                1168 -> {
                    node = scannerDefinedNode1168()
                }
                1169 -> {
                    node = scannerDefinedNode1169()
                }
                1170 -> {
                    node = scannerDefinedNode1170()
                }
                1171 -> {
                    node = scannerDefinedNode1171()
                }
                1172 -> {
                    node = scannerDefinedNode1172()
                }
                1173 -> {
                    node = scannerDefinedNode1173()
                }
                1174 -> {
                    node = scannerDefinedNode1174()
                }
                1175 -> {
                    node = scannerDefinedNode1175()
                }
                1176 -> {
                    node = scannerDefinedNode1176()
                }
                1177 -> {
                    node = scannerDefinedNode1177()
                }
                1178 -> {
                    node = scannerDefinedNode1178()
                }
                1179 -> {
                    node = scannerDefinedNode1179()
                }
                1180 -> {
                    node = scannerDefinedNode1180()
                }
                1181 -> {
                    node = scannerDefinedNode1181()
                }
                1182 -> {
                    node = scannerDefinedNode1182()
                }
                1183 -> {
                    node = scannerDefinedNode1183()
                }
                1184 -> {
                    node = scannerDefinedNode1184()
                }
                1185 -> {
                    node = scannerDefinedNode1185()
                }
                1186 -> {
                    node = scannerDefinedNode1186()
                }
                1187 -> {
                    node = scannerDefinedNode1187()
                }
                1188 -> {
                    node = scannerDefinedNode1188()
                }
                1189 -> {
                    node = scannerDefinedNode1189()
                }
                1190 -> {
                    node = scannerDefinedNode1190()
                }
                1191 -> {
                    node = scannerDefinedNode1191()
                }
                1192 -> {
                    node = scannerDefinedNode1192()
                }
                1193 -> {
                    node = scannerDefinedNode1193()
                }
                1194 -> {
                    node = scannerDefinedNode1194()
                }
                1195 -> {
                    node = scannerDefinedNode1195()
                }
                1196 -> {
                    node = scannerDefinedNode1196()
                }
                1197 -> {
                    node = scannerDefinedNode1197()
                }
                1198 -> {
                    node = scannerDefinedNode1198()
                }
                1199 -> {
                    node = scannerDefinedNode1199()
                }
                1200 -> {
                    node = scannerDefinedNode1200()
                }
                1201 -> {
                    node = scannerDefinedNode1201()
                }
                1202 -> {
                    node = scannerDefinedNode1202()
                }
                1203 -> {
                    node = scannerDefinedNode1203()
                }
                1204 -> {
                    node = scannerDefinedNode1204()
                }
                1205 -> {
                    node = scannerDefinedNode1205()
                }
                1206 -> {
                    node = scannerDefinedNode1206()
                }
                1207 -> {
                    node = scannerDefinedNode1207()
                }
                1208 -> {
                    node = scannerDefinedNode1208()
                }
                1209 -> {
                    node = scannerDefinedNode1209()
                }
                1210 -> {
                    node = scannerDefinedNode1210()
                }
                1211 -> {
                    node = scannerDefinedNode1211()
                }
                1212 -> {
                    node = scannerDefinedNode1212()
                }
                1213 -> {
                    node = scannerDefinedNode1213()
                }
                1214 -> {
                    node = scannerDefinedNode1214()
                }
                1215 -> {
                    node = scannerDefinedNode1215()
                }
                1216 -> {
                    node = scannerDefinedNode1216()
                }
                1217 -> {
                    node = scannerDefinedNode1217()
                }
                1218 -> {
                    node = scannerDefinedNode1218()
                }
                1219 -> {
                    node = scannerDefinedNode1219()
                }
                1220 -> {
                    node = scannerDefinedNode1220()
                }
                1221 -> {
                    node = scannerDefinedNode1221()
                }
                1222 -> {
                    node = scannerDefinedNode1222()
                }
                1223 -> {
                    node = scannerDefinedNode1223()
                }
                1224 -> {
                    node = scannerDefinedNode1224()
                }
                1225 -> {
                    node = scannerDefinedNode1225()
                }
                1226 -> {
                    node = scannerDefinedNode1226()
                }
                1227 -> {
                    node = scannerDefinedNode1227()
                }
                1228 -> {
                    node = scannerDefinedNode1228()
                }
                1229 -> {
                    node = scannerDefinedNode1229()
                }
                1230 -> {
                    node = scannerDefinedNode1230()
                }
                1231 -> {
                    node = scannerDefinedNode1231()
                }
                1232 -> {
                    node = scannerDefinedNode1232()
                }
                1233 -> {
                    node = scannerDefinedNode1233()
                }
                1234 -> {
                    node = scannerDefinedNode1234()
                }
                1235 -> {
                    node = scannerDefinedNode1235()
                }
                1236 -> {
                    node = scannerDefinedNode1236()
                }
                1237 -> {
                    node = scannerDefinedNode1237()
                }
                1238 -> {
                    node = scannerDefinedNode1238()
                }
                1239 -> {
                    node = scannerDefinedNode1239()
                }
                1240 -> {
                    node = scannerDefinedNode1240()
                }
                1241 -> {
                    node = scannerDefinedNode1241()
                }
                1242 -> {
                    node = scannerDefinedNode1242()
                }
                1243 -> {
                    node = scannerDefinedNode1243()
                }
                1244 -> {
                    node = scannerDefinedNode1244()
                }
                1245 -> {
                    node = scannerDefinedNode1245()
                }
                1246 -> {
                    node = scannerDefinedNode1246()
                }
                1247 -> {
                    node = scannerDefinedNode1247()
                }
                1248 -> {
                    node = scannerDefinedNode1248()
                }
                1249 -> {
                    node = scannerDefinedNode1249()
                }
                1250 -> {
                    node = scannerDefinedNode1250()
                }
                1251 -> {
                    node = scannerDefinedNode1251()
                }
                1252 -> {
                    node = scannerDefinedNode1252()
                }
                1253 -> {
                    node = scannerDefinedNode1253()
                }
                1254 -> {
                    node = scannerDefinedNode1254()
                }
                1255 -> {
                    node = scannerDefinedNode1255()
                }
                1256 -> {
                    node = scannerDefinedNode1256()
                }
                1257 -> {
                    node = scannerDefinedNode1257()
                }
                1258 -> {
                    node = scannerDefinedNode1258()
                }
                1259 -> {
                    node = scannerDefinedNode1259()
                }
                1260 -> {
                    node = scannerDefinedNode1260()
                }
                1261 -> {
                    node = scannerDefinedNode1261()
                }
                1262 -> {
                    node = scannerDefinedNode1262()
                }
                1263 -> {
                    node = scannerDefinedNode1263()
                }
                1264 -> {
                    node = scannerDefinedNode1264()
                }
                1265 -> {
                    node = scannerDefinedNode1265()
                }
                1266 -> {
                    node = scannerDefinedNode1266()
                }
                1267 -> {
                    node = scannerDefinedNode1267()
                }
                1268 -> {
                    node = scannerDefinedNode1268()
                }
                1269 -> {
                    node = scannerDefinedNode1269()
                }
                1270 -> {
                    node = scannerDefinedNode1270()
                }
                1271 -> {
                    node = scannerDefinedNode1271()
                }
                1272 -> {
                    node = scannerDefinedNode1272()
                }
                1273 -> {
                    node = scannerDefinedNode1273()
                }
                1274 -> {
                    node = scannerDefinedNode1274()
                }
                1275 -> {
                    node = scannerDefinedNode1275()
                }
                1276 -> {
                    node = scannerDefinedNode1276()
                }
                1277 -> {
                    node = scannerDefinedNode1277()
                }
                1278 -> {
                    node = scannerDefinedNode1278()
                }
                1279 -> {
                    node = scannerDefinedNode1279()
                }
                1280 -> {
                    node = scannerDefinedNode1280()
                }
                1281 -> {
                    node = scannerDefinedNode1281()
                }
                1282 -> {
                    node = scannerDefinedNode1282()
                }
                1283 -> {
                    node = scannerDefinedNode1283()
                }
                1284 -> {
                    node = scannerDefinedNode1284()
                }
                1285 -> {
                    node = scannerDefinedNode1285()
                }
                1286 -> {
                    node = scannerDefinedNode1286()
                }
                1287 -> {
                    node = scannerDefinedNode1287()
                }
                1288 -> {
                    node = scannerDefinedNode1288()
                }
                1289 -> {
                    node = scannerDefinedNode1289()
                }
                1290 -> {
                    node = scannerDefinedNode1290()
                }
                1291 -> {
                    node = scannerDefinedNode1291()
                }
                1292 -> {
                    node = scannerDefinedNode1292()
                }
                1293 -> {
                    node = scannerDefinedNode1293()
                }
                1294 -> {
                    node = scannerDefinedNode1294()
                }
                1295 -> {
                    node = scannerDefinedNode1295()
                }
                1296 -> {
                    node = scannerDefinedNode1296()
                }
                1297 -> {
                    node = scannerDefinedNode1297()
                }
                1298 -> {
                    node = scannerDefinedNode1298()
                }
                1299 -> {
                    node = scannerDefinedNode1299()
                }
                1300 -> {
                    node = scannerDefinedNode1300()
                }
                1301 -> {
                    node = scannerDefinedNode1301()
                }
                1302 -> {
                    node = scannerDefinedNode1302()
                }
                1303 -> {
                    node = scannerDefinedNode1303()
                }
                1304 -> {
                    node = scannerDefinedNode1304()
                }
                1305 -> {
                    node = scannerDefinedNode1305()
                }
                1306 -> {
                    node = scannerDefinedNode1306()
                }
                1307 -> {
                    node = scannerDefinedNode1307()
                }
                1308 -> {
                    node = scannerDefinedNode1308()
                }
                1309 -> {
                    node = scannerDefinedNode1309()
                }
                1310 -> {
                    node = scannerDefinedNode1310()
                }
                1311 -> {
                    node = scannerDefinedNode1311()
                }
                1312 -> {
                    node = scannerDefinedNode1312()
                }
                1313 -> {
                    node = scannerDefinedNode1313()
                }
                1314 -> {
                    node = scannerDefinedNode1314()
                }
                1315 -> {
                    node = scannerDefinedNode1315()
                }
                1316 -> {
                    node = scannerDefinedNode1316()
                }
                1317 -> {
                    node = scannerDefinedNode1317()
                }
                1318 -> {
                    node = scannerDefinedNode1318()
                }
                1319 -> {
                    node = scannerDefinedNode1319()
                }
                1320 -> {
                    node = scannerDefinedNode1320()
                }
                1321 -> {
                    node = scannerDefinedNode1321()
                }
                1322 -> {
                    node = scannerDefinedNode1322()
                }
                1323 -> {
                    node = scannerDefinedNode1323()
                }
                1324 -> {
                    node = scannerDefinedNode1324()
                }
                1325 -> {
                    node = scannerDefinedNode1325()
                }
                1326 -> {
                    node = scannerDefinedNode1326()
                }
                1327 -> {
                    node = scannerDefinedNode1327()
                }
                1328 -> {
                    node = scannerDefinedNode1328()
                }
                1329 -> {
                    node = scannerDefinedNode1329()
                }
                1330 -> {
                    node = scannerDefinedNode1330()
                }
                1331 -> {
                    node = scannerDefinedNode1331()
                }
                1332 -> {
                    node = scannerDefinedNode1332()
                }
                1333 -> {
                    node = scannerDefinedNode1333()
                }
                1334 -> {
                    node = scannerDefinedNode1334()
                }
                1335 -> {
                    node = scannerDefinedNode1335()
                }
                1336 -> {
                    node = scannerDefinedNode1336()
                }
                1337 -> {
                    node = scannerDefinedNode1337()
                }
                1338 -> {
                    node = scannerDefinedNode1338()
                }
                1339 -> {
                    node = scannerDefinedNode1339()
                }
                1340 -> {
                    node = scannerDefinedNode1340()
                }
                1341 -> {
                    node = scannerDefinedNode1341()
                }
                1342 -> {
                    node = scannerDefinedNode1342()
                }
                1343 -> {
                    node = scannerDefinedNode1343()
                }
                1344 -> {
                    node = scannerDefinedNode1344()
                }
                1345 -> {
                    node = scannerDefinedNode1345()
                }
                1346 -> {
                    node = scannerDefinedNode1346()
                }
                1347 -> {
                    node = scannerDefinedNode1347()
                }
                1348 -> {
                    node = scannerDefinedNode1348()
                }
                1349 -> {
                    node = scannerDefinedNode1349()
                }
                1350 -> {
                    node = scannerDefinedNode1350()
                }
                1351 -> {
                    node = scannerDefinedNode1351()
                }
                1352 -> {
                    node = scannerDefinedNode1352()
                }
                1353 -> {
                    node = scannerDefinedNode1353()
                }
                1354 -> {
                    node = scannerDefinedNode1354()
                }
                1355 -> {
                    node = scannerDefinedNode1355()
                }
                1356 -> {
                    node = scannerDefinedNode1356()
                }
                1357 -> {
                    node = scannerDefinedNode1357()
                }
                1358 -> {
                    node = scannerDefinedNode1358()
                }
                1359 -> {
                    node = scannerDefinedNode1359()
                }
                1360 -> {
                    node = scannerDefinedNode1360()
                }
                1361 -> {
                    node = scannerDefinedNode1361()
                }
                1362 -> {
                    node = scannerDefinedNode1362()
                }
                1363 -> {
                    node = scannerDefinedNode1363()
                }
                1364 -> {
                    node = scannerDefinedNode1364()
                }
                1365 -> {
                    node = scannerDefinedNode1365()
                }
                1366 -> {
                    node = scannerDefinedNode1366()
                }
                1367 -> {
                    node = scannerDefinedNode1367()
                }
                1368 -> {
                    node = scannerDefinedNode1368()
                }
                1369 -> {
                    node = scannerDefinedNode1369()
                }
                1370 -> {
                    node = scannerDefinedNode1370()
                }
                1371 -> {
                    node = scannerDefinedNode1371()
                }
                1372 -> {
                    node = scannerDefinedNode1372()
                }
                1373 -> {
                    node = scannerDefinedNode1373()
                }
                1374 -> {
                    node = scannerDefinedNode1374()
                }
                1375 -> {
                    node = scannerDefinedNode1375()
                }
                1376 -> {
                    node = scannerDefinedNode1376()
                }
                1377 -> {
                    node = scannerDefinedNode1377()
                }
                1378 -> {
                    node = scannerDefinedNode1378()
                }
                1379 -> {
                    node = scannerDefinedNode1379()
                }
                1380 -> {
                    node = scannerDefinedNode1380()
                }
                1381 -> {
                    node = scannerDefinedNode1381()
                }
                1382 -> {
                    node = scannerDefinedNode1382()
                }
                1383 -> {
                    node = scannerDefinedNode1383()
                }
                1384 -> {
                    node = scannerDefinedNode1384()
                }
                1385 -> {
                    node = scannerDefinedNode1385()
                }
                1386 -> {
                    node = scannerDefinedNode1386()
                }
                1387 -> {
                    node = scannerDefinedNode1387()
                }
                1388 -> {
                    node = scannerDefinedNode1388()
                }
                1389 -> {
                    node = scannerDefinedNode1389()
                }
                1390 -> {
                    node = scannerDefinedNode1390()
                }
                1391 -> {
                    node = scannerDefinedNode1391()
                }
                1392 -> {
                    node = scannerDefinedNode1392()
                }
                1393 -> {
                    node = scannerDefinedNode1393()
                }
                1394 -> {
                    node = scannerDefinedNode1394()
                }
                1395 -> {
                    node = scannerDefinedNode1395()
                }
                1396 -> {
                    node = scannerDefinedNode1396()
                }
                1397 -> {
                    node = scannerDefinedNode1397()
                }
                1398 -> {
                    node = scannerDefinedNode1398()
                }
                1399 -> {
                    node = scannerDefinedNode1399()
                }
                1400 -> {
                    node = scannerDefinedNode1400()
                }
                1401 -> {
                    node = scannerDefinedNode1401()
                }
                1402 -> {
                    node = scannerDefinedNode1402()
                }
                1403 -> {
                    node = scannerDefinedNode1403()
                }
                1404 -> {
                    node = scannerDefinedNode1404()
                }
                1405 -> {
                    node = scannerDefinedNode1405()
                }
                1406 -> {
                    node = scannerDefinedNode1406()
                }
                1407 -> {
                    node = scannerDefinedNode1407()
                }
                1408 -> {
                    node = scannerDefinedNode1408()
                }
                1409 -> {
                    node = scannerDefinedNode1409()
                }
                1410 -> {
                    node = scannerDefinedNode1410()
                }
                1411 -> {
                    node = scannerDefinedNode1411()
                }
                1412 -> {
                    node = scannerDefinedNode1412()
                }
                1413 -> {
                    node = scannerDefinedNode1413()
                }
                1414 -> {
                    node = scannerDefinedNode1414()
                }
                1415 -> {
                    node = scannerDefinedNode1415()
                }
                1416 -> {
                    node = scannerDefinedNode1416()
                }
                1417 -> {
                    node = scannerDefinedNode1417()
                }
                1418 -> {
                    node = scannerDefinedNode1418()
                }
                1419 -> {
                    node = scannerDefinedNode1419()
                }
                1420 -> {
                    node = scannerDefinedNode1420()
                }
                1421 -> {
                    node = scannerDefinedNode1421()
                }
                1422 -> {
                    node = scannerDefinedNode1422()
                }
                1423 -> {
                    node = scannerDefinedNode1423()
                }
                1424 -> {
                    node = scannerDefinedNode1424()
                }
                1425 -> {
                    node = scannerDefinedNode1425()
                }
                1426 -> {
                    node = scannerDefinedNode1426()
                }
                1427 -> {
                    node = scannerDefinedNode1427()
                }
                1428 -> {
                    node = scannerDefinedNode1428()
                }
                1429 -> {
                    node = scannerDefinedNode1429()
                }
                1430 -> {
                    node = scannerDefinedNode1430()
                }
                1431 -> {
                    node = scannerDefinedNode1431()
                }
                1432 -> {
                    node = scannerDefinedNode1432()
                }
                1433 -> {
                    node = scannerDefinedNode1433()
                }
                1434 -> {
                    node = scannerDefinedNode1434()
                }
                1435 -> {
                    node = scannerDefinedNode1435()
                }
                1436 -> {
                    node = scannerDefinedNode1436()
                }
                1437 -> {
                    node = scannerDefinedNode1437()
                }
                1438 -> {
                    node = scannerDefinedNode1438()
                }
                1439 -> {
                    node = scannerDefinedNode1439()
                }
                1440 -> {
                    node = scannerDefinedNode1440()
                }
                1441 -> {
                    node = scannerDefinedNode1441()
                }
                1442 -> {
                    node = scannerDefinedNode1442()
                }
                1443 -> {
                    node = scannerDefinedNode1443()
                }
                1444 -> {
                    node = scannerDefinedNode1444()
                }
                1445 -> {
                    node = scannerDefinedNode1445()
                }
                1446 -> {
                    node = scannerDefinedNode1446()
                }
                1447 -> {
                    node = scannerDefinedNode1447()
                }
                1448 -> {
                    node = scannerDefinedNode1448()
                }
                1449 -> {
                    node = scannerDefinedNode1449()
                }
                1450 -> {
                    node = scannerDefinedNode1450()
                }
                1451 -> {
                    node = scannerDefinedNode1451()
                }
                1452 -> {
                    node = scannerDefinedNode1452()
                }
                1453 -> {
                    node = scannerDefinedNode1453()
                }
                1454 -> {
                    node = scannerDefinedNode1454()
                }
                1455 -> {
                    node = scannerDefinedNode1455()
                }
                1456 -> {
                    node = scannerDefinedNode1456()
                }
                1457 -> {
                    node = scannerDefinedNode1457()
                }
                1458 -> {
                    node = scannerDefinedNode1458()
                }
                1459 -> {
                    node = scannerDefinedNode1459()
                }
                1460 -> {
                    node = scannerDefinedNode1460()
                }
                1461 -> {
                    node = scannerDefinedNode1461()
                }
                1462 -> {
                    node = scannerDefinedNode1462()
                }
                1463 -> {
                    node = scannerDefinedNode1463()
                }
                1464 -> {
                    node = scannerDefinedNode1464()
                }
                1465 -> {
                    node = scannerDefinedNode1465()
                }
                1466 -> {
                    node = scannerDefinedNode1466()
                }
                1467 -> {
                    node = scannerDefinedNode1467()
                }
                1468 -> {
                    node = scannerDefinedNode1468()
                }
                1469 -> {
                    node = scannerDefinedNode1469()
                }
                1470 -> {
                    node = scannerDefinedNode1470()
                }
                1471 -> {
                    node = scannerDefinedNode1471()
                }
                1472 -> {
                    node = scannerDefinedNode1472()
                }
                1473 -> {
                    node = scannerDefinedNode1473()
                }
                1474 -> {
                    node = scannerDefinedNode1474()
                }
                1475 -> {
                    node = scannerDefinedNode1475()
                }
                1476 -> {
                    node = scannerDefinedNode1476()
                }
                1477 -> {
                    node = scannerDefinedNode1477()
                }
                1478 -> {
                    node = scannerDefinedNode1478()
                }
                1479 -> {
                    node = scannerDefinedNode1479()
                }
                1480 -> {
                    node = scannerDefinedNode1480()
                }
                1481 -> {
                    node = scannerDefinedNode1481()
                }
                1482 -> {
                    node = scannerDefinedNode1482()
                }
                1483 -> {
                    node = scannerDefinedNode1483()
                }
                1484 -> {
                    node = scannerDefinedNode1484()
                }
                1485 -> {
                    node = scannerDefinedNode1485()
                }
                1486 -> {
                    node = scannerDefinedNode1486()
                }
                1487 -> {
                    node = scannerDefinedNode1487()
                }
                1488 -> {
                    node = scannerDefinedNode1488()
                }
                1489 -> {
                    node = scannerDefinedNode1489()
                }
                1490 -> {
                    node = scannerDefinedNode1490()
                }
                1491 -> {
                    node = scannerDefinedNode1491()
                }
                1492 -> {
                    node = scannerDefinedNode1492()
                }
                1493 -> {
                    node = scannerDefinedNode1493()
                }
                1494 -> {
                    node = scannerDefinedNode1494()
                }
                1495 -> {
                    node = scannerDefinedNode1495()
                }
                1496 -> {
                    node = scannerDefinedNode1496()
                }
            }
        }
        if ((node == -2)) {
            if ((scannerDefinedTokenPendingType == -1)) {
                scannerDefinedTokenPendingType = -2
                scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = -2
                scannerDefinedTokenPendingEnd = bufferDefinedPosition
            }
        }
        if ((scannerDefinedTokenPendingType == -1)) {
            scannerDefinedTokenFoundType[scannerDefinedTokenFoundWriteOffset] = -1
            parsererror = "Unexpected char at $bufferDefinedPosition. Expected one of ${(scannerDefinedEntryPoints[startNode])}"
        }
        bufferDefinedPosition = scannerDefinedTokenPendingEnd
        bufferDefinedLastSize = 0
    }

    private fun getLastTokenString(): String {
        return bufferDefinedData.decodeToString(((scannerDefinedTokenFoundStart[scannerDefinedTokenFoundReadOffset]) - bufferDefinedRangeStart), ((scannerDefinedTokenFoundEnd[scannerDefinedTokenFoundReadOffset]) - bufferDefinedRangeStart))
    }

    private fun parserDefinedNode0(): Int {
        userCode0()
        return 1
    }

    private fun parserDefinedNode1(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 0
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode25()
        return 3
    }

    private fun parserDefinedNode3(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(2)
        }
        val currentToken3: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken3) {
            1 -> {
                return 4
            }
            2 -> {
                return 5
            }
            -2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 -> {
                return 6
            }
            3, 4, 5, 6 -> {
                return 7
            }
            else -> {
                parsererror = "found token $currentToken3 unexpectedly in node 3, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode4(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 1
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode27()
        return 13
    }

    private fun parserDefinedNode5(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 2
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode30()
        return 14
    }

    private fun parserDefinedNode6(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            0 -> {
                userCode1()
                return 15
            }
            473 -> {
                userCode12()
                return 16
            }
            476 -> {
                userCode20()
                return 17
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 6, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode7(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode1()
        return 15
    }

    private fun parserDefinedNode13(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(3)
        }
        val currentToken13: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken13) {
            1 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 18
            }
            else -> {
                parsererror = "found token $currentToken13 unexpectedly in node 13, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode14(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(4)
        }
        val currentToken14: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken14) {
            2 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 19
            }
            else -> {
                parsererror = "found token $currentToken14 unexpectedly in node 14, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode15(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(5)
        }
        val currentToken15: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken15) {
            3, 4, 5, 6 -> {
                userCode2()
                return 25
            }
            -2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 -> {
                userCode7()
                return 26
            }
            else -> {
                parsererror = "found token $currentToken15 unexpectedly in node 15, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode16(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 474
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode18()
        return 27
    }

    private fun parserDefinedNode17(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 477
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode18()
        return 27
    }

    private fun parserDefinedNode18(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(6)
        }
        val currentToken18: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken18) {
            18 -> {
                userCode28()
                userCode29()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 28
            }
            else -> {
                parsererror = "found token $currentToken18 unexpectedly in node 18, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode19(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(7)
        }
        val currentToken19: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken19) {
            19 -> {
                userCode28()
                userCode31()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 29
            }
            else -> {
                parsererror = "found token $currentToken19 unexpectedly in node 19, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode25(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(8)
        }
        val currentToken25: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken25) {
            6 -> {
                return 30
            }
            3 -> {
                return 31
            }
            4 -> {
                return 32
            }
            5 -> {
                return 33
            }
            else -> {
                parsererror = "found token $currentToken25 unexpectedly in node 25, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode26(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(9)
        }
        val currentToken26: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken26) {
            7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 -> {
                userCode8()
                return 44
            }
            -2 -> {
                userCode17()
                return 45
            }
            else -> {
                parsererror = "found token $currentToken26 unexpectedly in node 26, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode27(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(9)
        }
        val currentToken27: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken27) {
            7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 -> {
                userCode8()
                return 46
            }
            -2 -> {
                return 37
            }
            else -> {
                parsererror = "found token $currentToken27 unexpectedly in node 27, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode28(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode26()
        return 3
    }

    private fun parserDefinedNode29(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(6)
        }
        val currentToken29: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken29) {
            18 -> {
                userCode28()
                userCode32()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 49
            }
            else -> {
                parsererror = "found token $currentToken29 unexpectedly in node 29, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode30(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 3
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode33()
        return 50
    }

    private fun parserDefinedNode31(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 393
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode57()
        return 51
    }

    private fun parserDefinedNode32(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 409
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode70()
        return 52
    }

    private fun parserDefinedNode33(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 416
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode81()
        return 53
    }

    private fun parserDefinedNode37(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            477 -> {
                userCode21()
                userCode22()
                userCode23()
                userCode24()
                return 37
            }
            474 -> {
                userCode13()
                userCode14()
                userCode15()
                userCode16()
                userCode17()
                return 45
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 37, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode44(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 421
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 54
    }

    private fun parserDefinedNode45(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(1)
        }
        val currentToken45: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken45) {
            -2 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 55
            }
            else -> {
                parsererror = "found token $currentToken45 unexpectedly in node 45, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode46(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 475
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 54
    }

    private fun parserDefinedNode49(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode26()
        return 3
    }

    private fun parserDefinedNode50(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 4
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode46()
        return 71
    }

    private fun parserDefinedNode51(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(10)
        }
        val currentToken51: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken51) {
            3 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 57
            }
            else -> {
                parsererror = "found token $currentToken51 unexpectedly in node 51, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode52(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(11)
        }
        val currentToken52: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken52) {
            4 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 58
            }
            else -> {
                parsererror = "found token $currentToken52 unexpectedly in node 52, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode53(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(12)
        }
        val currentToken53: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken53) {
            5 -> {
                userCode35()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 76
            }
            else -> {
                parsererror = "found token $currentToken53 unexpectedly in node 53, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode54(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(9)
        }
        val currentToken54: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken54) {
            7 -> {
                return 60
            }
            8 -> {
                return 61
            }
            9 -> {
                return 62
            }
            10 -> {
                return 63
            }
            11 -> {
                return 64
            }
            12 -> {
                return 65
            }
            13 -> {
                return 66
            }
            14 -> {
                return 67
            }
            15 -> {
                return 68
            }
            16 -> {
                return 69
            }
            17 -> {
                return 70
            }
            else -> {
                parsererror = "found token $currentToken54 unexpectedly in node 54, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode55(): Int {
        return -2
    }

    private fun parserDefinedNode57(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(13)
        }
        val currentToken57: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken57) {
            20 -> {
                userCode58()
                return 89
            }
            21, 22 -> {
                userCode64()
                userCode35()
                return 90
            }
            else -> {
                parsererror = "found token $currentToken57 unexpectedly in node 57, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode58(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(14)
        }
        val currentToken58: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken58) {
            23, 24, 18, 25, 19 -> {
                userCode71()
                return 91
            }
            26 -> {
                return 75
            }
            else -> {
                parsererror = "found token $currentToken58 unexpectedly in node 58, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode60(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 422
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode149()
        return 95
    }

    private fun parserDefinedNode61(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 426
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode156()
        return 96
    }

    private fun parserDefinedNode62(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 432
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode159()
        return 97
    }

    private fun parserDefinedNode63(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 434
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode165()
        return 98
    }

    private fun parserDefinedNode64(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 439
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode169()
        return 99
    }

    private fun parserDefinedNode65(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 442
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode173()
        return 100
    }

    private fun parserDefinedNode66(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 445
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode162()
        return 101
    }

    private fun parserDefinedNode67(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 1)) {
            scannerDefinedNextToken(15)
        }
        scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
        scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
        val currentToken67: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 3) % 4)
        scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable + 1)
        when (currentToken67) {
            27 -> {
                return 84
            }
            20 -> {
                return 70
            }
            else -> {
                parsererror = "found token $currentToken67 unexpectedly in node 67, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode68(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 1)) {
            scannerDefinedNextToken(15)
        }
        scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
        scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
        val currentToken68: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 3) % 4)
        scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable + 1)
        when (currentToken68) {
            27 -> {
                return 85
            }
            20 -> {
                return 70
            }
            else -> {
                parsererror = "found token $currentToken68 unexpectedly in node 68, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode69(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 459
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode181()
        return 104
    }

    private fun parserDefinedNode70(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 462
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode183()
        userCode184()
        return 105
    }

    private fun parserDefinedNode71(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(16)
        }
        val currentToken71: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken71) {
            6 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 88
            }
            else -> {
                parsererror = "found token $currentToken71 unexpectedly in node 71, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode75(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 412
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 92
    }

    private fun parserDefinedNode76(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(13)
        }
        val currentToken76: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken76) {
            22 -> {
                return 93
            }
            21, 20 -> {
                userCode83()
                return 116
            }
            else -> {
                parsererror = "found token $currentToken76 unexpectedly in node 76, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode84(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 447
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode177()
        return 124
    }

    private fun parserDefinedNode85(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 457
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode179()
        return 125
    }

    private fun parserDefinedNode88(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(17)
        }
        val currentToken88: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken88) {
            28 -> {
                return 106
            }
            29 -> {
                return 107
            }
            30, 23, 24 -> {
                userCode50()
                return 131
            }
            26 -> {
                return 109
            }
            else -> {
                parsererror = "found token $currentToken88 unexpectedly in node 88, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode89(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 394
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode309()
        return 133
    }

    private fun parserDefinedNode90(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(18)
        }
        val currentToken90: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken90) {
            22 -> {
                return 111
            }
            21 -> {
                userCode66()
                return 134
            }
            else -> {
                parsererror = "found token $currentToken90 unexpectedly in node 90, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode91(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 410
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode92(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken92: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken92) {
            26 -> {
                userCode80()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 137
            }
            else -> {
                parsererror = "found token $currentToken92 unexpectedly in node 92, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode93(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 417
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode86()
        return 138
    }

    private fun parserDefinedNode95(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(20)
        }
        val currentToken95: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken95) {
            7 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 117
            }
            else -> {
                parsererror = "found token $currentToken95 unexpectedly in node 95, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode96(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(21)
        }
        val currentToken96: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken96) {
            8 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 118
            }
            else -> {
                parsererror = "found token $currentToken96 unexpectedly in node 96, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode97(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(22)
        }
        val currentToken97: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken97) {
            9 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 119
            }
            else -> {
                parsererror = "found token $currentToken97 unexpectedly in node 97, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode98(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(23)
        }
        val currentToken98: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken98) {
            10 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 120
            }
            else -> {
                parsererror = "found token $currentToken98 unexpectedly in node 98, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode99(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(24)
        }
        val currentToken99: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken99) {
            11 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 121
            }
            else -> {
                parsererror = "found token $currentToken99 unexpectedly in node 99, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode100(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(25)
        }
        val currentToken100: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken100) {
            12 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 122
            }
            else -> {
                parsererror = "found token $currentToken100 unexpectedly in node 100, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode101(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(26)
        }
        val currentToken101: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken101) {
            13 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 123
            }
            else -> {
                parsererror = "found token $currentToken101 unexpectedly in node 101, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode104(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(27)
        }
        val currentToken104: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken104) {
            16 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 126
            }
            else -> {
                parsererror = "found token $currentToken104 unexpectedly in node 104, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode105(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(28)
        }
        val currentToken105: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken105) {
            17 -> {
                return 127
            }
            14, 15 -> {
                userCode186()
                return 158
            }
            else -> {
                parsererror = "found token $currentToken105 unexpectedly in node 105, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode106(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken106: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken106) {
            28 -> {
                userCode47()
                userCode49()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 159
            }
            else -> {
                parsererror = "found token $currentToken106 unexpectedly in node 106, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode107(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(30)
        }
        val currentToken107: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken107) {
            29 -> {
                userCode48()
                userCode49()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 159
            }
            else -> {
                parsererror = "found token $currentToken107 unexpectedly in node 107, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode109(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 384
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 132
    }

    private fun parserDefinedNode111(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 406
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode86()
        return 138
    }

    private fun parserDefinedNode113(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(31)
        }
        val currentToken113: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken113) {
            23, 24 -> {
                return 135
            }
            18, 25, 19 -> {
                return 136
            }
            else -> {
                parsererror = "found token $currentToken113 unexpectedly in node 113, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode116(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 418
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode94()
        return 169
    }

    private fun parserDefinedNode117(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(32)
        }
        val currentToken117: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken117) {
            31 -> {
                return 140
            }
            18, 25, 19 -> {
                return 141
            }
            else -> {
                parsererror = "found token $currentToken117 unexpectedly in node 117, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode118(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(33)
        }
        val currentToken118: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken118) {
            31 -> {
                return 142
            }
            32, 33, 34, 35 -> {
                return 143
            }
            else -> {
                parsererror = "found token $currentToken118 unexpectedly in node 118, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode119(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(33)
        }
        val currentToken119: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken119) {
            31 -> {
                return 144
            }
            32, 33, 34, 35 -> {
                return 145
            }
            else -> {
                parsererror = "found token $currentToken119 unexpectedly in node 119, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode120(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(34)
        }
        val currentToken120: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken120) {
            31 -> {
                return 146
            }
            32, 35, 18, 25, 19 -> {
                return 147
            }
            else -> {
                parsererror = "found token $currentToken120 unexpectedly in node 120, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode121(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(34)
        }
        val currentToken121: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken121) {
            31 -> {
                return 148
            }
            32, 35, 18, 25, 19 -> {
                return 149
            }
            else -> {
                parsererror = "found token $currentToken121 unexpectedly in node 121, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode122(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(34)
        }
        val currentToken122: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken122) {
            31 -> {
                return 150
            }
            32, 35, 18, 25, 19 -> {
                return 151
            }
            else -> {
                parsererror = "found token $currentToken122 unexpectedly in node 122, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode123(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(35)
        }
        val currentToken123: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken123) {
            31 -> {
                return 152
            }
            35 -> {
                return 153
            }
            else -> {
                parsererror = "found token $currentToken123 unexpectedly in node 123, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode124(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(36)
        }
        val currentToken124: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken124) {
            14 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 154
            }
            else -> {
                parsererror = "found token $currentToken124 unexpectedly in node 124, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode125(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(37)
        }
        val currentToken125: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken125) {
            15 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 155
            }
            else -> {
                parsererror = "found token $currentToken125 unexpectedly in node 125, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode126(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 460
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode212()
        return 182
    }

    private fun parserDefinedNode127(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(38)
        }
        val currentToken127: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken127) {
            17 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 157
            }
            else -> {
                parsererror = "found token $currentToken127 unexpectedly in node 127, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode131(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(39)
        }
        val currentToken131: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken131) {
            23, 24 -> {
                return 160
            }
            30 -> {
                userCode51()
                return 185
            }
            else -> {
                parsererror = "found token $currentToken131 unexpectedly in node 131, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode132(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken132: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken132) {
            26 -> {
                userCode56()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 186
            }
            else -> {
                parsererror = "found token $currentToken132 unexpectedly in node 132, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode133(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken133: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken133) {
            20 -> {
                userCode310()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 187
            }
            else -> {
                parsererror = "found token $currentToken133 unexpectedly in node 133, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode134(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(41)
        }
        val currentToken134: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken134) {
            21 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 164
            }
            else -> {
                parsererror = "found token $currentToken134 unexpectedly in node 134, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode135(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 302
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode136(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 303
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode137(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode73()
        userCode35()
        return 193
    }

    private fun parserDefinedNode138(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(42)
        }
        val currentToken138: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken138) {
            22 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 168
            }
            else -> {
                parsererror = "found token $currentToken138 unexpectedly in node 138, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode140(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken140: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken140) {
            31 -> {
                userCode150()
                userCode151()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 141
            }
            else -> {
                parsererror = "found token $currentToken140 unexpectedly in node 140, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode141(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 423
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode142(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken142: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken142) {
            31 -> {
                userCode150()
                userCode157()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 143
            }
            else -> {
                parsererror = "found token $currentToken142 unexpectedly in node 142, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode143(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 427
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 172
    }

    private fun parserDefinedNode144(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken144: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken144) {
            31 -> {
                userCode150()
                userCode160()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 145
            }
            else -> {
                parsererror = "found token $currentToken144 unexpectedly in node 144, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode145(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 433
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 172
    }

    private fun parserDefinedNode146(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken146: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken146) {
            31 -> {
                userCode150()
                userCode166()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 147
            }
            else -> {
                parsererror = "found token $currentToken146 unexpectedly in node 146, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode147(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 435
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode148(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken148: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken148) {
            31 -> {
                userCode150()
                userCode170()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 149
            }
            else -> {
                parsererror = "found token $currentToken148 unexpectedly in node 148, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode149(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 440
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode150(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken150: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken150) {
            31 -> {
                userCode150()
                userCode174()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 151
            }
            else -> {
                parsererror = "found token $currentToken150 unexpectedly in node 150, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode151(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 443
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode152(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken152: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken152) {
            31 -> {
                userCode150()
                userCode163()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 153
            }
            else -> {
                parsererror = "found token $currentToken152 unexpectedly in node 152, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode153(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 446
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode207()
        return 204
    }

    private fun parserDefinedNode154(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(44)
        }
        val currentToken154: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken154) {
            27 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 180
            }
            else -> {
                parsererror = "found token $currentToken154 unexpectedly in node 154, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode155(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(44)
        }
        val currentToken155: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken155) {
            27 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 181
            }
            else -> {
                parsererror = "found token $currentToken155 unexpectedly in node 155, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode157(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 463
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode158(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(45)
        }
        val currentToken158: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken158) {
            15 -> {
                userCode187()
                return 207
            }
            14 -> {
                return 184
            }
            else -> {
                parsererror = "found token $currentToken158 unexpectedly in node 158, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode159(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(46)
        }
        val currentToken159: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken159) {
            30, 23, 24 -> {
                userCode50()
                return 131
            }
            26 -> {
                return 109
            }
            else -> {
                parsererror = "found token $currentToken159 unexpectedly in node 159, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode160(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 5
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode164(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 407
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode165(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(47)
        }
        val currentToken165: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken165) {
            23 -> {
                return 189
            }
            24 -> {
                return 190
            }
            else -> {
                parsererror = "found token $currentToken165 unexpectedly in node 165, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode166(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(48)
        }
        val currentToken166: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken166) {
            18 -> {
                return 191
            }
            25, 19 -> {
                return 192
            }
            else -> {
                parsererror = "found token $currentToken166 unexpectedly in node 166, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode168(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(49)
        }
        val currentToken168: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken168) {
            18, 25, 19 -> {
                return 194
            }
            33 -> {
                return 195
            }
            else -> {
                parsererror = "found token $currentToken168 unexpectedly in node 168, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode169(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(50)
        }
        val currentToken169: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken169) {
            21 -> {
                return 196
            }
            20 -> {
                return 197
            }
            else -> {
                parsererror = "found token $currentToken169 unexpectedly in node 169, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode172(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(51)
        }
        val currentToken172: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken172) {
            35 -> {
                return 198
            }
            32 -> {
                return 199
            }
            33 -> {
                return 200
            }
            34 -> {
                return 201
            }
            else -> {
                parsererror = "found token $currentToken172 unexpectedly in node 172, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode175(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(52)
        }
        val currentToken175: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken175) {
            32 -> {
                return 202
            }
            35, 18, 25, 19 -> {
                userCode203()
                return 226
            }
            else -> {
                parsererror = "found token $currentToken175 unexpectedly in node 175, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode180(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 448
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode214()
        return 228
    }

    private fun parserDefinedNode181(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 458
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode214()
        return 228
    }

    private fun parserDefinedNode182(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken182: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken182) {
            20 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 206
            }
            else -> {
                parsererror = "found token $currentToken182 unexpectedly in node 182, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode184(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 468
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode199()
        return 231
    }

    private fun parserDefinedNode185(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken185: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken185) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 209
            }
            else -> {
                parsererror = "found token $currentToken185 unexpectedly in node 185, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode186(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode55()
        return 233
    }

    private fun parserDefinedNode187(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(54)
        }
        val currentToken187: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken187) {
            30, 36, 37, 38, 39, 23, 24, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                return 211
            }
            55 -> {
                userCode312()
                return 235
            }
            else -> {
                parsererror = "found token $currentToken187 unexpectedly in node 187, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode189(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 6
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode426()
        return 237
    }

    private fun parserDefinedNode190(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 7
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode428()
        return 238
    }

    private fun parserDefinedNode191(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 181
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode697()
        return 239
    }

    private fun parserDefinedNode192(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 182
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 217
    }

    private fun parserDefinedNode193(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(55)
        }
        val currentToken193: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken193) {
            22 -> {
                return 218
            }
            21, 20, 56, 57, 58, 59, 60, 61, 55, -2 -> {
                userCode75()
                userCode76()
                return 242
            }
            else -> {
                parsererror = "found token $currentToken193 unexpectedly in node 193, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode194(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 386
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode88()
        return 243
    }

    private fun parserDefinedNode195(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 389
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode90()
        return 244
    }

    private fun parserDefinedNode196(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(41)
        }
        val currentToken196: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken196) {
            21 -> {
                userCode95()
                userCode96()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 197
            }
            else -> {
                parsererror = "found token $currentToken196 unexpectedly in node 196, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode197(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 174
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode198(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 428
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode207()
        return 204
    }

    private fun parserDefinedNode199(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 429
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 223
    }

    private fun parserDefinedNode200(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 430
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 224
    }

    private fun parserDefinedNode201(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 431
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 225
    }

    private fun parserDefinedNode202(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 436
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 223
    }

    private fun parserDefinedNode204(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(56)
        }
        val currentToken204: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken204) {
            35 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 227
            }
            else -> {
                parsererror = "found token $currentToken204 unexpectedly in node 204, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode206(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 461
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode216()
        userCode217()
        return 251
    }

    private fun parserDefinedNode207(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 464
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode197()
        return 252
    }

    private fun parserDefinedNode209(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 8
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode211(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 395
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode313()
        return 257
    }

    private fun parserDefinedNode213(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken213: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken213) {
            20 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 236
            }
            else -> {
                parsererror = "found token $currentToken213 unexpectedly in node 213, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode217(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(57)
        }
        val currentToken217: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken217) {
            25 -> {
                return 240
            }
            19 -> {
                return 241
            }
            else -> {
                parsererror = "found token $currentToken217 unexpectedly in node 217, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode218(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 413
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode86()
        return 138
    }

    private fun parserDefinedNode223(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(58)
        }
        val currentToken223: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken223) {
            32 -> {
                userCode209()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 270
            }
            else -> {
                parsererror = "found token $currentToken223 unexpectedly in node 223, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode224(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(59)
        }
        val currentToken224: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken224) {
            33 -> {
                userCode210()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 271
            }
            else -> {
                parsererror = "found token $currentToken224 unexpectedly in node 224, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode225(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(60)
        }
        val currentToken225: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken225) {
            34 -> {
                userCode211()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 272
            }
            else -> {
                parsererror = "found token $currentToken225 unexpectedly in node 225, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode226(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(61)
        }
        val currentToken226: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken226) {
            35 -> {
                return 248
            }
            18, 25, 19 -> {
                return 249
            }
            else -> {
                parsererror = "found token $currentToken226 unexpectedly in node 226, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode227(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 425
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode228(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken228: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken228) {
            20 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 250
            }
            else -> {
                parsererror = "found token $currentToken228 unexpectedly in node 228, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode231(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(36)
        }
        val currentToken231: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken231) {
            14 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 253
            }
            else -> {
                parsererror = "found token $currentToken231 unexpectedly in node 231, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode233(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            172 -> {
                userCode41()
                return 278
            }
            4 -> {
                userCode34()
                userCode35()
                return 279
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 233, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode235(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken235: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken235) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 258
            }
            else -> {
                parsererror = "found token $currentToken235 unexpectedly in node 235, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode236(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(63)
        }
        val currentToken236: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken236) {
            6 -> {
                return 259
            }
            55, 62, 63, 35, 64, 65, 66, 61, 30, 36, 37, 38, 39, 20, 23, 24, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                return 260
            }
            else -> {
                parsererror = "found token $currentToken236 unexpectedly in node 236, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode237(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(64)
        }
        val currentToken237: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken237) {
            23 -> {
                userCode28()
                userCode427()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 284
            }
            else -> {
                parsererror = "found token $currentToken237 unexpectedly in node 237, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode238(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(65)
        }
        val currentToken238: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken238) {
            24 -> {
                userCode28()
                userCode429()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 285
            }
            else -> {
                parsererror = "found token $currentToken238 unexpectedly in node 238, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode239(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(6)
        }
        val currentToken239: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken239) {
            18 -> {
                userCode28()
                userCode698()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 286
            }
            else -> {
                parsererror = "found token $currentToken239 unexpectedly in node 239, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode240(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 183
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode699()
        return 287
    }

    private fun parserDefinedNode241(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 184
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode701()
        return 288
    }

    private fun parserDefinedNode242(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(66)
        }
        val currentToken242: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken242) {
            21, 20 -> {
                return 266
            }
            56, 57, 58, 59, 60, 61, 55, -2 -> {
                userCode78()
                return 289
            }
            else -> {
                parsererror = "found token $currentToken242 unexpectedly in node 242, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode243(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 387
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode92()
        return 290
    }

    private fun parserDefinedNode244(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(59)
        }
        val currentToken244: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken244) {
            33 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 269
            }
            else -> {
                parsererror = "found token $currentToken244 unexpectedly in node 244, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode248(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(56)
        }
        val currentToken248: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken248) {
            35 -> {
                userCode204()
                userCode205()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 249
            }
            else -> {
                parsererror = "found token $currentToken248 unexpectedly in node 248, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode249(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 437
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode250(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 449
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode216()
        userCode217()
        return 251
    }

    private fun parserDefinedNode251(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(67)
        }
        val currentToken251: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken251) {
            30, 36, 37, 38, 39, 23, 24, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                return 274
            }
            35, 55 -> {
                userCode219()
                userCode220()
                return 294
            }
            else -> {
                parsererror = "found token $currentToken251 unexpectedly in node 251, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode252(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(37)
        }
        val currentToken252: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken252) {
            15 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 276
            }
            else -> {
                parsererror = "found token $currentToken252 unexpectedly in node 252, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode253(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 467
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode212()
        return 182
    }

    private fun parserDefinedNode254(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 9
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode432()
        return 295
    }

    private fun parserDefinedNode257(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 396
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 280
    }

    private fun parserDefinedNode258(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode59()
        userCode35()
        return 300
    }

    private fun parserDefinedNode259(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 171
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode40()
        return 301
    }

    private fun parserDefinedNode260(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 242
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode241()
        userCode242()
        return 302
    }

    private fun parserDefinedNode266(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 414
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode94()
        return 169
    }

    private fun parserDefinedNode269(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 390
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode92()
        return 290
    }

    private fun parserDefinedNode270(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            429 -> {
                return 291
            }
            436 -> {
                return 292
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 270, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode271(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 291
    }

    private fun parserDefinedNode272(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 291
    }

    private fun parserDefinedNode274(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 450
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode233()
        return 316
    }

    private fun parserDefinedNode276(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 465
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode212()
        return 182
    }

    private fun parserDefinedNode278(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 173
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode94()
        return 169
    }

    private fun parserDefinedNode279(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(13)
        }
        val currentToken279: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken279) {
            22 -> {
                return 296
            }
            21, 20 -> {
                userCode37()
                return 320
            }
            else -> {
                parsererror = "found token $currentToken279 unexpectedly in node 279, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode280(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(68)
        }
        val currentToken280: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken280) {
            37, 38, 39, 23, 24, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                userCode319()
                return 321
            }
            30, 36 -> {
                userCode322()
                return 322
            }
            else -> {
                parsererror = "found token $currentToken280 unexpectedly in node 280, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode284(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 303
    }

    private fun parserDefinedNode285(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 303
    }

    private fun parserDefinedNode286(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 304
    }

    private fun parserDefinedNode287(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(69)
        }
        val currentToken287: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken287) {
            25 -> {
                userCode28()
                userCode700()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 353
            }
            else -> {
                parsererror = "found token $currentToken287 unexpectedly in node 287, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode288(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(7)
        }
        val currentToken288: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken288) {
            19 -> {
                userCode28()
                userCode702()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 354
            }
            else -> {
                parsererror = "found token $currentToken288 unexpectedly in node 288, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode289(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 415
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode290(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 388
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode291(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            427 -> {
                userCode158()
                return 356
            }
            433 -> {
                userCode161()
                return 357
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 291, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode292(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            435 -> {
                userCode167()
                return 358
            }
            438 -> {
                userCode168()
                return 359
            }
            440 -> {
                userCode171()
                return 360
            }
            441 -> {
                userCode172()
                return 361
            }
            443 -> {
                userCode175()
                return 362
            }
            444 -> {
                userCode176()
                return 363
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 292, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode294(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(70)
        }
        val currentToken294: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken294) {
            35 -> {
                userCode221()
                return 364
            }
            55 -> {
                userCode228()
                return 365
            }
            else -> {
                parsererror = "found token $currentToken294 unexpectedly in node 294, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode295(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 10
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode437()
        return 366
    }

    private fun parserDefinedNode296(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 385
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode86()
        return 138
    }

    private fun parserDefinedNode300(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(13)
        }
        val currentToken300: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken300) {
            22 -> {
                return 323
            }
            21, 20 -> {
                userCode61()
                return 369
            }
            else -> {
                parsererror = "found token $currentToken300 unexpectedly in node 300, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode301(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 172
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode46()
        return 71
    }

    private fun parserDefinedNode302(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(71)
        }
        val currentToken302: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken302) {
            30, 36, 37, 38, 39, 23, 24, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                return 325
            }
            55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode244()
                userCode245()
                return 371
            }
            else -> {
                parsererror = "found token $currentToken302 unexpectedly in node 302, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode303(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            5 -> {
                userCode54()
                return 372
            }
            53 -> {
                userCode592()
                return 373
            }
            190 -> {
                userCode118()
                userCode119()
                return 374
            }
            191 -> {
                return 330
            }
            203 -> {
                userCode134()
                return 376
            }
            213 -> {
                userCode274()
                return 377
            }
            239 -> {
                userCode280()
                return 378
            }
            246 -> {
                return 334
            }
            276 -> {
                userCode372()
                return 383
            }
            302 -> {
                return 336
            }
            331 -> {
                userCode270()
                return 389
            }
            342 -> {
                return 338
            }
            380 -> {
                userCode53()
                return 394
            }
            381 -> {
                userCode54()
                return 372
            }
            383 -> {
                userCode53()
                return 394
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 303, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode304(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            180 -> {
                userCode297()
                return 395
            }
            215 -> {
                return 341
            }
            219 -> {
                userCode665()
                userCode666()
                return 398
            }
            248 -> {
                return 343
            }
            264 -> {
                return 344
            }
            268 -> {
                userCode411()
                return 400
            }
            303 -> {
                return 336
            }
            337 -> {
                userCode658()
                userCode659()
                return 401
            }
            388 -> {
                userCode93()
                return 402
            }
            423 -> {
                userCode152()
                userCode153()
                return 403
            }
            425 -> {
                userCode208()
                return 404
            }
            437 -> {
                userCode206()
                return 292
            }
            463 -> {
                userCode185()
                userCode186()
                return 158
            }
            470 -> {
                userCode202()
                return 405
            }
            471 -> {
                userCode202()
                return 405
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 304, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode316(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 451
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 280
    }

    private fun parserDefinedNode320(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 391
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode94()
        return 169
    }

    private fun parserDefinedNode321(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 397
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 367
    }

    private fun parserDefinedNode322(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 399
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 368
    }

    private fun parserDefinedNode323(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 403
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode86()
        return 138
    }

    private fun parserDefinedNode325(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 243
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode253()
        return 421
    }

    private fun parserDefinedNode330(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            177 -> {
                userCode113()
                return 427
            }
            192 -> {
                userCode113()
                return 427
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 330, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode334(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            245 -> {
                userCode349()
                return 432
            }
            280 -> {
                return 380
            }
            293 -> {
                return 381
            }
            397 -> {
                userCode320()
                return 437
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 334, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode336(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            301 -> {
                return 384
            }
            322 -> {
                userCode262()
                return 442
            }
            325 -> {
                userCode266()
                return 443
            }
            410 -> {
                userCode72()
                return 444
            }
            411 -> {
                userCode72()
                return 444
            }
            454 -> {
                userCode230()
                return 445
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 336, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode338(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            18 -> {
                userCode495()
                return 447
            }
            344 -> {
                userCode497()
                return 448
            }
            346 -> {
                userCode499()
                return 449
            }
            347 -> {
                return 393
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 338, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode341(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            214 -> {
                userCode276()
                return 456
            }
            240 -> {
                userCode283()
                return 457
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 341, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode343(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 334
    }

    private fun parserDefinedNode344(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode393()
        return 458
    }

    private fun parserDefinedNode353(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 406
    }

    private fun parserDefinedNode354(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 406
    }

    private fun parserDefinedNode355(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(72)
        }
        val currentToken355: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken355) {
            56 -> {
                return 407
            }
            57, 58, 59, 60, 61, 55, -2 -> {
                userCode101()
                userCode102()
                return 472
            }
            else -> {
                parsererror = "found token $currentToken355 unexpectedly in node 355, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode356(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode357(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode358(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(73)
        }
        val currentToken358: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken358) {
            67 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 410
            }
            else -> {
                parsererror = "found token $currentToken358 unexpectedly in node 358, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode359(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode360(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(73)
        }
        val currentToken360: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken360) {
            67 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 411
            }
            else -> {
                parsererror = "found token $currentToken360 unexpectedly in node 360, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode361(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode362(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(73)
        }
        val currentToken362: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken362) {
            67 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 412
            }
            else -> {
                parsererror = "found token $currentToken362 unexpectedly in node 362, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode363(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode364(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 453
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode229()
        return 475
    }

    private fun parserDefinedNode365(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            449 -> {
                userCode215()
                return 476
            }
            461 -> {
                userCode213()
                return 477
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 365, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode366(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 11
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode442()
        return 478
    }

    private fun parserDefinedNode367(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(74)
        }
        val currentToken367: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken367) {
            23, 24 -> {
                return 417
            }
            37, 38, 39, 40, 41, 18, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 25, 19 -> {
                return 418
            }
            else -> {
                parsererror = "found token $currentToken367 unexpectedly in node 367, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode368(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(75)
        }
        val currentToken368: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken368) {
            30 -> {
                return 419
            }
            36 -> {
                return 420
            }
            else -> {
                parsererror = "found token $currentToken368 unexpectedly in node 368, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode369(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 404
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode94()
        return 169
    }

    private fun parserDefinedNode371(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(76)
        }
        val currentToken371: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken371) {
            62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode246()
                return 483
            }
            55 -> {
                userCode252()
                return 484
            }
            else -> {
                parsererror = "found token $currentToken371 unexpectedly in node 371, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode372(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(77)
        }
        val currentToken372: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken372) {
            23, 24 -> {
                return 424
            }
            30 -> {
                userCode51()
                return 485
            }
            21, 22, 20 -> {
                userCode55()
                return 233
            }
            else -> {
                parsererror = "found token $currentToken372 unexpectedly in node 372, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode373(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken373: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken373) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 426
            }
            else -> {
                parsererror = "found token $currentToken373 unexpectedly in node 373, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode374(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken374: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken374) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 330
            }
            else -> {
                parsererror = "found token $currentToken374 unexpectedly in node 374, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode376(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            201 -> {
                userCode128()
                return 489
            }
            204 -> {
                userCode128()
                return 489
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 376, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode377(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken377: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken377) {
            20 -> {
                userCode275()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 456
            }
            else -> {
                parsererror = "found token $currentToken377 unexpectedly in node 377, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode378(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(79)
        }
        val currentToken378: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken378) {
            23, 24 -> {
                return 430
            }
            68 -> {
                return 431
            }
            else -> {
                parsererror = "found token $currentToken378 unexpectedly in node 378, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode380(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            283 -> {
                userCode424()
                return 492
            }
            284 -> {
                userCode424()
                return 492
            }
            279 -> {
                userCode379()
                return 493
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 380, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode381(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            296 -> {
                userCode420()
                return 494
            }
            297 -> {
                userCode420()
                return 494
            }
            292 -> {
                userCode347()
                return 495
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 381, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode383(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            275 -> {
                userCode359()
                return 497
            }
            289 -> {
                userCode364()
                return 498
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 383, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode384(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            300 -> {
                userCode330()
                return 499
            }
            306 -> {
                userCode335()
                return 500
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 384, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode389(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken389: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken389) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 446
            }
            else -> {
                parsererror = "found token $currentToken389 unexpectedly in node 389, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode393(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            16 -> {
                userCode486()
                userCode487()
                return 504
            }
            349 -> {
                userCode491()
                return 505
            }
            351 -> {
                userCode493()
                return 506
            }
            359 -> {
                userCode482()
                return 507
            }
            361 -> {
                userCode484()
                return 508
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 393, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode394(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken394: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken394) {
            68 -> {
                userCode54()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 372
            }
            else -> {
                parsererror = "found token $currentToken394 unexpectedly in node 394, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode395(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 185
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 455
    }

    private fun parserDefinedNode398(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            216 -> {
                return 341
            }
            249 -> {
                return 343
            }
            339 -> {
                return 338
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 398, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode400(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            267 -> {
                return 459
            }
            270 -> {
                userCode404()
                userCode405()
                return 519
            }
            271 -> {
                userCode406()
                return 519
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 400, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode401(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(80)
        }
        val currentToken401: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken401) {
            30, 39 -> {
                return 462
            }
            26, 69, 70, 71, 45, 46, 47, 48, 49, 50, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 68, 82, 83, 84 -> {
                userCode661()
                return 520
            }
            else -> {
                parsererror = "found token $currentToken401 unexpectedly in node 401, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode402(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            387 -> {
                userCode89()
                return 521
            }
            390 -> {
                userCode91()
                return 522
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 402, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode403(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(81)
        }
        val currentToken403: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken403) {
            85 -> {
                return 466
            }
            84, -2 -> {
                userCode155()
                return 524
            }
            else -> {
                parsererror = "found token $currentToken403 unexpectedly in node 403, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode404(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            424 -> {
                userCode154()
                userCode155()
                return 524
            }
            428 -> {
                return 291
            }
            446 -> {
                userCode164()
                return 525
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 404, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode405(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode194()
        return 526
    }

    private fun parserDefinedNode406(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 304
    }

    private fun parserDefinedNode407(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 176
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode111()
        return 527
    }

    private fun parserDefinedNode409(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            421 -> {
                userCode9()
                userCode10()
                return 530
            }
            475 -> {
                userCode19()
                userCode10()
                return 531
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 409, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode410(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 438
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode411(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 441
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode412(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 444
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 175
    }

    private fun parserDefinedNode417(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 246
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode418(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 247
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 479
    }

    private fun parserDefinedNode419(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 295
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode418()
        return 542
    }

    private fun parserDefinedNode420(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 298
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode414()
        return 543
    }

    private fun parserDefinedNode421(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 244
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 482
    }

    private fun parserDefinedNode424(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 381
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode426(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode427(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(82)
        }
        val currentToken427: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken427) {
            30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145, 23, 24, 18, 25, 19 -> {
                return 487
            }
            57, 58, 59, 60, 61, 55, -2 -> {
                userCode114()
                return 551
            }
            else -> {
                parsererror = "found token $currentToken427 unexpectedly in node 427, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode430(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 239
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode431(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken431: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken431) {
            68 -> {
                userCode281()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 554
            }
            else -> {
                parsererror = "found token $currentToken431 unexpectedly in node 431, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode432(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 256
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode358()
        return 555
    }

    private fun parserDefinedNode437(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 398
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode329()
        return 564
    }

    private fun parserDefinedNode442(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 323
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode443(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 326
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode444(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(83)
        }
        val currentToken444: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken444) {
            23, 24, 18, 25, 19 -> {
                return 501
            }
            22, 21, 20, 56, 57, 58, 59, 60, 61, 55, -2 -> {
                userCode73()
                userCode35()
                return 193
            }
            else -> {
                parsererror = "found token $currentToken444 unexpectedly in node 444, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode445(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken445: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken445) {
            20 -> {
                userCode217()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 567
            }
            else -> {
                parsererror = "found token $currentToken445 unexpectedly in node 445, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode446(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode447(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 393
    }

    private fun parserDefinedNode448(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 393
    }

    private fun parserDefinedNode449(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 393
    }

    private fun parserDefinedNode455(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(84)
        }
        val currentToken455: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken455) {
            39 -> {
                return 509
            }
            30 -> {
                userCode299()
                return 575
            }
            else -> {
                parsererror = "found token $currentToken455 unexpectedly in node 455, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode456(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(85)
        }
        val currentToken456: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken456) {
            146, 37, 38, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 511
            }
            55 -> {
                userCode277()
                return 577
            }
            else -> {
                parsererror = "found token $currentToken456 unexpectedly in node 456, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode457(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(86)
        }
        val currentToken457: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken457) {
            146, 37, 38, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 513
            }
            68 -> {
                return 514
            }
            else -> {
                parsererror = "found token $currentToken457 unexpectedly in node 457, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode458(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(87)
        }
        val currentToken458: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken458) {
            147 -> {
                return 515
            }
            26 -> {
                return 516
            }
            70 -> {
                return 517
            }
            69, 148, 68, 30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 518
            }
            else -> {
                parsererror = "found token $currentToken458 unexpectedly in node 458, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode459(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 344
    }

    private fun parserDefinedNode462(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 338
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 455
    }

    private fun parserDefinedNode466(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(88)
        }
        val currentToken466: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken466) {
            85 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 523
            }
            else -> {
                parsererror = "found token $currentToken466 unexpectedly in node 466, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode472(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(89)
        }
        val currentToken472: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken472) {
            57 -> {
                return 528
            }
            58, 59, 60, 61, 55, -2 -> {
                userCode104()
                userCode105()
                return 590
            }
            else -> {
                parsererror = "found token $currentToken472 unexpectedly in node 472, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode475(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(56)
        }
        val currentToken475: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken475) {
            35 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 532
            }
            else -> {
                parsererror = "found token $currentToken475 unexpectedly in node 475, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode476(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken476: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken476) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 533
            }
            else -> {
                parsererror = "found token $currentToken476 unexpectedly in node 476, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode477(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken477: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken477) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 534
            }
            else -> {
                parsererror = "found token $currentToken477 unexpectedly in node 477, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode478(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 12
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode444()
        return 600
    }

    private fun parserDefinedNode479(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(90)
        }
        val currentToken479: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken479) {
            18, 25, 19 -> {
                return 536
            }
            51, 52, 53, 54 -> {
                return 537
            }
            42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 538
            }
            37, 38 -> {
                return 539
            }
            40, 41 -> {
                return 540
            }
            39 -> {
                return 541
            }
            else -> {
                parsererror = "found token $currentToken479 unexpectedly in node 479, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode482(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(68)
        }
        val currentToken482: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken482) {
            23, 24, 39, 37, 38, 18, 40, 41, 51, 52, 53, 54, 25, 19, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode348()
                return 607
            }
            30, 36 -> {
                userCode351()
                return 608
            }
            else -> {
                parsererror = "found token $currentToken482 unexpectedly in node 482, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode483(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 313
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 546
    }

    private fun parserDefinedNode484(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode240()
        return 617
    }

    private fun parserDefinedNode485(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken485: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken485) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 548
            }
            else -> {
                parsererror = "found token $currentToken485 unexpectedly in node 485, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode486(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            178 -> {
                return 330
            }
            197 -> {
                return 549
            }
            21 -> {
                return 338
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 486, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode487(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 192
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 550
    }

    private fun parserDefinedNode489(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(91)
        }
        val currentToken489: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken489) {
            149, 150, 30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 25, 19 -> {
                return 552
            }
            59, 60, 61, 55, -2 -> {
                userCode129()
                return 626
            }
            else -> {
                parsererror = "found token $currentToken489 unexpectedly in node 489, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode492(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(92)
        }
        val currentToken492: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken492) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 51, 52, 53, 54, 25, 19, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 556
            }
            68 -> {
                userCode425()
                return 631
            }
            else -> {
                parsererror = "found token $currentToken492 unexpectedly in node 492, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode493(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            278 -> {
                userCode374()
                userCode375()
                return 632
            }
            287 -> {
                userCode376()
                return 632
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 493, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode494(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(92)
        }
        val currentToken494: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken494) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 51, 52, 53, 54, 25, 19, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 560
            }
            68 -> {
                userCode421()
                return 634
            }
            else -> {
                parsererror = "found token $currentToken494 unexpectedly in node 494, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode495(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            291 -> {
                userCode342()
                userCode343()
                return 635
            }
            308 -> {
                userCode344()
                return 635
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 495, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode497(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 277
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode373()
        return 637
    }

    private fun parserDefinedNode498(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 290
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode341()
        return 638
    }

    private fun parserDefinedNode499(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 305
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode341()
        return 638
    }

    private fun parserDefinedNode500(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 307
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode341()
        return 638
    }

    private fun parserDefinedNode501(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 411
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode503(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode247()
        return 641
    }

    private fun parserDefinedNode504(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(93)
        }
        val currentToken504: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken504) {
            26 -> {
                return 569
            }
            69 -> {
                return 570
            }
            70, 71, 45, 46, 47, 48, 49, 50, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 68, 82, 83, 84 -> {
                userCode489()
                return 644
            }
            else -> {
                parsererror = "found token $currentToken504 unexpectedly in node 504, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode505(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode488()
        return 504
    }

    private fun parserDefinedNode506(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode488()
        return 504
    }

    private fun parserDefinedNode507(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode473()
        return 645
    }

    private fun parserDefinedNode508(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode473()
        return 645
    }

    private fun parserDefinedNode509(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 186
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode511(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 214
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 576
    }

    private fun parserDefinedNode513(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 240
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 576
    }

    private fun parserDefinedNode514(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken514: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken514) {
            68 -> {
                userCode284()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 654
            }
            else -> {
                parsererror = "found token $currentToken514 unexpectedly in node 514, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode515(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(94)
        }
        val currentToken515: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken515) {
            147 -> {
                userCode394()
                userCode397()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 518
            }
            else -> {
                parsererror = "found token $currentToken515 unexpectedly in node 515, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode516(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken516: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken516) {
            26 -> {
                userCode395()
                userCode397()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 518
            }
            else -> {
                parsererror = "found token $currentToken516 unexpectedly in node 516, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode517(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(95)
        }
        val currentToken517: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken517) {
            70 -> {
                userCode396()
                userCode397()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 518
            }
            else -> {
                parsererror = "found token $currentToken517 unexpectedly in node 517, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode518(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode401()
        return 655
    }

    private fun parserDefinedNode519(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(96)
        }
        val currentToken519: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken519) {
            148 -> {
                return 583
            }
            68 -> {
                userCode407()
                userCode408()
                return 657
            }
            else -> {
                parsererror = "found token $currentToken519 unexpectedly in node 519, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode520(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 338
    }

    private fun parserDefinedNode521(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode87()
        return 658
    }

    private fun parserDefinedNode522(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode87()
        return 658
    }

    private fun parserDefinedNode523(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 424
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode207()
        return 204
    }

    private fun parserDefinedNode524(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode525(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode526(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(97)
        }
        val currentToken526: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken526) {
            151 -> {
                return 586
            }
            21 -> {
                userCode195()
                return 660
            }
            else -> {
                parsererror = "found token $currentToken526 unexpectedly in node 526, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode527(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(98)
        }
        val currentToken527: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken527) {
            56 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 588
            }
            else -> {
                parsererror = "found token $currentToken527 unexpectedly in node 527, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode528(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 193
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode120()
        return 662
    }

    private fun parserDefinedNode530(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken530: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken530) {
            84 -> {
                userCode11()
                return 665
            }
            -2 -> {
                userCode15()
                userCode16()
                userCode17()
                return 45
            }
            else -> {
                parsererror = "found token $currentToken530 unexpectedly in node 530, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode531(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken531: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken531) {
            84 -> {
                userCode11()
                return 666
            }
            -2 -> {
                userCode23()
                userCode24()
                return 37
            }
            else -> {
                parsererror = "found token $currentToken531 unexpectedly in node 531, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode532(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 454
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode533(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            448 -> {
                userCode178()
                return 667
            }
            458 -> {
                userCode180()
                return 668
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 533, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode534(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            460 -> {
                userCode182()
                return 669
            }
            465 -> {
                userCode198()
                return 670
            }
            467 -> {
                userCode200()
                return 671
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 534, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode536(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 248
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode537(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 249
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode662()
        return 673
    }

    private fun parserDefinedNode538(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 250
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 602
    }

    private fun parserDefinedNode539(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 251
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 603
    }

    private fun parserDefinedNode540(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 252
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 604
    }

    private fun parserDefinedNode541(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 255
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode542(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken542: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken542) {
            30 -> {
                userCode419()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 681
            }
            else -> {
                parsererror = "found token $currentToken542 unexpectedly in node 542, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode543(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(100)
        }
        val currentToken543: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken543) {
            36 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 606
            }
            else -> {
                parsererror = "found token $currentToken543 unexpectedly in node 543, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode546(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(101)
        }
        val currentToken546: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken546) {
            20 -> {
                return 609
            }
            62 -> {
                return 610
            }
            63 -> {
                return 611
            }
            35 -> {
                return 612
            }
            64 -> {
                return 613
            }
            65 -> {
                return 614
            }
            66 -> {
                return 615
            }
            61 -> {
                return 616
            }
            else -> {
                parsererror = "found token $currentToken546 unexpectedly in node 546, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode548(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 382
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode549(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            195 -> {
                userCode125()
                return 692
            }
            202 -> {
                userCode134()
                return 376
            }
            328 -> {
                userCode295()
                return 693
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 549, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode550(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(102)
        }
        val currentToken550: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken550) {
            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145 -> {
                return 620
            }
            18, 25, 19 -> {
                return 621
            }
            30 -> {
                userCode115()
                return 696
            }
            23, 24 -> {
                return 623
            }
            else -> {
                parsererror = "found token $currentToken550 unexpectedly in node 550, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode551(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode100()
        userCode101()
        userCode102()
        return 472
    }

    private fun parserDefinedNode552(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 204
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode130()
        return 697
    }

    private fun parserDefinedNode554(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(40)
        }
        val currentToken554: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken554) {
            20 -> {
                userCode282()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 654
            }
            else -> {
                parsererror = "found token $currentToken554 unexpectedly in node 554, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode555(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(103)
        }
        val currentToken555: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken555) {
            152, 153, 30, 154, 18, 25, 19 -> {
                return 628
            }
            23, 24 -> {
                return 629
            }
            else -> {
                parsererror = "found token $currentToken555 unexpectedly in node 555, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode556(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 284
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 630
    }

    private fun parserDefinedNode560(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 297
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 633
    }

    private fun parserDefinedNode564(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 300
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 636
    }

    private fun parserDefinedNode567(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(54)
        }
        val currentToken567: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken567) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 639
            }
            55 -> {
                userCode232()
                return 715
            }
            else -> {
                parsererror = "found token $currentToken567 unexpectedly in node 567, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode569(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 348
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode490()
        return 718
    }

    private fun parserDefinedNode570(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 350
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode492()
        return 719
    }

    private fun parserDefinedNode575(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken575: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken575) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 647
            }
            else -> {
                parsererror = "found token $currentToken575 unexpectedly in node 575, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode576(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(104)
        }
        val currentToken576: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken576) {
            18, 25, 19 -> {
                return 648
            }
            51, 52, 53, 54 -> {
                return 649
            }
            42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 650
            }
            37, 38 -> {
                return 651
            }
            146 -> {
                return 652
            }
            else -> {
                parsererror = "found token $currentToken576 unexpectedly in node 576, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode577(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken577: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken577) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 653
            }
            else -> {
                parsererror = "found token $currentToken577 unexpectedly in node 577, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode583(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(105)
        }
        val currentToken583: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken583) {
            148 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 656
            }
            else -> {
                parsererror = "found token $currentToken583 unexpectedly in node 583, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode586(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 469
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode201()
        return 742
    }

    private fun parserDefinedNode588(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(106)
        }
        val currentToken588: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken588) {
            155 -> {
                userCode112()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 744
            }
            else -> {
                parsererror = "found token $currentToken588 unexpectedly in node 588, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode590(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(107)
        }
        val currentToken590: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken590) {
            58 -> {
                return 663
            }
            59, 60, 61, 55, -2 -> {
                userCode107()
                userCode108()
                return 747
            }
            else -> {
                parsererror = "found token $currentToken590 unexpectedly in node 590, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode600(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 13
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode602(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(108)
        }
        val currentToken602: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken602) {
            42, 43, 44 -> {
                return 674
            }
            45, 46, 47 -> {
                return 675
            }
            48, 49, 50 -> {
                return 676
            }
            else -> {
                parsererror = "found token $currentToken602 unexpectedly in node 602, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode603(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(109)
        }
        val currentToken603: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken603) {
            37 -> {
                return 677
            }
            38 -> {
                return 678
            }
            else -> {
                parsererror = "found token $currentToken603 unexpectedly in node 603, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode604(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(110)
        }
        val currentToken604: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken604) {
            40 -> {
                return 679
            }
            41 -> {
                return 680
            }
            else -> {
                parsererror = "found token $currentToken604 unexpectedly in node 604, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode606(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 299
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode329()
        return 564
    }

    private fun parserDefinedNode607(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 245
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 367
    }

    private fun parserDefinedNode608(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 309
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 682
    }

    private fun parserDefinedNode609(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 314
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode289()
        return 764
    }

    private fun parserDefinedNode610(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 317
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode259()
        return 765
    }

    private fun parserDefinedNode611(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 319
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode287()
        return 766
    }

    private fun parserDefinedNode612(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 321
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode261()
        return 767
    }

    private fun parserDefinedNode613(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 324
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode264()
        return 768
    }

    private fun parserDefinedNode614(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 327
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode294()
        return 769
    }

    private fun parserDefinedNode615(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 329
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode268()
        return 770
    }

    private fun parserDefinedNode616(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 332
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode271()
        return 771
    }

    private fun parserDefinedNode617(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken617: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken617) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 691
            }
            else -> {
                parsererror = "found token $currentToken617 unexpectedly in node 617, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode620(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 178
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 694
    }

    private fun parserDefinedNode621(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 179
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode296()
        return 839
    }

    private fun parserDefinedNode623(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 191
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode626(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode106()
        userCode107()
        userCode108()
        return 747
    }

    private fun parserDefinedNode628(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 257
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode369()
        return 845
    }

    private fun parserDefinedNode629(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 275
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode371()
        return 846
    }

    private fun parserDefinedNode630(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(68)
        }
        val currentToken630: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken630) {
            23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 701
            }
            30, 36 -> {
                return 702
            }
            else -> {
                parsererror = "found token $currentToken630 unexpectedly in node 630, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode631(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken631: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken631) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 703
            }
            else -> {
                parsererror = "found token $currentToken631 unexpectedly in node 631, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode632(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(111)
        }
        val currentToken632: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken632) {
            82 -> {
                return 704
            }
            84, 156, 157, 55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode377()
                return 849
            }
            else -> {
                parsererror = "found token $currentToken632 unexpectedly in node 632, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode633(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(68)
        }
        val currentToken633: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken633) {
            23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 706
            }
            30, 36 -> {
                return 707
            }
            else -> {
                parsererror = "found token $currentToken633 unexpectedly in node 633, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode634(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken634: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken634) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 708
            }
            else -> {
                parsererror = "found token $currentToken634 unexpectedly in node 634, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode635(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(111)
        }
        val currentToken635: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken635) {
            82 -> {
                return 709
            }
            84, 156, 157, 55, 35, 62, 63, 64, 65, 66, 61, 20 -> {
                userCode345()
                return 852
            }
            else -> {
                parsererror = "found token $currentToken635 unexpectedly in node 635, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode636(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(112)
        }
        val currentToken636: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken636) {
            23, 24, 18, 25, 19 -> {
                return 711
            }
            154 -> {
                return 712
            }
            else -> {
                parsererror = "found token $currentToken636 unexpectedly in node 636, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode637(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 278
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode378()
        return 854
    }

    private fun parserDefinedNode638(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 291
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode346()
        return 855
    }

    private fun parserDefinedNode639(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 455
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode233()
        return 316
    }

    private fun parserDefinedNode641(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(113)
        }
        val currentToken641: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken641) {
            157 -> {
                return 716
            }
            55, 62, 63, 35, 64, 65, 66, 61, 30, 36, 20, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode242()
                return 858
            }
            else -> {
                parsererror = "found token $currentToken641 unexpectedly in node 641, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode644(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            15 -> {
                userCode468()
                userCode469()
                return 861
            }
            353 -> {
                userCode478()
                return 862
            }
            355 -> {
                userCode480()
                return 863
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 644, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode645(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(93)
        }
        val currentToken645: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken645) {
            26 -> {
                return 723
            }
            69 -> {
                return 724
            }
            70, 71, 45, 46, 47, 48, 49, 50, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 68, 82, 83, 84 -> {
                userCode474()
                userCode475()
                return 861
            }
            else -> {
                parsererror = "found token $currentToken645 unexpectedly in node 645, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode646(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(114)
        }
        val currentToken646: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken646) {
            39 -> {
                userCode28()
                userCode708()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 866
            }
            else -> {
                parsererror = "found token $currentToken646 unexpectedly in node 646, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode647(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken647: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken647) {
            28 -> {
                return 727
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 728
            }
            else -> {
                parsererror = "found token $currentToken647 unexpectedly in node 647, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode648(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 215
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode649(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 216
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode662()
        return 673
    }

    private fun parserDefinedNode650(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 220
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 602
    }

    private fun parserDefinedNode651(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 233
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 603
    }

    private fun parserDefinedNode652(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 236
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 729
    }

    private fun parserDefinedNode653(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 730
    }

    private fun parserDefinedNode654(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(116)
        }
        val currentToken654: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken654) {
            30 -> {
                return 731
            }
            39 -> {
                return 732
            }
            55 -> {
                userCode285()
                return 871
            }
            else -> {
                parsererror = "found token $currentToken654 unexpectedly in node 654, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode655(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            261 -> {
                userCode388()
                userCode389()
                return 872
            }
            273 -> {
                userCode390()
                return 872
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 655, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode656(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 271
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode409()
        return 873
    }

    private fun parserDefinedNode657(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken657: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken657) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 459
            }
            else -> {
                parsererror = "found token $currentToken657 unexpectedly in node 657, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode658(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            385 -> {
                userCode36()
                return 279
            }
            403 -> {
                userCode60()
                return 300
            }
            406 -> {
                userCode65()
                return 90
            }
            413 -> {
                userCode74()
                return 193
            }
            417 -> {
                userCode82()
                return 76
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 658, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode660(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(41)
        }
        val currentToken660: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken660) {
            21 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 743
            }
            else -> {
                parsererror = "found token $currentToken660 unexpectedly in node 660, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode662(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(117)
        }
        val currentToken662: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken662) {
            57 -> {
                userCode121()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 875
            }
            else -> {
                parsererror = "found token $currentToken662 unexpectedly in node 662, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode663(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 200
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode126()
        return 876
    }

    private fun parserDefinedNode665(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken665: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken665) {
            84 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 748
            }
            else -> {
                parsererror = "found token $currentToken665 unexpectedly in node 665, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode666(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken666: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken666) {
            84 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 749
            }
            else -> {
                parsererror = "found token $currentToken666 unexpectedly in node 666, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode667(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode668(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode669(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode670(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode188()
        userCode189()
        return 879
    }

    private fun parserDefinedNode671(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            466 -> {
                userCode190()
                userCode191()
                userCode192()
                userCode193()
                return 526
            }
            468 -> {
                userCode192()
                userCode193()
                return 526
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 671, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode673(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 217
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 754
    }

    private fun parserDefinedNode674(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 221
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 755
    }

    private fun parserDefinedNode675(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 225
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 756
    }

    private fun parserDefinedNode676(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 229
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 757
    }

    private fun parserDefinedNode677(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 234
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 758
    }

    private fun parserDefinedNode678(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 235
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 759
    }

    private fun parserDefinedNode679(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 253
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode703()
        return 896
    }

    private fun parserDefinedNode680(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 254
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode705()
        return 897
    }

    private fun parserDefinedNode681(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 296
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 633
    }

    private fun parserDefinedNode682(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(75)
        }
        val currentToken682: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken682) {
            30 -> {
                return 762
            }
            36 -> {
                return 763
            }
            else -> {
                parsererror = "found token $currentToken682 unexpectedly in node 682, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode691(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            174 -> {
                userCode97()
                return 907
            }
            315 -> {
                userCode290()
                userCode291()
                return 908
            }
            316 -> {
                userCode292()
                return 908
            }
            318 -> {
                userCode260()
                return 909
            }
            320 -> {
                userCode288()
                return 910
            }
            323 -> {
                userCode263()
                return 911
            }
            326 -> {
                userCode267()
                return 912
            }
            170 -> {
                userCode629()
                return 913
            }
            335 -> {
                userCode631()
                return 914
            }
            407 -> {
                userCode67()
                return 915
            }
            472 -> {
                userCode196()
                return 916
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 691, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode692(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            194 -> {
                userCode122()
                return 917
            }
            199 -> {
                userCode122()
                return 917
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 692, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode693(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode694(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(118)
        }
        val currentToken694: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken694) {
            139, 140, 141, 142, 143, 144, 145 -> {
                return 784
            }
            86 -> {
                return 785
            }
            87 -> {
                return 786
            }
            88 -> {
                return 787
            }
            89 -> {
                return 788
            }
            90 -> {
                return 789
            }
            91 -> {
                return 790
            }
            92 -> {
                return 791
            }
            93 -> {
                return 792
            }
            94 -> {
                return 793
            }
            95 -> {
                return 794
            }
            96 -> {
                return 795
            }
            97 -> {
                return 796
            }
            98 -> {
                return 797
            }
            99 -> {
                return 798
            }
            100 -> {
                return 799
            }
            101 -> {
                return 800
            }
            102 -> {
                return 801
            }
            103 -> {
                return 802
            }
            104 -> {
                return 803
            }
            105 -> {
                return 804
            }
            106 -> {
                return 805
            }
            107 -> {
                return 806
            }
            108 -> {
                return 807
            }
            109 -> {
                return 808
            }
            110 -> {
                return 809
            }
            111 -> {
                return 810
            }
            112 -> {
                return 811
            }
            113 -> {
                return 812
            }
            114 -> {
                return 813
            }
            115 -> {
                return 814
            }
            116 -> {
                return 815
            }
            117 -> {
                return 816
            }
            118 -> {
                return 817
            }
            119 -> {
                return 818
            }
            120 -> {
                return 819
            }
            121 -> {
                return 820
            }
            122 -> {
                return 821
            }
            123 -> {
                return 822
            }
            124 -> {
                return 823
            }
            125 -> {
                return 824
            }
            126 -> {
                return 825
            }
            127 -> {
                return 826
            }
            128 -> {
                return 827
            }
            129 -> {
                return 828
            }
            130 -> {
                return 829
            }
            131 -> {
                return 830
            }
            132 -> {
                return 831
            }
            133 -> {
                return 832
            }
            134 -> {
                return 833
            }
            135 -> {
                return 834
            }
            136 -> {
                return 835
            }
            137 -> {
                return 836
            }
            138 -> {
                return 837
            }
            79 -> {
                return 838
            }
            else -> {
                parsererror = "found token $currentToken694 unexpectedly in node 694, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode696(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken696: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken696) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 840
            }
            else -> {
                parsererror = "found token $currentToken696 unexpectedly in node 696, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode697(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(119)
        }
        val currentToken697: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken697) {
            149 -> {
                return 841
            }
            150 -> {
                return 842
            }
            30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145, 18, 25, 19 -> {
                return 843
            }
            23, 24 -> {
                return 844
            }
            else -> {
                parsererror = "found token $currentToken697 unexpectedly in node 697, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode701(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 280
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 367
    }

    private fun parserDefinedNode702(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 281
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 682
    }

    private fun parserDefinedNode703(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 847
    }

    private fun parserDefinedNode704(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken704: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken704) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 848
            }
            else -> {
                parsererror = "found token $currentToken704 unexpectedly in node 704, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode706(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 293
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 367
    }

    private fun parserDefinedNode707(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 294
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 368
    }

    private fun parserDefinedNode708(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 850
    }

    private fun parserDefinedNode709(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken709: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken709) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 851
            }
            else -> {
                parsererror = "found token $currentToken709 unexpectedly in node 709, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode711(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 301
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode712(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 304
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 853
    }

    private fun parserDefinedNode715(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken715: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken715) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 856
            }
            else -> {
                parsererror = "found token $currentToken715 unexpectedly in node 715, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode716(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(121)
        }
        val currentToken716: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken716) {
            157 -> {
                userCode223()
                userCode248()
                userCode242()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 858
            }
            else -> {
                parsererror = "found token $currentToken716 unexpectedly in node 716, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode718(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken718: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken718) {
            26 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 859
            }
            else -> {
                parsererror = "found token $currentToken718 unexpectedly in node 718, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode719(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(122)
        }
        val currentToken719: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken719) {
            69 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 860
            }
            else -> {
                parsererror = "found token $currentToken719 unexpectedly in node 719, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode723(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 358
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode481()
        return 993
    }

    private fun parserDefinedNode724(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 360
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode483()
        return 994
    }

    private fun parserDefinedNode727(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken727: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken727) {
            28 -> {
                userCode47()
                userCode300()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 728
            }
            else -> {
                parsererror = "found token $currentToken727 unexpectedly in node 727, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode728(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 187
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode729(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(123)
        }
        val currentToken729: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken729) {
            146 -> {
                userCode286()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1002
            }
            else -> {
                parsererror = "found token $currentToken729 unexpectedly in node 729, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode730(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode272()
        return 1003
    }

    private fun parserDefinedNode731(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken731: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken731) {
            30 -> {
                userCode275()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 457
            }
            else -> {
                parsererror = "found token $currentToken731 unexpectedly in node 731, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode732(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 241
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode742(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(124)
        }
        val currentToken742: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken742) {
            151 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 874
            }
            else -> {
                parsererror = "found token $currentToken742 unexpectedly in node 742, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode743(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 472
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode744(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 177
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 550
    }

    private fun parserDefinedNode747(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(125)
        }
        val currentToken747: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken747) {
            59, 60 -> {
                return 877
            }
            61, 55, -2 -> {
                userCode110()
                return 1015
            }
            else -> {
                parsererror = "found token $currentToken747 unexpectedly in node 747, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode748(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 473
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode25()
        return 3
    }

    private fun parserDefinedNode749(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 476
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode25()
        return 3
    }

    private fun parserDefinedNode753(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 14
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode467()
        return 1018
    }

    private fun parserDefinedNode754(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(126)
        }
        val currentToken754: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken754) {
            51 -> {
                return 881
            }
            52 -> {
                return 882
            }
            53 -> {
                return 883
            }
            54 -> {
                return 884
            }
            else -> {
                parsererror = "found token $currentToken754 unexpectedly in node 754, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode755(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(127)
        }
        val currentToken755: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken755) {
            42 -> {
                return 885
            }
            43 -> {
                return 886
            }
            44 -> {
                return 887
            }
            else -> {
                parsererror = "found token $currentToken755 unexpectedly in node 755, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode756(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(128)
        }
        val currentToken756: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken756) {
            45 -> {
                return 888
            }
            46 -> {
                return 889
            }
            47 -> {
                return 890
            }
            else -> {
                parsererror = "found token $currentToken756 unexpectedly in node 756, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode757(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(129)
        }
        val currentToken757: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken757) {
            48 -> {
                return 891
            }
            49 -> {
                return 892
            }
            50 -> {
                return 893
            }
            else -> {
                parsererror = "found token $currentToken757 unexpectedly in node 757, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode758(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(130)
        }
        val currentToken758: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken758) {
            37 -> {
                userCode687()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1032
            }
            else -> {
                parsererror = "found token $currentToken758 unexpectedly in node 758, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode759(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(131)
        }
        val currentToken759: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken759) {
            38 -> {
                userCode688()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1033
            }
            else -> {
                parsererror = "found token $currentToken759 unexpectedly in node 759, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode762(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 282
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode422()
        return 1036
    }

    private fun parserDefinedNode763(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 285
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode416()
        return 1037
    }

    private fun parserDefinedNode764(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 315
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode765(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(132)
        }
        val currentToken765: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken765) {
            62 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 900
            }
            else -> {
                parsererror = "found token $currentToken765 unexpectedly in node 765, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode766(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(133)
        }
        val currentToken766: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken766) {
            63 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 901
            }
            else -> {
                parsererror = "found token $currentToken766 unexpectedly in node 766, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode767(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(56)
        }
        val currentToken767: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken767) {
            35 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 902
            }
            else -> {
                parsererror = "found token $currentToken767 unexpectedly in node 767, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode768(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(134)
        }
        val currentToken768: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken768) {
            64 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 903
            }
            else -> {
                parsererror = "found token $currentToken768 unexpectedly in node 768, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode769(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(135)
        }
        val currentToken769: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken769) {
            65 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 904
            }
            else -> {
                parsererror = "found token $currentToken769 unexpectedly in node 769, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode770(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(136)
        }
        val currentToken770: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken770) {
            66 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 905
            }
            else -> {
                parsererror = "found token $currentToken770 unexpectedly in node 770, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode771(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(137)
        }
        val currentToken771: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken771) {
            61 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 906
            }
            else -> {
                parsererror = "found token $currentToken771 unexpectedly in node 771, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode784(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 22
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 918
    }

    private fun parserDefinedNode785(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 43
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode582()
        return 1058
    }

    private fun parserDefinedNode786(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 45
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode584()
        return 1059
    }

    private fun parserDefinedNode787(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 47
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode586()
        return 1060
    }

    private fun parserDefinedNode788(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 50
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode589()
        return 1061
    }

    private fun parserDefinedNode789(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 52
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode591()
        return 1062
    }

    private fun parserDefinedNode790(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 54
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode593()
        return 1063
    }

    private fun parserDefinedNode791(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 56
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode595()
        return 1064
    }

    private fun parserDefinedNode792(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 58
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode597()
        return 1065
    }

    private fun parserDefinedNode793(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 61
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode599()
        return 1066
    }

    private fun parserDefinedNode794(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 63
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode601()
        return 1067
    }

    private fun parserDefinedNode795(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 65
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode603()
        return 1068
    }

    private fun parserDefinedNode796(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 67
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode607()
        return 1069
    }

    private fun parserDefinedNode797(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 69
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode609()
        return 1070
    }

    private fun parserDefinedNode798(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 71
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode557()
        return 1071
    }

    private fun parserDefinedNode799(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 76
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode617()
        return 1072
    }

    private fun parserDefinedNode800(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 80
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode559()
        return 1073
    }

    private fun parserDefinedNode801(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 82
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode622()
        return 1074
    }

    private fun parserDefinedNode802(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 87
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode561()
        return 1075
    }

    private fun parserDefinedNode803(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 89
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode605()
        return 1076
    }

    private fun parserDefinedNode804(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 91
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode569()
        return 1077
    }

    private fun parserDefinedNode805(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 93
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode571()
        return 1078
    }

    private fun parserDefinedNode806(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 96
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode574()
        return 1079
    }

    private fun parserDefinedNode807(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 99
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode577()
        return 1080
    }

    private fun parserDefinedNode808(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 102
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode563()
        return 1081
    }

    private fun parserDefinedNode809(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 105
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode566()
        return 1082
    }

    private fun parserDefinedNode810(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 108
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode502()
        return 1083
    }

    private fun parserDefinedNode811(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 110
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode504()
        return 1084
    }

    private fun parserDefinedNode812(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 112
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode580()
        return 1085
    }

    private fun parserDefinedNode813(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 114
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode506()
        return 1086
    }

    private fun parserDefinedNode814(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 116
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode542()
        return 1087
    }

    private fun parserDefinedNode815(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 118
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode551()
        return 1088
    }

    private fun parserDefinedNode816(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 120
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode553()
        return 1089
    }

    private fun parserDefinedNode817(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 122
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode555()
        return 1090
    }

    private fun parserDefinedNode818(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 124
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode508()
        return 1091
    }

    private fun parserDefinedNode819(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 126
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode521()
        return 1092
    }

    private fun parserDefinedNode820(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 128
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode523()
        return 1093
    }

    private fun parserDefinedNode821(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 130
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode519()
        return 1094
    }

    private fun parserDefinedNode822(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 132
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode525()
        return 1095
    }

    private fun parserDefinedNode823(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 134
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode544()
        return 1096
    }

    private fun parserDefinedNode824(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 136
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode527()
        return 1097
    }

    private fun parserDefinedNode825(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 138
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode529()
        return 1098
    }

    private fun parserDefinedNode826(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 140
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode531()
        return 1099
    }

    private fun parserDefinedNode827(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 142
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode533()
        return 1100
    }

    private fun parserDefinedNode828(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 146
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode537()
        return 1101
    }

    private fun parserDefinedNode829(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 149
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode546()
        return 1102
    }

    private fun parserDefinedNode830(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 152
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode510()
        return 1103
    }

    private fun parserDefinedNode831(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 155
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode513()
        return 1104
    }

    private fun parserDefinedNode832(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 157
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode540()
        return 1105
    }

    private fun parserDefinedNode833(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 159
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode515()
        return 1106
    }

    private fun parserDefinedNode834(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 161
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode517()
        return 1107
    }

    private fun parserDefinedNode835(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 163
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode549()
        return 1108
    }

    private fun parserDefinedNode836(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 165
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode611()
        return 1109
    }

    private fun parserDefinedNode837(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 169
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode628()
        return 1110
    }

    private fun parserDefinedNode838(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 334
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode630()
        return 1111
    }

    private fun parserDefinedNode839(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 180
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode840(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 189
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode841(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(138)
        }
        val currentToken841: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken841) {
            149 -> {
                userCode131()
                userCode133()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1112
            }
            else -> {
                parsererror = "found token $currentToken841 unexpectedly in node 841, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode842(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(139)
        }
        val currentToken842: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken842) {
            150 -> {
                userCode132()
                userCode133()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1112
            }
            else -> {
                parsererror = "found token $currentToken842 unexpectedly in node 842, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode843(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 202
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 975
    }

    private fun parserDefinedNode844(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 203
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode845(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 258
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode380()
        return 1116
    }

    private fun parserDefinedNode846(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 276
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode847(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            281 -> {
                return 380
            }
            309 -> {
                userCode352()
                userCode353()
                return 1117
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 847, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode848(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 287
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode378()
        return 854
    }

    private fun parserDefinedNode849(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode360()
        userCode361()
        return 1118
    }

    private fun parserDefinedNode850(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            294 -> {
                return 381
            }
            399 -> {
                userCode323()
                userCode324()
                return 1119
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 850, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode851(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 308
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode346()
        return 855
    }

    private fun parserDefinedNode852(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            305 -> {
                userCode331()
                userCode332()
                return 1120
            }
            307 -> {
                userCode336()
                userCode337()
                userCode338()
                return 1120
            }
            290 -> {
                userCode365()
                userCode366()
                userCode367()
                return 1118
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 852, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode853(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(140)
        }
        val currentToken853: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken853) {
            154 -> {
                userCode340()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1121
            }
            else -> {
                parsererror = "found token $currentToken853 unexpectedly in node 853, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode854(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 279
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 630
    }

    private fun parserDefinedNode855(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 292
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 633
    }

    private fun parserDefinedNode856(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode222()
        return 1122
    }

    private fun parserDefinedNode858(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(71)
        }
        val currentToken858: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken858) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 985
            }
            55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode250()
                userCode251()
                return 371
            }
            else -> {
                parsererror = "found token $currentToken858 unexpectedly in node 858, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode859(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 349
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 987
    }

    private fun parserDefinedNode860(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 351
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 987
    }

    private fun parserDefinedNode861(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(141)
        }
        val currentToken861: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken861) {
            70 -> {
                return 988
            }
            71 -> {
                return 989
            }
            45, 46, 47, 48, 49, 50 -> {
                userCode470()
                return 1129
            }
            72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 68, 82, 83, 84 -> {
                userCode476()
                return 1130
            }
            else -> {
                parsererror = "found token $currentToken861 unexpectedly in node 861, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode862(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode475()
        return 861
    }

    private fun parserDefinedNode863(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode475()
        return 861
    }

    private fun parserDefinedNode866(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            60 -> {
                userCode598()
                return 1133
            }
            62 -> {
                userCode600()
                return 1134
            }
            73 -> {
                return 997
            }
            125 -> {
                userCode509()
                return 1139
            }
            127 -> {
                userCode522()
                return 1140
            }
            129 -> {
                userCode524()
                return 1141
            }
            186 -> {
                return 1001
            }
            238 -> {
                userCode281()
                return 554
            }
            241 -> {
                userCode284()
                return 654
            }
            255 -> {
                return 343
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 866, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode871(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(62)
        }
        val currentToken871: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken871) {
            55 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1004
            }
            else -> {
                parsererror = "found token $currentToken871 unexpectedly in node 871, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode872(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(142)
        }
        val currentToken872: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken872) {
            69 -> {
                return 1005
            }
            148, 68, 30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode391()
                return 1147
            }
            else -> {
                parsererror = "found token $currentToken872 unexpectedly in node 872, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode873(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(143)
        }
        val currentToken873: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken873) {
            152 -> {
                return 1007
            }
            18, 25, 19 -> {
                return 1008
            }
            154 -> {
                return 1009
            }
            else -> {
                parsererror = "found token $currentToken873 unexpectedly in node 873, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode874(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(49)
        }
        val currentToken874: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken874) {
            18, 25, 19 -> {
                return 1010
            }
            33 -> {
                return 1011
            }
            else -> {
                parsererror = "found token $currentToken874 unexpectedly in node 874, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode875(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 194
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode124()
        return 1150
    }

    private fun parserDefinedNode876(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(144)
        }
        val currentToken876: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken876) {
            58 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1013
            }
            else -> {
                parsererror = "found token $currentToken876 unexpectedly in node 876, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode877(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 205
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1014
    }

    private fun parserDefinedNode879(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(145)
        }
        val currentToken879: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken879) {
            14 -> {
                return 1016
            }
            21, 151 -> {
                userCode191()
                userCode192()
                userCode193()
                return 526
            }
            else -> {
                parsererror = "found token $currentToken879 unexpectedly in node 879, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode881(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 39
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode689()
        return 1161
    }

    private fun parserDefinedNode882(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 40
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode691()
        return 1162
    }

    private fun parserDefinedNode883(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 41
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode693()
        return 1163
    }

    private fun parserDefinedNode884(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 42
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode695()
        return 1164
    }

    private fun parserDefinedNode885(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 222
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode669()
        return 1165
    }

    private fun parserDefinedNode886(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 223
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode671()
        return 1166
    }

    private fun parserDefinedNode887(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 224
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode673()
        return 1167
    }

    private fun parserDefinedNode888(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 226
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode675()
        return 1168
    }

    private fun parserDefinedNode889(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 227
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode677()
        return 1169
    }

    private fun parserDefinedNode890(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 228
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode679()
        return 1170
    }

    private fun parserDefinedNode891(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 230
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode681()
        return 1171
    }

    private fun parserDefinedNode892(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 231
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode683()
        return 1172
    }

    private fun parserDefinedNode893(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 232
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode685()
        return 1173
    }

    private fun parserDefinedNode896(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(146)
        }
        val currentToken896: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken896) {
            40 -> {
                userCode28()
                userCode704()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1175
            }
            else -> {
                parsererror = "found token $currentToken896 unexpectedly in node 896, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode897(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(147)
        }
        val currentToken897: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken897) {
            41 -> {
                userCode28()
                userCode706()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1176
            }
            else -> {
                parsererror = "found token $currentToken897 unexpectedly in node 897, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode900(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 318
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode901(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 320
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode902(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 322
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode903(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(148)
        }
        val currentToken903: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken903) {
            31 -> {
                return 1038
            }
            23, 24, 18, 25, 19 -> {
                return 1039
            }
            else -> {
                parsererror = "found token $currentToken903 unexpectedly in node 903, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode904(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 328
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 975
    }

    private fun parserDefinedNode905(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken905: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken905) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1040
            }
            else -> {
                parsererror = "found token $currentToken905 unexpectedly in node 905, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode906(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 211
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1041
    }

    private fun parserDefinedNode907(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            173 -> {
                userCode42()
                return 1182
            }
            391 -> {
                userCode38()
                return 1183
            }
            404 -> {
                userCode62()
                return 1184
            }
            414 -> {
                userCode77()
                userCode78()
                return 289
            }
            418 -> {
                userCode84()
                return 1185
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 907, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode908(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(149)
        }
        val currentToken908: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken908) {
            158 -> {
                return 1047
            }
            157, 55, 62, 63, 35, 64, 65, 66, 61, 30, 36, 20, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode293()
                return 1187
            }
            else -> {
                parsererror = "found token $currentToken908 unexpectedly in node 908, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode909(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode910(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode911(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode912(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode913(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode914(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode915(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 408
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode916(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 409
    }

    private fun parserDefinedNode917(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(150)
        }
        val currentToken917: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken917) {
            30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145, 18, 25, 19 -> {
                return 1049
            }
            58, 59, 60, 61, 55, -2 -> {
                userCode123()
                return 1188
            }
            else -> {
                parsererror = "found token $currentToken917 unexpectedly in node 917, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode918(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(151)
        }
        val currentToken918: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken918) {
            139 -> {
                return 1051
            }
            140 -> {
                return 1052
            }
            141 -> {
                return 1053
            }
            142 -> {
                return 1054
            }
            143 -> {
                return 1055
            }
            144 -> {
                return 1056
            }
            145 -> {
                return 1057
            }
            else -> {
                parsererror = "found token $currentToken918 unexpectedly in node 918, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode975(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(152)
        }
        val currentToken975: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken975) {
            30 -> {
                return 1113
            }
            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145 -> {
                return 1114
            }
            18, 25, 19 -> {
                return 1115
            }
            else -> {
                parsererror = "found token $currentToken975 unexpectedly in node 975, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode985(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 333
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode253()
        return 421
    }

    private fun parserDefinedNode987(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(153)
        }
        val currentToken987: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken987) {
            153 -> {
                return 1123
            }
            70 -> {
                return 1124
            }
            71 -> {
                return 1125
            }
            30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1126
            }
            else -> {
                parsererror = "found token $currentToken987 unexpectedly in node 987, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode988(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 352
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode477()
        return 1266
    }

    private fun parserDefinedNode989(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 354
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode479()
        return 1267
    }

    private fun parserDefinedNode993(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken993: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken993) {
            26 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1131
            }
            else -> {
                parsererror = "found token $currentToken993 unexpectedly in node 993, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode994(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(122)
        }
        val currentToken994: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken994) {
            69 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1132
            }
            else -> {
                parsererror = "found token $currentToken994 unexpectedly in node 994, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode997(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            72 -> {
                userCode558()
                return 1271
            }
            141 -> {
                userCode532()
                return 1272
            }
            375 -> {
                userCode462()
                return 1273
            }
            377 -> {
                userCode464()
                return 1274
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 997, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1001(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            185 -> {
                userCode298()
                return 1275
            }
            338 -> {
                userCode660()
                userCode661()
                return 520
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1001, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1002(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 341
    }

    private fun parserDefinedNode1003(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            210 -> {
                userCode44()
                userCode45()
                return 1276
            }
            332 -> {
                return 503
            }
            420 -> {
                userCode5()
                userCode6()
                userCode17()
                return 45
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1003, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1004(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 730
    }

    private fun parserDefinedNode1005(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(122)
        }
        val currentToken1005: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1005) {
            69 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1146
            }
            else -> {
                parsererror = "found token $currentToken1005 unexpectedly in node 1005, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1007(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(154)
        }
        val currentToken1007: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1007) {
            152 -> {
                userCode399()
                userCode410()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1280
            }
            else -> {
                parsererror = "found token $currentToken1007 unexpectedly in node 1007, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1008(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 268
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1009(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 269
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 853
    }

    private fun parserDefinedNode1010(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 470
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1011(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(59)
        }
        val currentToken1011: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1011) {
            33 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1149
            }
            else -> {
                parsererror = "found token $currentToken1011 unexpectedly in node 1011, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1013(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(106)
        }
        val currentToken1013: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1013) {
            155 -> {
                userCode127()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1281
            }
            else -> {
                parsererror = "found token $currentToken1013 unexpectedly in node 1013, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1014(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(155)
        }
        val currentToken1014: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1014) {
            59 -> {
                userCode135()
                return 1282
            }
            60 -> {
                userCode140()
                return 1283
            }
            else -> {
                parsererror = "found token $currentToken1014 unexpectedly in node 1014, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1015(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            175 -> {
                userCode43()
                userCode4()
                return 1284
            }
            392 -> {
                userCode39()
                return 1285
            }
            405 -> {
                userCode63()
                userCode69()
                return 1286
            }
            408 -> {
                userCode68()
                userCode69()
                return 1286
            }
            415 -> {
                userCode79()
                return 1287
            }
            419 -> {
                userCode85()
                return 1288
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1015, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1016(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 466
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode199()
        return 231
    }

    private fun parserDefinedNode1018(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 15
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode485()
        return 1289
    }

    private fun parserDefinedNode1032(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1174
    }

    private fun parserDefinedNode1033(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1174
    }

    private fun parserDefinedNode1036(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1036: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1036) {
            30 -> {
                userCode423()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1304
            }
            else -> {
                parsererror = "found token $currentToken1036 unexpectedly in node 1036, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1037(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(100)
        }
        val currentToken1037: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1037) {
            36 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1178
            }
            else -> {
                parsererror = "found token $currentToken1037 unexpectedly in node 1037, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1038(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(43)
        }
        val currentToken1038: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1038) {
            31 -> {
                userCode150()
                userCode265()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1039
            }
            else -> {
                parsererror = "found token $currentToken1038 unexpectedly in node 1038, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1039(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 325
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 113
    }

    private fun parserDefinedNode1040(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 330
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1041(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(156)
        }
        val currentToken1041: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1041) {
            23, 24 -> {
                return 1180
            }
            30, 39 -> {
                return 1181
            }
            else -> {
                parsererror = "found token $currentToken1041 unexpectedly in node 1041, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1047(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(157)
        }
        val currentToken1047: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1047) {
            158 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1186
            }
            else -> {
                parsererror = "found token $currentToken1047 unexpectedly in node 1047, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1049(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 199
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode124()
        return 1150
    }

    private fun parserDefinedNode1051(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 23
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode635()
        return 1308
    }

    private fun parserDefinedNode1052(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 26
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode639()
        return 1309
    }

    private fun parserDefinedNode1053(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 28
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode642()
        return 1310
    }

    private fun parserDefinedNode1054(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 30
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode645()
        return 1311
    }

    private fun parserDefinedNode1055(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 32
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode632()
        return 1312
    }

    private fun parserDefinedNode1056(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 34
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode648()
        return 1313
    }

    private fun parserDefinedNode1057(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 36
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode651()
        return 1314
    }

    private fun parserDefinedNode1058(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(158)
        }
        val currentToken1058: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1058) {
            86 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1196
            }
            else -> {
                parsererror = "found token $currentToken1058 unexpectedly in node 1058, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1059(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(159)
        }
        val currentToken1059: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1059) {
            87 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1197
            }
            else -> {
                parsererror = "found token $currentToken1059 unexpectedly in node 1059, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1060(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(160)
        }
        val currentToken1060: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1060) {
            88 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1198
            }
            else -> {
                parsererror = "found token $currentToken1060 unexpectedly in node 1060, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1061(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(161)
        }
        val currentToken1061: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1061) {
            89 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1199
            }
            else -> {
                parsererror = "found token $currentToken1061 unexpectedly in node 1061, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1062(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(162)
        }
        val currentToken1062: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1062) {
            90 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1200
            }
            else -> {
                parsererror = "found token $currentToken1062 unexpectedly in node 1062, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1063(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(163)
        }
        val currentToken1063: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1063) {
            91 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1201
            }
            else -> {
                parsererror = "found token $currentToken1063 unexpectedly in node 1063, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1064(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(164)
        }
        val currentToken1064: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1064) {
            92 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1202
            }
            else -> {
                parsererror = "found token $currentToken1064 unexpectedly in node 1064, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1065(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(165)
        }
        val currentToken1065: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1065) {
            93 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1203
            }
            else -> {
                parsererror = "found token $currentToken1065 unexpectedly in node 1065, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1066(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(166)
        }
        val currentToken1066: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1066) {
            94 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1204
            }
            else -> {
                parsererror = "found token $currentToken1066 unexpectedly in node 1066, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1067(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(167)
        }
        val currentToken1067: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1067) {
            95 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1205
            }
            else -> {
                parsererror = "found token $currentToken1067 unexpectedly in node 1067, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1068(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(168)
        }
        val currentToken1068: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1068) {
            96 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1206
            }
            else -> {
                parsererror = "found token $currentToken1068 unexpectedly in node 1068, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1069(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(169)
        }
        val currentToken1069: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1069) {
            97 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1207
            }
            else -> {
                parsererror = "found token $currentToken1069 unexpectedly in node 1069, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1070(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(170)
        }
        val currentToken1070: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1070) {
            98 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1208
            }
            else -> {
                parsererror = "found token $currentToken1070 unexpectedly in node 1070, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1071(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(171)
        }
        val currentToken1071: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1071) {
            99 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1209
            }
            else -> {
                parsererror = "found token $currentToken1071 unexpectedly in node 1071, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1072(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(172)
        }
        val currentToken1072: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1072) {
            100 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1210
            }
            else -> {
                parsererror = "found token $currentToken1072 unexpectedly in node 1072, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1073(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(173)
        }
        val currentToken1073: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1073) {
            101 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1211
            }
            else -> {
                parsererror = "found token $currentToken1073 unexpectedly in node 1073, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1074(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(174)
        }
        val currentToken1074: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1074) {
            102 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1212
            }
            else -> {
                parsererror = "found token $currentToken1074 unexpectedly in node 1074, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1075(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(175)
        }
        val currentToken1075: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1075) {
            103 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1213
            }
            else -> {
                parsererror = "found token $currentToken1075 unexpectedly in node 1075, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1076(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(176)
        }
        val currentToken1076: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1076) {
            104 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1214
            }
            else -> {
                parsererror = "found token $currentToken1076 unexpectedly in node 1076, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1077(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(177)
        }
        val currentToken1077: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1077) {
            105 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1215
            }
            else -> {
                parsererror = "found token $currentToken1077 unexpectedly in node 1077, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1078(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(178)
        }
        val currentToken1078: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1078) {
            106 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1216
            }
            else -> {
                parsererror = "found token $currentToken1078 unexpectedly in node 1078, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1079(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(179)
        }
        val currentToken1079: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1079) {
            107 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1217
            }
            else -> {
                parsererror = "found token $currentToken1079 unexpectedly in node 1079, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1080(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(180)
        }
        val currentToken1080: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1080) {
            108 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1218
            }
            else -> {
                parsererror = "found token $currentToken1080 unexpectedly in node 1080, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1081(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(181)
        }
        val currentToken1081: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1081) {
            109 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1219
            }
            else -> {
                parsererror = "found token $currentToken1081 unexpectedly in node 1081, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1082(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(182)
        }
        val currentToken1082: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1082) {
            110 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1220
            }
            else -> {
                parsererror = "found token $currentToken1082 unexpectedly in node 1082, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1083(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(183)
        }
        val currentToken1083: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1083) {
            111 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1221
            }
            else -> {
                parsererror = "found token $currentToken1083 unexpectedly in node 1083, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1084(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(184)
        }
        val currentToken1084: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1084) {
            112 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1222
            }
            else -> {
                parsererror = "found token $currentToken1084 unexpectedly in node 1084, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1085(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(185)
        }
        val currentToken1085: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1085) {
            113 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1223
            }
            else -> {
                parsererror = "found token $currentToken1085 unexpectedly in node 1085, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1086(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(186)
        }
        val currentToken1086: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1086) {
            114 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1224
            }
            else -> {
                parsererror = "found token $currentToken1086 unexpectedly in node 1086, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1087(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(187)
        }
        val currentToken1087: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1087) {
            115 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1225
            }
            else -> {
                parsererror = "found token $currentToken1087 unexpectedly in node 1087, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1088(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(188)
        }
        val currentToken1088: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1088) {
            116 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1226
            }
            else -> {
                parsererror = "found token $currentToken1088 unexpectedly in node 1088, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1089(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(189)
        }
        val currentToken1089: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1089) {
            117 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1227
            }
            else -> {
                parsererror = "found token $currentToken1089 unexpectedly in node 1089, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1090(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(190)
        }
        val currentToken1090: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1090) {
            118 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1228
            }
            else -> {
                parsererror = "found token $currentToken1090 unexpectedly in node 1090, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1091(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(191)
        }
        val currentToken1091: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1091) {
            119 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1229
            }
            else -> {
                parsererror = "found token $currentToken1091 unexpectedly in node 1091, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1092(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(192)
        }
        val currentToken1092: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1092) {
            120 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1230
            }
            else -> {
                parsererror = "found token $currentToken1092 unexpectedly in node 1092, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1093(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(193)
        }
        val currentToken1093: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1093) {
            121 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1231
            }
            else -> {
                parsererror = "found token $currentToken1093 unexpectedly in node 1093, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1094(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(194)
        }
        val currentToken1094: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1094) {
            122 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1232
            }
            else -> {
                parsererror = "found token $currentToken1094 unexpectedly in node 1094, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1095(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(195)
        }
        val currentToken1095: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1095) {
            123 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1233
            }
            else -> {
                parsererror = "found token $currentToken1095 unexpectedly in node 1095, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1096(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(196)
        }
        val currentToken1096: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1096) {
            124 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1234
            }
            else -> {
                parsererror = "found token $currentToken1096 unexpectedly in node 1096, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1097(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(197)
        }
        val currentToken1097: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1097) {
            125 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1235
            }
            else -> {
                parsererror = "found token $currentToken1097 unexpectedly in node 1097, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1098(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(198)
        }
        val currentToken1098: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1098) {
            126 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1236
            }
            else -> {
                parsererror = "found token $currentToken1098 unexpectedly in node 1098, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1099(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(199)
        }
        val currentToken1099: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1099) {
            127 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1237
            }
            else -> {
                parsererror = "found token $currentToken1099 unexpectedly in node 1099, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1100(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(200)
        }
        val currentToken1100: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1100) {
            128 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1238
            }
            else -> {
                parsererror = "found token $currentToken1100 unexpectedly in node 1100, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1101(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(201)
        }
        val currentToken1101: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1101) {
            129 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1239
            }
            else -> {
                parsererror = "found token $currentToken1101 unexpectedly in node 1101, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1102(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(202)
        }
        val currentToken1102: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1102) {
            130 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1240
            }
            else -> {
                parsererror = "found token $currentToken1102 unexpectedly in node 1102, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1103(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(203)
        }
        val currentToken1103: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1103) {
            131 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1241
            }
            else -> {
                parsererror = "found token $currentToken1103 unexpectedly in node 1103, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1104(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(204)
        }
        val currentToken1104: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1104) {
            132 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1242
            }
            else -> {
                parsererror = "found token $currentToken1104 unexpectedly in node 1104, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1105(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(205)
        }
        val currentToken1105: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1105) {
            133 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1243
            }
            else -> {
                parsererror = "found token $currentToken1105 unexpectedly in node 1105, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1106(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(206)
        }
        val currentToken1106: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1106) {
            134 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1244
            }
            else -> {
                parsererror = "found token $currentToken1106 unexpectedly in node 1106, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1107(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(207)
        }
        val currentToken1107: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1107) {
            135 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1245
            }
            else -> {
                parsererror = "found token $currentToken1107 unexpectedly in node 1107, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1108(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(208)
        }
        val currentToken1108: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1108) {
            136 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1246
            }
            else -> {
                parsererror = "found token $currentToken1108 unexpectedly in node 1108, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1109(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(209)
        }
        val currentToken1109: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1109) {
            137 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1247
            }
            else -> {
                parsererror = "found token $currentToken1109 unexpectedly in node 1109, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1110(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(210)
        }
        val currentToken1110: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1110) {
            138 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1248
            }
            else -> {
                parsererror = "found token $currentToken1110 unexpectedly in node 1110, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1111(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(211)
        }
        val currentToken1111: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1111) {
            79 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1249
            }
            else -> {
                parsererror = "found token $currentToken1111 unexpectedly in node 1111, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1112(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(102)
        }
        val currentToken1112: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1112) {
            30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145, 18, 25, 19 -> {
                return 843
            }
            23, 24 -> {
                return 844
            }
            else -> {
                parsererror = "found token $currentToken1112 unexpectedly in node 1112, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1113(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 196
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode500()
        return 1364
    }

    private fun parserDefinedNode1114(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 197
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 694
    }

    private fun parserDefinedNode1115(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 198
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode296()
        return 839
    }

    private fun parserDefinedNode1116(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 259
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode382()
        return 1365
    }

    private fun parserDefinedNode1117(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(212)
        }
        val currentToken1117: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1117) {
            23, 24, 152, 153, 30, 154, 18, 25, 19 -> {
                return 1252
            }
            157, 55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode355()
                return 1367
            }
            else -> {
                parsererror = "found token $currentToken1117 unexpectedly in node 1117, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1118(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(213)
        }
        val currentToken1118: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1118) {
            84 -> {
                return 1254
            }
            156, 157, 55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode368()
                return 1369
            }
            else -> {
                parsererror = "found token $currentToken1118 unexpectedly in node 1118, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1119(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(214)
        }
        val currentToken1119: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1119) {
            154, 23, 24, 18, 25, 19 -> {
                return 1256
            }
            157, 55, 35 -> {
                userCode326()
                return 1371
            }
            else -> {
                parsererror = "found token $currentToken1119 unexpectedly in node 1119, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1120(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(215)
        }
        val currentToken1120: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1120) {
            84 -> {
                return 1258
            }
            156, 157, 55, 35 -> {
                userCode339()
                return 1373
            }
            else -> {
                parsererror = "found token $currentToken1120 unexpectedly in node 1120, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1121(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            265 -> {
                return 344
            }
            269 -> {
                userCode411()
                return 400
            }
            304 -> {
                return 384
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1121, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1122(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(216)
        }
        val currentToken1122: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1122) {
            157 -> {
                return 1260
            }
            35, 55, 30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode217()
                return 1375
            }
            else -> {
                parsererror = "found token $currentToken1122 unexpectedly in node 1122, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1123(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 17
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode494()
        return 1376
    }

    private fun parserDefinedNode1124(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 343
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode496()
        return 1377
    }

    private fun parserDefinedNode1125(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 345
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode498()
        return 1378
    }

    private fun parserDefinedNode1126(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 347
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1265
    }

    private fun parserDefinedNode1129(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(217)
        }
        val currentToken1129: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1129) {
            45, 46, 47 -> {
                return 1268
            }
            48, 49, 50 -> {
                return 1269
            }
            else -> {
                parsererror = "found token $currentToken1129 unexpectedly in node 1129, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1130(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode466()
        return 1388
    }

    private fun parserDefinedNode1131(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 359
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 987
    }

    private fun parserDefinedNode1132(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 361
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 987
    }

    private fun parserDefinedNode1133(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1134(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1139(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1140(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1141(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1146(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 273
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode398()
        return 1390
    }

    private fun parserDefinedNode1147(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            260 -> {
                userCode383()
                userCode384()
                return 1391
            }
            274 -> {
                userCode385()
                return 1391
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1147, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1149(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 471
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1150(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 195
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 975
    }

    private fun parserDefinedNode1161(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(218)
        }
        val currentToken1161: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1161) {
            51 -> {
                userCode28()
                userCode690()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1397
            }
            else -> {
                parsererror = "found token $currentToken1161 unexpectedly in node 1161, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1162(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(219)
        }
        val currentToken1162: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1162) {
            52 -> {
                userCode28()
                userCode692()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1398
            }
            else -> {
                parsererror = "found token $currentToken1162 unexpectedly in node 1162, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1163(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(220)
        }
        val currentToken1163: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1163) {
            53 -> {
                userCode28()
                userCode694()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1399
            }
            else -> {
                parsererror = "found token $currentToken1163 unexpectedly in node 1163, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1164(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(221)
        }
        val currentToken1164: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1164) {
            54 -> {
                userCode28()
                userCode696()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1400
            }
            else -> {
                parsererror = "found token $currentToken1164 unexpectedly in node 1164, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1165(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(222)
        }
        val currentToken1165: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1165) {
            42 -> {
                userCode28()
                userCode670()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1401
            }
            else -> {
                parsererror = "found token $currentToken1165 unexpectedly in node 1165, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1166(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(223)
        }
        val currentToken1166: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1166) {
            43 -> {
                userCode28()
                userCode672()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1402
            }
            else -> {
                parsererror = "found token $currentToken1166 unexpectedly in node 1166, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1167(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(224)
        }
        val currentToken1167: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1167) {
            44 -> {
                userCode28()
                userCode674()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1403
            }
            else -> {
                parsererror = "found token $currentToken1167 unexpectedly in node 1167, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1168(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(225)
        }
        val currentToken1168: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1168) {
            45 -> {
                userCode28()
                userCode676()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1404
            }
            else -> {
                parsererror = "found token $currentToken1168 unexpectedly in node 1168, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1169(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(226)
        }
        val currentToken1169: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1169) {
            46 -> {
                userCode28()
                userCode678()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1405
            }
            else -> {
                parsererror = "found token $currentToken1169 unexpectedly in node 1169, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1170(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(227)
        }
        val currentToken1170: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1170) {
            47 -> {
                userCode28()
                userCode680()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1406
            }
            else -> {
                parsererror = "found token $currentToken1170 unexpectedly in node 1170, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1171(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(228)
        }
        val currentToken1171: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1171) {
            48 -> {
                userCode28()
                userCode682()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1407
            }
            else -> {
                parsererror = "found token $currentToken1171 unexpectedly in node 1171, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1172(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(229)
        }
        val currentToken1172: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1172) {
            49 -> {
                userCode28()
                userCode684()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1408
            }
            else -> {
                parsererror = "found token $currentToken1172 unexpectedly in node 1172, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1173(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(230)
        }
        val currentToken1173: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1173) {
            50 -> {
                userCode28()
                userCode686()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1409
            }
            else -> {
                parsererror = "found token $currentToken1173 unexpectedly in node 1173, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1174(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            233 -> {
                return 341
            }
            251 -> {
                return 343
            }
            341 -> {
                return 338
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1174, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1175(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1303
    }

    private fun parserDefinedNode1176(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1303
    }

    private fun parserDefinedNode1178(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 286
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode358()
        return 555
    }

    private fun parserDefinedNode1180(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 212
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode273()
        return 1410
    }

    private fun parserDefinedNode1181(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 237
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode278()
        return 1411
    }

    private fun parserDefinedNode1182(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 175
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode1183(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 392
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode1184(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 405
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode1185(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 419
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode98()
        userCode99()
        return 355
    }

    private fun parserDefinedNode1186(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 316
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode1187(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 503
    }

    private fun parserDefinedNode1188(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode103()
        userCode104()
        userCode105()
        return 590
    }

    private fun parserDefinedNode1196(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1196: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1196) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1315
            }
            else -> {
                parsererror = "found token $currentToken1196 unexpectedly in node 1196, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1197(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1197: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1197) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1316
            }
            else -> {
                parsererror = "found token $currentToken1197 unexpectedly in node 1197, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1198(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1198: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1198) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1317
            }
            else -> {
                parsererror = "found token $currentToken1198 unexpectedly in node 1198, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1199(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1199: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1199) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1318
            }
            else -> {
                parsererror = "found token $currentToken1199 unexpectedly in node 1199, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1200(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1200: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1200) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1319
            }
            else -> {
                parsererror = "found token $currentToken1200 unexpectedly in node 1200, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1201(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1201: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1201) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1320
            }
            else -> {
                parsererror = "found token $currentToken1201 unexpectedly in node 1201, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1202(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1202: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1202) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1321
            }
            else -> {
                parsererror = "found token $currentToken1202 unexpectedly in node 1202, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1203(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(84)
        }
        val currentToken1203: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1203) {
            30 -> {
                return 1322
            }
            39 -> {
                return 1323
            }
            else -> {
                parsererror = "found token $currentToken1203 unexpectedly in node 1203, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1204(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 62
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1205(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1205: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1205) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1324
            }
            else -> {
                parsererror = "found token $currentToken1205 unexpectedly in node 1205, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1206(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1206: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1206) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1325
            }
            else -> {
                parsererror = "found token $currentToken1206 unexpectedly in node 1206, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1207(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1207: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1207) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1326
            }
            else -> {
                parsererror = "found token $currentToken1207 unexpectedly in node 1207, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1208(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1208: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1208) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1327
            }
            else -> {
                parsererror = "found token $currentToken1208 unexpectedly in node 1208, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1209(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 72
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1328
    }

    private fun parserDefinedNode1210(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1210: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1210) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1329
            }
            else -> {
                parsererror = "found token $currentToken1210 unexpectedly in node 1210, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1211(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1211: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1211) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1330
            }
            else -> {
                parsererror = "found token $currentToken1211 unexpectedly in node 1211, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1212(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1212: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1212) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1331
            }
            else -> {
                parsererror = "found token $currentToken1212 unexpectedly in node 1212, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1213(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1213: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1213) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1332
            }
            else -> {
                parsererror = "found token $currentToken1213 unexpectedly in node 1213, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1214(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1214: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1214) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1333
            }
            else -> {
                parsererror = "found token $currentToken1214 unexpectedly in node 1214, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1215(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1215: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1215) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1334
            }
            else -> {
                parsererror = "found token $currentToken1215 unexpectedly in node 1215, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1216(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1216: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1216) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1335
            }
            else -> {
                parsererror = "found token $currentToken1216 unexpectedly in node 1216, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1217(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1217: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1217) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1336
            }
            else -> {
                parsererror = "found token $currentToken1217 unexpectedly in node 1217, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1218(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1218: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1218) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1337
            }
            else -> {
                parsererror = "found token $currentToken1218 unexpectedly in node 1218, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1219(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1219: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1219) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1338
            }
            else -> {
                parsererror = "found token $currentToken1219 unexpectedly in node 1219, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1220(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1220: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1220) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1339
            }
            else -> {
                parsererror = "found token $currentToken1220 unexpectedly in node 1220, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1221(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1221: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1221) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1340
            }
            else -> {
                parsererror = "found token $currentToken1221 unexpectedly in node 1221, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1222(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1222: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1222) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1341
            }
            else -> {
                parsererror = "found token $currentToken1222 unexpectedly in node 1222, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1223(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1223: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1223) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1342
            }
            else -> {
                parsererror = "found token $currentToken1223 unexpectedly in node 1223, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1224(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1224: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1224) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1343
            }
            else -> {
                parsererror = "found token $currentToken1224 unexpectedly in node 1224, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1225(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1225: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1225) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1344
            }
            else -> {
                parsererror = "found token $currentToken1225 unexpectedly in node 1225, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1226(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1226: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1226) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1345
            }
            else -> {
                parsererror = "found token $currentToken1226 unexpectedly in node 1226, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1227(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1227: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1227) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1346
            }
            else -> {
                parsererror = "found token $currentToken1227 unexpectedly in node 1227, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1228(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1228: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1228) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1347
            }
            else -> {
                parsererror = "found token $currentToken1228 unexpectedly in node 1228, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1229(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 125
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1230(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 127
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1231(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 129
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1232(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1232: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1232) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1348
            }
            else -> {
                parsererror = "found token $currentToken1232 unexpectedly in node 1232, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1233(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1233: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1233) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1349
            }
            else -> {
                parsererror = "found token $currentToken1233 unexpectedly in node 1233, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1234(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1234: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1234) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1350
            }
            else -> {
                parsererror = "found token $currentToken1234 unexpectedly in node 1234, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1235(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1235: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1235) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1351
            }
            else -> {
                parsererror = "found token $currentToken1235 unexpectedly in node 1235, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1236(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1236: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1236) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1352
            }
            else -> {
                parsererror = "found token $currentToken1236 unexpectedly in node 1236, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1237(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 141
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1328
    }

    private fun parserDefinedNode1238(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1238: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1238) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1353
            }
            else -> {
                parsererror = "found token $currentToken1238 unexpectedly in node 1238, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1239(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1239: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1239) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1354
            }
            else -> {
                parsererror = "found token $currentToken1239 unexpectedly in node 1239, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1240(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1240: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1240) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1355
            }
            else -> {
                parsererror = "found token $currentToken1240 unexpectedly in node 1240, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1241(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1241: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1241) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1356
            }
            else -> {
                parsererror = "found token $currentToken1241 unexpectedly in node 1241, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1242(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1242: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1242) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1357
            }
            else -> {
                parsererror = "found token $currentToken1242 unexpectedly in node 1242, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1243(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1243: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1243) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1358
            }
            else -> {
                parsererror = "found token $currentToken1243 unexpectedly in node 1243, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1244(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1244: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1244) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1359
            }
            else -> {
                parsererror = "found token $currentToken1244 unexpectedly in node 1244, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1245(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1245: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1245) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1360
            }
            else -> {
                parsererror = "found token $currentToken1245 unexpectedly in node 1245, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1246(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1246: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1246) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1361
            }
            else -> {
                parsererror = "found token $currentToken1246 unexpectedly in node 1246, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1247(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1247: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1247) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1362
            }
            else -> {
                parsererror = "found token $currentToken1247 unexpectedly in node 1247, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1248(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 170
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode1249(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(210)
        }
        val currentToken1249: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1249) {
            138 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1363
            }
            else -> {
                parsererror = "found token $currentToken1249 unexpectedly in node 1249, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1252(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 310
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode356()
        return 1424
    }

    private fun parserDefinedNode1254(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken1254: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1254) {
            84 -> {
                userCode362()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1426
            }
            else -> {
                parsererror = "found token $currentToken1254 unexpectedly in node 1254, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1256(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 400
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode327()
        return 1430
    }

    private fun parserDefinedNode1258(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken1258: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1258) {
            84 -> {
                userCode333()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1433
            }
            else -> {
                parsererror = "found token $currentToken1258 unexpectedly in node 1258, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1260(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(121)
        }
        val currentToken1260: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1260) {
            157 -> {
                userCode223()
                userCode224()
                userCode217()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1375
            }
            else -> {
                parsererror = "found token $currentToken1260 unexpectedly in node 1260, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1265(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(231)
        }
        val currentToken1265: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1265) {
            30 -> {
                return 1379
            }
            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 139, 140, 141, 142, 143, 144, 145 -> {
                return 1380
            }
            18, 25, 19 -> {
                return 1381
            }
            51, 52, 53, 54 -> {
                return 1382
            }
            42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 1383
            }
            37, 38 -> {
                return 1384
            }
            23, 24 -> {
                return 1385
            }
            else -> {
                parsererror = "found token $currentToken1265 unexpectedly in node 1265, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1266(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(95)
        }
        val currentToken1266: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1266) {
            70 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1386
            }
            else -> {
                parsererror = "found token $currentToken1266 unexpectedly in node 1266, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1267(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(232)
        }
        val currentToken1267: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1267) {
            71 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1387
            }
            else -> {
                parsererror = "found token $currentToken1267 unexpectedly in node 1267, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1268(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 356
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 756
    }

    private fun parserDefinedNode1269(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 357
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 757
    }

    private fun parserDefinedNode1271(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1272(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1273(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1274(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1275(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            179 -> {
                return 330
            }
            198 -> {
                return 549
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1275, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1276(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode240()
        return 617
    }

    private fun parserDefinedNode1280(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(233)
        }
        val currentToken1280: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1280) {
            18, 25, 19 -> {
                return 1008
            }
            154 -> {
                return 1009
            }
            else -> {
                parsererror = "found token $currentToken1280 unexpectedly in node 1280, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1281(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 201
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode130()
        return 697
    }

    private fun parserDefinedNode1282(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 206
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode145()
        return 1455
    }

    private fun parserDefinedNode1283(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 208
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode147()
        return 1456
    }

    private fun parserDefinedNode1284(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(234)
        }
        val currentToken1284: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1284) {
            61 -> {
                return 1394
            }
            55 -> {
                userCode45()
                return 1276
            }
            else -> {
                parsererror = "found token $currentToken1284 unexpectedly in node 1284, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1285(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode3()
        userCode4()
        return 1457
    }

    private fun parserDefinedNode1286(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode3()
        userCode4()
        return 1457
    }

    private fun parserDefinedNode1287(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode3()
        userCode4()
        return 1457
    }

    private fun parserDefinedNode1288(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode3()
        userCode4()
        return 1457
    }

    private fun parserDefinedNode1289(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 16
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 987
    }

    private fun parserDefinedNode1303(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 343
    }

    private fun parserDefinedNode1304(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 283
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 630
    }

    private fun parserDefinedNode1308(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(235)
        }
        val currentToken1308: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1308) {
            139 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1412
            }
            else -> {
                parsererror = "found token $currentToken1308 unexpectedly in node 1308, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1309(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(236)
        }
        val currentToken1309: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1309) {
            140 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1413
            }
            else -> {
                parsererror = "found token $currentToken1309 unexpectedly in node 1309, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1310(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(237)
        }
        val currentToken1310: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1310) {
            141 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1414
            }
            else -> {
                parsererror = "found token $currentToken1310 unexpectedly in node 1310, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1311(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(238)
        }
        val currentToken1311: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1311) {
            142 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1415
            }
            else -> {
                parsererror = "found token $currentToken1311 unexpectedly in node 1311, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1312(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(239)
        }
        val currentToken1312: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1312) {
            143 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1416
            }
            else -> {
                parsererror = "found token $currentToken1312 unexpectedly in node 1312, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1313(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(240)
        }
        val currentToken1313: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1313) {
            144 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1417
            }
            else -> {
                parsererror = "found token $currentToken1313 unexpectedly in node 1313, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1314(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(241)
        }
        val currentToken1314: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1314) {
            145 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1418
            }
            else -> {
                parsererror = "found token $currentToken1314 unexpectedly in node 1314, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1315(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 44
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1316(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 46
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1317(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 48
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1318(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 51
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1319(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 53
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1320(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 55
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1321(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 57
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1322(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1322: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1322) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1419
            }
            else -> {
                parsererror = "found token $currentToken1322 unexpectedly in node 1322, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1323(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 60
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1324(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 64
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1325(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 66
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1326(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 68
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1327(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 70
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1328(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(84)
        }
        val currentToken1328: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1328) {
            39 -> {
                return 1420
            }
            30 -> {
                userCode305()
                return 1471
            }
            else -> {
                parsererror = "found token $currentToken1328 unexpectedly in node 1328, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1329(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 77
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1330(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 81
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1331(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 83
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1332(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 88
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1333(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 90
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1334(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 92
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1335(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 94
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1336(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 97
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1337(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 100
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1338(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 103
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1339(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 106
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1340(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 109
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1341(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 111
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1342(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 113
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1343(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 115
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1344(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 117
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1345(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 119
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1346(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 121
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1347(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 123
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1348(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 131
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1349(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 133
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1350(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 135
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1351(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 137
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1352(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 139
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1353(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 143
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1354(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 147
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1355(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 150
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1356(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 153
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1357(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 156
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1358(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 158
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1359(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 160
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1360(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 162
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1361(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 164
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1362(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 166
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1363(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 335
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode239()
        return 213
    }

    private fun parserDefinedNode1364(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1364: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1364) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1422
            }
            else -> {
                parsererror = "found token $currentToken1364 unexpectedly in node 1364, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1365(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 260
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode387()
        return 1472
    }

    private fun parserDefinedNode1367(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode254()
        userCode255()
        return 1473
    }

    private fun parserDefinedNode1369(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            286 -> {
                userCode417()
                return 1476
            }
            256 -> {
                userCode350()
                return 1367
            }
            311 -> {
                userCode357()
                return 1477
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1369, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1371(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            396 -> {
                userCode314()
                userCode315()
                return 1478
            }
            451 -> {
                userCode234()
                userCode235()
                return 1479
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1371, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1373(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            299 -> {
                userCode415()
                return 1482
            }
            398 -> {
                userCode321()
                return 1371
            }
            401 -> {
                userCode328()
                return 1483
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1373, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1375(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(67)
        }
        val currentToken1375: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1375) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 1437
            }
            35, 55 -> {
                userCode226()
                userCode227()
                return 294
            }
            else -> {
                parsererror = "found token $currentToken1375 unexpectedly in node 1375, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1376(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(242)
        }
        val currentToken1376: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1376) {
            153 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1439
            }
            else -> {
                parsererror = "found token $currentToken1376 unexpectedly in node 1376, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1377(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(95)
        }
        val currentToken1377: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1377) {
            70 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1440
            }
            else -> {
                parsererror = "found token $currentToken1377 unexpectedly in node 1377, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1378(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(232)
        }
        val currentToken1378: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1378) {
            71 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1441
            }
            else -> {
                parsererror = "found token $currentToken1378 unexpectedly in node 1378, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1379(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 19
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode500()
        return 1364
    }

    private fun parserDefinedNode1380(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 21
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 694
    }

    private fun parserDefinedNode1381(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 336
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode657()
        return 1484
    }

    private fun parserDefinedNode1382(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 339
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode662()
        return 673
    }

    private fun parserDefinedNode1383(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 340
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 602
    }

    private fun parserDefinedNode1384(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 341
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 603
    }

    private fun parserDefinedNode1385(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 342
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1386(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 353
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode485()
        return 1289
    }

    private fun parserDefinedNode1387(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 355
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode485()
        return 1289
    }

    private fun parserDefinedNode1388(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            13 -> {
                userCode445()
                userCode446()
                return 1485
            }
            363 -> {
                userCode450()
                return 1486
            }
            365 -> {
                userCode452()
                return 1487
            }
            367 -> {
                userCode454()
                return 1488
            }
            369 -> {
                userCode456()
                return 1489
            }
            371 -> {
                userCode458()
                return 1490
            }
            373 -> {
                userCode460()
                return 1491
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1388, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1390(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(243)
        }
        val currentToken1390: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1390) {
            152 -> {
                return 1451
            }
            153, 30, 154, 18, 25, 19 -> {
                return 1452
            }
            else -> {
                parsererror = "found token $currentToken1390 unexpectedly in node 1390, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1391(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(244)
        }
        val currentToken1391: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1391) {
            148 -> {
                return 1453
            }
            68, 30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                userCode386()
                return 1496
            }
            else -> {
                parsererror = "found token $currentToken1391 unexpectedly in node 1391, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1394(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 210
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode271()
        return 771
    }

    private fun parserDefinedNode1397(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1458
    }

    private fun parserDefinedNode1398(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1458
    }

    private fun parserDefinedNode1399(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1458
    }

    private fun parserDefinedNode1400(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1458
    }

    private fun parserDefinedNode1401(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1459
    }

    private fun parserDefinedNode1402(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1459
    }

    private fun parserDefinedNode1403(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1459
    }

    private fun parserDefinedNode1404(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1460
    }

    private fun parserDefinedNode1405(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1460
    }

    private fun parserDefinedNode1406(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1460
    }

    private fun parserDefinedNode1407(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1461
    }

    private fun parserDefinedNode1408(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1461
    }

    private fun parserDefinedNode1409(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1461
    }

    private fun parserDefinedNode1410(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 213
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1411(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(84)
        }
        val currentToken1411: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1411) {
            39 -> {
                return 1462
            }
            30 -> {
                return 1463
            }
            else -> {
                parsererror = "found token $currentToken1411 unexpectedly in node 1411, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1412(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1412: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1412) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1464
            }
            else -> {
                parsererror = "found token $currentToken1412 unexpectedly in node 1412, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1413(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1413: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1413) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1465
            }
            else -> {
                parsererror = "found token $currentToken1413 unexpectedly in node 1413, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1414(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1414: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1414) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1466
            }
            else -> {
                parsererror = "found token $currentToken1414 unexpectedly in node 1414, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1415(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1415: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1415) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1467
            }
            else -> {
                parsererror = "found token $currentToken1415 unexpectedly in node 1415, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1416(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1416: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1416) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1468
            }
            else -> {
                parsererror = "found token $currentToken1416 unexpectedly in node 1416, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1417(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1417: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1417) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1469
            }
            else -> {
                parsererror = "found token $currentToken1417 unexpectedly in node 1417, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1418(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1418: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1418) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1470
            }
            else -> {
                parsererror = "found token $currentToken1418 unexpectedly in node 1418, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1419(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 59
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1420(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 73
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1422(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 20
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1424(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 311
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode358()
        return 555
    }

    private fun parserDefinedNode1426(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(245)
        }
        val currentToken1426: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1426) {
            23, 24, 152, 153, 30, 154, 18, 25, 19 -> {
                userCode363()
                return 1524
            }
            84, 156, 157, 55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode367()
                return 1118
            }
            else -> {
                parsererror = "found token $currentToken1426 unexpectedly in node 1426, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1430(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 401
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode329()
        return 564
    }

    private fun parserDefinedNode1433(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(246)
        }
        val currentToken1433: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1433) {
            154, 23, 24, 18, 25, 19 -> {
                userCode334()
                return 1531
            }
            84, 156, 157, 55, 35 -> {
                userCode338()
                return 1120
            }
            else -> {
                parsererror = "found token $currentToken1433 unexpectedly in node 1433, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1437(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 456
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode233()
        return 316
    }

    private fun parserDefinedNode1439(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 18
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1265
    }

    private fun parserDefinedNode1440(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 344
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1265
    }

    private fun parserDefinedNode1441(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 346
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1265
    }

    private fun parserDefinedNode1450(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode443()
        return 1543
    }

    private fun parserDefinedNode1451(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(154)
        }
        val currentToken1451: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1451) {
            152 -> {
                userCode399()
                userCode400()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1452
            }
            else -> {
                parsererror = "found token $currentToken1451 unexpectedly in node 1451, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1452(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 262
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode392()
        return 1544
    }

    private fun parserDefinedNode1453(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(105)
        }
        val currentToken1453: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1453) {
            148 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1495
            }
            else -> {
                parsererror = "found token $currentToken1453 unexpectedly in node 1453, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1455(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(247)
        }
        val currentToken1455: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1455) {
            59 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1497
            }
            else -> {
                parsererror = "found token $currentToken1455 unexpectedly in node 1455, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1456(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(248)
        }
        val currentToken1456: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1456) {
            60 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1498
            }
            else -> {
                parsererror = "found token $currentToken1456 unexpectedly in node 1456, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1457(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(137)
        }
        val currentToken1457: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1457) {
            61 -> {
                return 1499
            }
            -2 -> {
                userCode6()
                userCode17()
                return 45
            }
            else -> {
                parsererror = "found token $currentToken1457 unexpectedly in node 1457, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1458(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            38 -> {
                userCode655()
                userCode656()
                return 1548
            }
            217 -> {
                userCode663()
                userCode664()
                return 1549
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1458, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1459(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1503
    }

    private fun parserDefinedNode1460(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            225 -> {
                return 1503
            }
            356 -> {
                userCode471()
                userCode472()
                return 645
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1460, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1461(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            229 -> {
                return 1503
            }
            357 -> {
                userCode471()
                userCode472()
                return 645
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1461, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1462(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 238
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode707()
        return 646
    }

    private fun parserDefinedNode1463(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1463: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1463) {
            30 -> {
                userCode279()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 378
            }
            else -> {
                parsererror = "found token $currentToken1463 unexpectedly in node 1463, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1464(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(249)
        }
        val currentToken1464: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1464) {
            28 -> {
                return 1506
            }
            26 -> {
                return 1507
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1508
            }
            else -> {
                parsererror = "found token $currentToken1464 unexpectedly in node 1464, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1465(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1465: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1465) {
            28 -> {
                return 1509
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1510
            }
            else -> {
                parsererror = "found token $currentToken1465 unexpectedly in node 1465, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1466(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1466: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1466) {
            28 -> {
                return 1511
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1512
            }
            else -> {
                parsererror = "found token $currentToken1466 unexpectedly in node 1466, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1467(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1467: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1467) {
            28 -> {
                return 1513
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1514
            }
            else -> {
                parsererror = "found token $currentToken1467 unexpectedly in node 1467, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1468(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1468: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1468) {
            28 -> {
                return 1515
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1516
            }
            else -> {
                parsererror = "found token $currentToken1468 unexpectedly in node 1468, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1469(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1469: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1469) {
            28 -> {
                return 1517
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1518
            }
            else -> {
                parsererror = "found token $currentToken1469 unexpectedly in node 1469, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1470(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(115)
        }
        val currentToken1470: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1470) {
            28 -> {
                return 1519
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1520
            }
            else -> {
                parsererror = "found token $currentToken1470 unexpectedly in node 1470, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1471(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1471: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1471) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1521
            }
            else -> {
                parsererror = "found token $currentToken1471 unexpectedly in node 1471, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1472(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 261
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode398()
        return 1390
    }

    private fun parserDefinedNode1473(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(250)
        }
        val currentToken1473: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1473) {
            157 -> {
                return 1522
            }
            55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode258()
                return 1559
            }
            else -> {
                parsererror = "found token $currentToken1473 unexpectedly in node 1473, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1476(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(251)
        }
        val currentToken1476: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1476) {
            156 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1525
            }
            else -> {
                parsererror = "found token $currentToken1476 unexpectedly in node 1476, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1477(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode354()
        userCode355()
        return 1367
    }

    private fun parserDefinedNode1478(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(252)
        }
        val currentToken1478: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1478) {
            157 -> {
                return 1527
            }
            55 -> {
                userCode318()
                return 1563
            }
            else -> {
                parsererror = "found token $currentToken1478 unexpectedly in node 1478, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1479(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(253)
        }
        val currentToken1479: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1479) {
            157 -> {
                return 1529
            }
            55, 35 -> {
                userCode238()
                return 1565
            }
            else -> {
                parsererror = "found token $currentToken1479 unexpectedly in node 1479, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1482(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(251)
        }
        val currentToken1482: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1482) {
            156 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1532
            }
            else -> {
                parsererror = "found token $currentToken1482 unexpectedly in node 1482, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1483(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode325()
        userCode326()
        return 1371
    }

    private fun parserDefinedNode1484(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 337
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1485(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(254)
        }
        val currentToken1485: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1485) {
            72 -> {
                return 1534
            }
            73 -> {
                return 1535
            }
            74 -> {
                return 1536
            }
            75 -> {
                return 1537
            }
            76 -> {
                return 1538
            }
            77 -> {
                return 1539
            }
            78 -> {
                return 1540
            }
            79 -> {
                return 1541
            }
            80, 81, 68, 82, 83, 84 -> {
                userCode448()
                return 1450
            }
            else -> {
                parsererror = "found token $currentToken1485 unexpectedly in node 1485, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1486(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1487(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1488(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1489(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1490(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1491(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode447()
        userCode448()
        return 1450
    }

    private fun parserDefinedNode1495(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 274
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode387()
        return 1472
    }

    private fun parserDefinedNode1496(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode381()
        return 1577
    }

    private fun parserDefinedNode1497(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(222)
        }
        val currentToken1497: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1497) {
            42 -> {
                userCode28()
                userCode146()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1578
            }
            else -> {
                parsererror = "found token $currentToken1497 unexpectedly in node 1497, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1498(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(222)
        }
        val currentToken1498: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1498) {
            42 -> {
                userCode28()
                userCode148()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1579
            }
            else -> {
                parsererror = "found token $currentToken1498 unexpectedly in node 1498, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1499(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 420
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode271()
        return 771
    }

    private fun parserDefinedNode1503(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            220 -> {
                return 341
            }
            250 -> {
                return 343
            }
            340 -> {
                return 338
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1503, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1506(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1506: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1506) {
            28 -> {
                userCode47()
                userCode636()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1584
            }
            else -> {
                parsererror = "found token $currentToken1506 unexpectedly in node 1506, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1507(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 24
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1551
    }

    private fun parserDefinedNode1508(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 25
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1509(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1509: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1509) {
            28 -> {
                userCode47()
                userCode640()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1510
            }
            else -> {
                parsererror = "found token $currentToken1509 unexpectedly in node 1509, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1510(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 27
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1511(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1511: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1511) {
            28 -> {
                userCode47()
                userCode643()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1512
            }
            else -> {
                parsererror = "found token $currentToken1511 unexpectedly in node 1511, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1512(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 29
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1513(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1513: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1513) {
            28 -> {
                userCode47()
                userCode646()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1514
            }
            else -> {
                parsererror = "found token $currentToken1513 unexpectedly in node 1513, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1514(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 31
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1515(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1515: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1515) {
            28 -> {
                userCode47()
                userCode633()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1516
            }
            else -> {
                parsererror = "found token $currentToken1515 unexpectedly in node 1515, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1516(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 33
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1517(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1517: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1517) {
            28 -> {
                userCode47()
                userCode649()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1518
            }
            else -> {
                parsererror = "found token $currentToken1517 unexpectedly in node 1517, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1518(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 35
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1519(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(29)
        }
        val currentToken1519: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1519) {
            28 -> {
                userCode47()
                userCode652()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1520
            }
            else -> {
                parsererror = "found token $currentToken1519 unexpectedly in node 1519, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1520(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 37
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1521(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 74
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1522(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(121)
        }
        val currentToken1522: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1522) {
            157 -> {
                userCode242()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1586
            }
            else -> {
                parsererror = "found token $currentToken1522 unexpectedly in node 1522, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1524(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(103)
        }
        val currentToken1524: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1524) {
            152, 153, 30, 154, 18, 25, 19 -> {
                return 1560
            }
            23, 24 -> {
                return 1561
            }
            else -> {
                parsererror = "found token $currentToken1524 unexpectedly in node 1524, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1525(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 847
    }

    private fun parserDefinedNode1527(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(121)
        }
        val currentToken1527: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1527) {
            157 -> {
                userCode310()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1590
            }
            else -> {
                parsererror = "found token $currentToken1527 unexpectedly in node 1527, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1529(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(121)
        }
        val currentToken1529: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1529) {
            157 -> {
                userCode217()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1593
            }
            else -> {
                parsererror = "found token $currentToken1529 unexpectedly in node 1529, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1531(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 306
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 636
    }

    private fun parserDefinedNode1532(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 850
    }

    private fun parserDefinedNode1534(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 362
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode449()
        return 1598
    }

    private fun parserDefinedNode1535(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 364
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode451()
        return 1599
    }

    private fun parserDefinedNode1536(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 366
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode453()
        return 1600
    }

    private fun parserDefinedNode1537(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 368
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode455()
        return 1601
    }

    private fun parserDefinedNode1538(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 370
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode457()
        return 1602
    }

    private fun parserDefinedNode1539(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 372
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode459()
        return 1603
    }

    private fun parserDefinedNode1540(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 374
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode461()
        return 1604
    }

    private fun parserDefinedNode1541(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 376
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode463()
        return 1605
    }

    private fun parserDefinedNode1543(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            11 -> {
                userCode438()
                userCode439()
                return 1606
            }
            378 -> {
                userCode440()
                return 1606
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1543, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1544(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 263
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1576
    }

    private fun parserDefinedNode1548(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1548: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1548) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1580
            }
            else -> {
                parsererror = "found token $currentToken1548 unexpectedly in node 1548, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1549(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(255)
        }
        val currentToken1549: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1549) {
            159 -> {
                return 1581
            }
            160 -> {
                return 1582
            }
            68, 55, 146, 82, 26, 69, 37, 38, 154, 18, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 30, 36, 70, 71, 23, 24, 84, 39, 40, 41, 156, 152, 72, 73, 74, 75, 76, 77, 78, 79, 157, 80, 153, 81, 35, 83, 62, 63, 64, 65, 66, 61, 20 -> {
                userCode666()
                return 398
            }
            else -> {
                parsererror = "found token $currentToken1549 unexpectedly in node 1549, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1551(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(19)
        }
        val currentToken1551: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1551) {
            26 -> {
                userCode638()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1620
            }
            else -> {
                parsererror = "found token $currentToken1551 unexpectedly in node 1551, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1559(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            312 -> {
                userCode256()
                userCode257()
                userCode258()
                return 1559
            }
            243 -> {
                userCode243()
                userCode244()
                userCode245()
                return 371
            }
            333 -> {
                userCode249()
                userCode250()
                userCode251()
                return 371
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1559, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1560(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 288
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode369()
        return 845
    }

    private fun parserDefinedNode1561(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 289
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode371()
        return 846
    }

    private fun parserDefinedNode1563(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            402 -> {
                userCode316()
                userCode317()
                userCode318()
                return 1563
            }
            395 -> {
                userCode311()
                userCode312()
                return 235
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1563, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1565(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            452 -> {
                userCode236()
                userCode237()
                userCode238()
                return 1565
            }
            450 -> {
                userCode218()
                userCode219()
                userCode220()
                return 294
            }
            455 -> {
                userCode231()
                userCode232()
                return 715
            }
            456 -> {
                userCode225()
                userCode226()
                userCode227()
                return 294
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1565, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1576(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(256)
        }
        val currentToken1576: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1576) {
            18, 25, 19 -> {
                return 1607
            }
            154 -> {
                return 1608
            }
            153 -> {
                return 1609
            }
            30 -> {
                return 1610
            }
            else -> {
                parsererror = "found token $currentToken1576 unexpectedly in node 1576, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1577(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            272 -> {
                return 1611
            }
            258 -> {
                userCode370()
                return 1639
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1577, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1578(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            206 -> {
                userCode136()
                userCode137()
                return 1640
            }
            209 -> {
                userCode143()
                userCode144()
                return 1641
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1578, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1579(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            207 -> {
                userCode138()
                userCode139()
                return 1641
            }
            208 -> {
                userCode141()
                userCode142()
                return 1642
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1579, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1580(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1581(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 218
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode667()
        return 1643
    }

    private fun parserDefinedNode1582(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(257)
        }
        val currentToken1582: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1582) {
            160 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1619
            }
            else -> {
                parsererror = "found token $currentToken1582 unexpectedly in node 1582, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1584(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(258)
        }
        val currentToken1584: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1584) {
            26 -> {
                return 1507
            }
            153, 70, 71, 30, 37, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 79, 23, 24, 139, 140, 141, 142, 143, 144, 145, 18, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 25, 19 -> {
                return 1508
            }
            else -> {
                parsererror = "found token $currentToken1584 unexpectedly in node 1584, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1586(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(71)
        }
        val currentToken1586: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1586) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 1621
            }
            55, 62, 63, 35, 64, 65, 66, 61, 20 -> {
                userCode257()
                userCode258()
                return 1559
            }
            else -> {
                parsererror = "found token $currentToken1586 unexpectedly in node 1586, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1590(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(54)
        }
        val currentToken1590: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1590) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 1623
            }
            55 -> {
                userCode317()
                userCode318()
                return 1563
            }
            else -> {
                parsererror = "found token $currentToken1590 unexpectedly in node 1590, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1593(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(67)
        }
        val currentToken1593: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1593) {
            30, 36, 23, 24, 39, 37, 38, 18, 40, 41, 25, 19, 51, 52, 53, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50 -> {
                return 1625
            }
            55, 35 -> {
                userCode237()
                userCode238()
                return 1565
            }
            else -> {
                parsererror = "found token $currentToken1593 unexpectedly in node 1593, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1598(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(259)
        }
        val currentToken1598: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1598) {
            72 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1627
            }
            else -> {
                parsererror = "found token $currentToken1598 unexpectedly in node 1598, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1599(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(260)
        }
        val currentToken1599: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1599) {
            73 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1628
            }
            else -> {
                parsererror = "found token $currentToken1599 unexpectedly in node 1599, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1600(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(261)
        }
        val currentToken1600: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1600) {
            74 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1629
            }
            else -> {
                parsererror = "found token $currentToken1600 unexpectedly in node 1600, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1601(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(262)
        }
        val currentToken1601: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1601) {
            75 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1630
            }
            else -> {
                parsererror = "found token $currentToken1601 unexpectedly in node 1601, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1602(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(263)
        }
        val currentToken1602: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1602) {
            76 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1631
            }
            else -> {
                parsererror = "found token $currentToken1602 unexpectedly in node 1602, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1603(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(264)
        }
        val currentToken1603: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1603) {
            77 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1632
            }
            else -> {
                parsererror = "found token $currentToken1603 unexpectedly in node 1603, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1604(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(265)
        }
        val currentToken1604: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1604) {
            78 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1633
            }
            else -> {
                parsererror = "found token $currentToken1604 unexpectedly in node 1604, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1605(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(211)
        }
        val currentToken1605: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1605) {
            79 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1634
            }
            else -> {
                parsererror = "found token $currentToken1605 unexpectedly in node 1605, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1606(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(266)
        }
        val currentToken1606: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1606) {
            80 -> {
                return 1635
            }
            81, 68, 82, 83, 84 -> {
                userCode441()
                return 1647
            }
            else -> {
                parsererror = "found token $currentToken1606 unexpectedly in node 1606, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1607(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 264
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1608(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 265
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 853
    }

    private fun parserDefinedNode1609(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(242)
        }
        val currentToken1609: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1609) {
            153 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1637
            }
            else -> {
                parsererror = "found token $currentToken1609 unexpectedly in node 1609, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1610(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1610: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1610) {
            30 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1638
            }
            else -> {
                parsererror = "found token $currentToken1610 unexpectedly in node 1610, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1611(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1611: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1611) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 344
            }
            else -> {
                parsererror = "found token $currentToken1611 unexpectedly in node 1611, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1617(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1619(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 219
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 166
    }

    private fun parserDefinedNode1620(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode637()
        return 1655
    }

    private fun parserDefinedNode1621(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 312
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode253()
        return 421
    }

    private fun parserDefinedNode1623(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 402
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode313()
        return 257
    }

    private fun parserDefinedNode1625(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 452
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode233()
        return 316
    }

    private fun parserDefinedNode1627(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 363
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1628(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 365
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1629(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 367
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1630(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 369
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1631(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 371
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1632(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 373
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode465()
        return 753
    }

    private fun parserDefinedNode1633(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 375
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1328
    }

    private fun parserDefinedNode1634(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(265)
        }
        val currentToken1634: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1634) {
            78 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1645
            }
            else -> {
                parsererror = "found token $currentToken1634 unexpectedly in node 1634, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1635(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(267)
        }
        val currentToken1635: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1635) {
            80 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1646
            }
            else -> {
                parsererror = "found token $currentToken1635 unexpectedly in node 1635, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1637(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 266
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1648
    }

    private fun parserDefinedNode1638(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 272
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode380()
        return 1116
    }

    private fun parserDefinedNode1639(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            257 -> {
                userCode359()
                return 497
            }
            288 -> {
                userCode364()
                return 498
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1639, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1640(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(268)
        }
        val currentToken1640: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1640) {
            60 -> {
                return 1649
            }
            61, 55, -2 -> {
                userCode139()
                return 1641
            }
            else -> {
                parsererror = "found token $currentToken1640 unexpectedly in node 1640, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1641(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode109()
        userCode110()
        return 1015
    }

    private fun parserDefinedNode1642(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(269)
        }
        val currentToken1642: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1642) {
            59 -> {
                return 1652
            }
            61, 55, -2 -> {
                userCode144()
                return 1641
            }
            else -> {
                parsererror = "found token $currentToken1642 unexpectedly in node 1642, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1643(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(270)
        }
        val currentToken1643: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1643) {
            159 -> {
                userCode28()
                userCode668()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1660
            }
            else -> {
                parsererror = "found token $currentToken1643 unexpectedly in node 1643, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1645(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 377
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 1328
    }

    private fun parserDefinedNode1646(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 378
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode442()
        return 478
    }

    private fun parserDefinedNode1647(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            10 -> {
                userCode433()
                userCode434()
                return 1662
            }
            379 -> {
                userCode435()
                return 1662
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1647, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1648(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(271)
        }
        val currentToken1648: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1648) {
            152, 154, 18, 25, 19 -> {
                return 1658
            }
            30 -> {
                return 1659
            }
            else -> {
                parsererror = "found token $currentToken1648 unexpectedly in node 1648, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1649(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 207
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode147()
        return 1456
    }

    private fun parserDefinedNode1652(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 209
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode145()
        return 1455
    }

    private fun parserDefinedNode1655(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1655: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1655) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1661
            }
            else -> {
                parsererror = "found token $currentToken1655 unexpectedly in node 1655, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1658(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 267
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode409()
        return 873
    }

    private fun parserDefinedNode1659(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(53)
        }
        val currentToken1659: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1659) {
            30 -> {
                userCode402()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1666
            }
            else -> {
                parsererror = "found token $currentToken1659 unexpectedly in node 1659, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1660(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode665()
        userCode666()
        return 398
    }

    private fun parserDefinedNode1661(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1662(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(272)
        }
        val currentToken1662: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1662) {
            81 -> {
                return 1664
            }
            68, 82, 83, 84 -> {
                userCode436()
                return 1668
            }
            else -> {
                parsererror = "found token $currentToken1662 unexpectedly in node 1662, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1664(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(273)
        }
        val currentToken1664: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1664) {
            81 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1667
            }
            else -> {
                parsererror = "found token $currentToken1664 unexpectedly in node 1664, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1666(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(274)
        }
        val currentToken1666: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1666) {
            152, 154, 18, 25, 19 -> {
                userCode403()
                return 1671
            }
            68 -> {
                return 657
            }
            else -> {
                parsererror = "found token $currentToken1666 unexpectedly in node 1666, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1667(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 379
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode437()
        return 366
    }

    private fun parserDefinedNode1668(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        userCode431()
        return 1672
    }

    private fun parserDefinedNode1671(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 270
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode409()
        return 873
    }

    private fun parserDefinedNode1672(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            20 -> {
                userCode501()
                return 1751
            }
            25 -> {
                userCode637()
                return 1655
            }
            27 -> {
                userCode641()
                return 1752
            }
            29 -> {
                userCode644()
                return 1753
            }
            31 -> {
                userCode647()
                return 1754
            }
            33 -> {
                userCode634()
                return 1755
            }
            35 -> {
                userCode650()
                return 1756
            }
            37 -> {
                userCode653()
                userCode654()
                return 1757
            }
            44 -> {
                userCode583()
                return 1758
            }
            46 -> {
                userCode585()
                return 1759
            }
            48 -> {
                userCode587()
                return 1760
            }
            49 -> {
                userCode588()
                return 1761
            }
            51 -> {
                userCode590()
                return 1762
            }
            55 -> {
                userCode594()
                return 1763
            }
            57 -> {
                userCode596()
                return 1764
            }
            59 -> {
                return 1687
            }
            64 -> {
                userCode602()
                return 1765
            }
            66 -> {
                userCode604()
                return 1766
            }
            68 -> {
                userCode608()
                return 1767
            }
            70 -> {
                userCode610()
                return 1768
            }
            74 -> {
                userCode306()
                userCode302()
                return 1769
            }
            75 -> {
                userCode307()
                return 1769
            }
            77 -> {
                userCode618()
                return 1770
            }
            78 -> {
                userCode619()
                userCode614()
                return 1771
            }
            79 -> {
                userCode620()
                userCode621()
                return 1772
            }
            81 -> {
                userCode560()
                return 1773
            }
            83 -> {
                userCode623()
                return 1774
            }
            84 -> {
                userCode624()
                return 1775
            }
            85 -> {
                userCode625()
                userCode614()
                return 1776
            }
            86 -> {
                userCode626()
                userCode627()
                return 1777
            }
            88 -> {
                userCode562()
                return 1778
            }
            90 -> {
                userCode606()
                return 1779
            }
            92 -> {
                userCode570()
                return 1780
            }
            94 -> {
                userCode572()
                return 1781
            }
            95 -> {
                userCode573()
                return 1782
            }
            97 -> {
                userCode575()
                return 1783
            }
            98 -> {
                userCode576()
                return 1784
            }
            100 -> {
                userCode578()
                return 1785
            }
            101 -> {
                userCode579()
                return 1786
            }
            103 -> {
                userCode564()
                return 1787
            }
            104 -> {
                userCode565()
                return 1788
            }
            106 -> {
                userCode567()
                return 1789
            }
            107 -> {
                userCode568()
                return 1790
            }
            109 -> {
                userCode503()
                return 1791
            }
            111 -> {
                userCode505()
                return 1792
            }
            113 -> {
                userCode581()
                return 1793
            }
            115 -> {
                userCode507()
                return 1794
            }
            117 -> {
                userCode543()
                return 1795
            }
            119 -> {
                userCode552()
                return 1796
            }
            121 -> {
                userCode554()
                return 1797
            }
            123 -> {
                userCode556()
                return 1798
            }
            131 -> {
                userCode520()
                return 1799
            }
            133 -> {
                userCode526()
                return 1800
            }
            135 -> {
                userCode545()
                return 1801
            }
            137 -> {
                userCode528()
                return 1802
            }
            139 -> {
                userCode530()
                return 1803
            }
            143 -> {
                userCode534()
                return 1804
            }
            144 -> {
                userCode535()
                return 1805
            }
            145 -> {
                userCode536()
                return 1806
            }
            147 -> {
                userCode538()
                return 1807
            }
            148 -> {
                userCode539()
                return 1808
            }
            150 -> {
                userCode547()
                return 1809
            }
            151 -> {
                userCode548()
                return 1810
            }
            153 -> {
                userCode511()
                return 1811
            }
            154 -> {
                userCode512()
                return 1812
            }
            156 -> {
                userCode514()
                return 1813
            }
            158 -> {
                userCode541()
                return 1814
            }
            160 -> {
                userCode516()
                return 1815
            }
            162 -> {
                userCode518()
                return 1816
            }
            164 -> {
                userCode550()
                return 1817
            }
            166 -> {
                userCode612()
                return 1818
            }
            167 -> {
                userCode613()
                userCode614()
                return 1819
            }
            168 -> {
                userCode615()
                userCode616()
                return 1820
            }
            187 -> {
                userCode301()
                userCode302()
                return 1821
            }
            188 -> {
                userCode303()
                return 1821
            }
            189 -> {
                userCode116()
                userCode117()
                return 1822
            }
            330 -> {
                userCode269()
                return 1823
            }
            8 -> {
                userCode52()
                return 1824
            }
            382 -> {
                userCode52()
                return 1825
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1672, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1687(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1687: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1687) {
            68 -> {
                userCode598()
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1133
            }
            else -> {
                parsererror = "found token $currentToken1687 unexpectedly in node 1687, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1751(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1751: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1751) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1826
            }
            else -> {
                parsererror = "found token $currentToken1751 unexpectedly in node 1751, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1752(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1752: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1752) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1827
            }
            else -> {
                parsererror = "found token $currentToken1752 unexpectedly in node 1752, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1753(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1753: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1753) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1828
            }
            else -> {
                parsererror = "found token $currentToken1753 unexpectedly in node 1753, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1754(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1754: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1754) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1829
            }
            else -> {
                parsererror = "found token $currentToken1754 unexpectedly in node 1754, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1755(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1755: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1755) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1830
            }
            else -> {
                parsererror = "found token $currentToken1755 unexpectedly in node 1755, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1756(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1756: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1756) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1831
            }
            else -> {
                parsererror = "found token $currentToken1756 unexpectedly in node 1756, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1757(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(275)
        }
        val currentToken1757: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1757) {
            84 -> {
                return 1832
            }
            68 -> {
                userCode656()
                return 1548
            }
            else -> {
                parsererror = "found token $currentToken1757 unexpectedly in node 1757, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1758(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1758: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1758) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1834
            }
            else -> {
                parsererror = "found token $currentToken1758 unexpectedly in node 1758, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1759(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1759: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1759) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1835
            }
            else -> {
                parsererror = "found token $currentToken1759 unexpectedly in node 1759, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1760(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1760: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1760) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1836
            }
            else -> {
                parsererror = "found token $currentToken1760 unexpectedly in node 1760, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1761(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1761: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1761) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1837
            }
            else -> {
                parsererror = "found token $currentToken1761 unexpectedly in node 1761, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1762(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1762: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1762) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1838
            }
            else -> {
                parsererror = "found token $currentToken1762 unexpectedly in node 1762, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1763(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1763: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1763) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1839
            }
            else -> {
                parsererror = "found token $currentToken1763 unexpectedly in node 1763, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1764(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1764: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1764) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1840
            }
            else -> {
                parsererror = "found token $currentToken1764 unexpectedly in node 1764, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1765(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1765: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1765) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1841
            }
            else -> {
                parsererror = "found token $currentToken1765 unexpectedly in node 1765, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1766(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1766: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1766) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1842
            }
            else -> {
                parsererror = "found token $currentToken1766 unexpectedly in node 1766, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1767(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1767: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1767) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1843
            }
            else -> {
                parsererror = "found token $currentToken1767 unexpectedly in node 1767, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1768(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1768: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1768) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1844
            }
            else -> {
                parsererror = "found token $currentToken1768 unexpectedly in node 1768, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1769(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(276)
        }
        val currentToken1769: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1769) {
            82 -> {
                return 1845
            }
            68 -> {
                userCode308()
                return 1910
            }
            else -> {
                parsererror = "found token $currentToken1769 unexpectedly in node 1769, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1770(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1770: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1770) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1847
            }
            else -> {
                parsererror = "found token $currentToken1770 unexpectedly in node 1770, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1771(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(276)
        }
        val currentToken1771: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1771) {
            82 -> {
                return 1848
            }
            68 -> {
                userCode621()
                return 1772
            }
            else -> {
                parsererror = "found token $currentToken1771 unexpectedly in node 1771, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1772(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1772: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1772) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1850
            }
            else -> {
                parsererror = "found token $currentToken1772 unexpectedly in node 1772, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1773(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1773: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1773) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1851
            }
            else -> {
                parsererror = "found token $currentToken1773 unexpectedly in node 1773, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1774(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1774: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1774) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1852
            }
            else -> {
                parsererror = "found token $currentToken1774 unexpectedly in node 1774, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1775(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1775: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1775) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1853
            }
            else -> {
                parsererror = "found token $currentToken1775 unexpectedly in node 1775, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1776(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(276)
        }
        val currentToken1776: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1776) {
            82 -> {
                return 1854
            }
            68 -> {
                userCode627()
                return 1777
            }
            else -> {
                parsererror = "found token $currentToken1776 unexpectedly in node 1776, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1777(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1777: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1777) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1856
            }
            else -> {
                parsererror = "found token $currentToken1777 unexpectedly in node 1777, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1778(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1778: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1778) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1857
            }
            else -> {
                parsererror = "found token $currentToken1778 unexpectedly in node 1778, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1779(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1779: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1779) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1858
            }
            else -> {
                parsererror = "found token $currentToken1779 unexpectedly in node 1779, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1780(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1780: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1780) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1859
            }
            else -> {
                parsererror = "found token $currentToken1780 unexpectedly in node 1780, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1781(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1781: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1781) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1860
            }
            else -> {
                parsererror = "found token $currentToken1781 unexpectedly in node 1781, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1782(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1782: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1782) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1861
            }
            else -> {
                parsererror = "found token $currentToken1782 unexpectedly in node 1782, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1783(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1783: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1783) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1862
            }
            else -> {
                parsererror = "found token $currentToken1783 unexpectedly in node 1783, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1784(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1784: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1784) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1863
            }
            else -> {
                parsererror = "found token $currentToken1784 unexpectedly in node 1784, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1785(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1785: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1785) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1864
            }
            else -> {
                parsererror = "found token $currentToken1785 unexpectedly in node 1785, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1786(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1786: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1786) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1865
            }
            else -> {
                parsererror = "found token $currentToken1786 unexpectedly in node 1786, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1787(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1787: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1787) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1866
            }
            else -> {
                parsererror = "found token $currentToken1787 unexpectedly in node 1787, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1788(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1788: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1788) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1867
            }
            else -> {
                parsererror = "found token $currentToken1788 unexpectedly in node 1788, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1789(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1789: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1789) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1868
            }
            else -> {
                parsererror = "found token $currentToken1789 unexpectedly in node 1789, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1790(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1790: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1790) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1869
            }
            else -> {
                parsererror = "found token $currentToken1790 unexpectedly in node 1790, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1791(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1791: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1791) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1870
            }
            else -> {
                parsererror = "found token $currentToken1791 unexpectedly in node 1791, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1792(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1792: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1792) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1871
            }
            else -> {
                parsererror = "found token $currentToken1792 unexpectedly in node 1792, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1793(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1793: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1793) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1872
            }
            else -> {
                parsererror = "found token $currentToken1793 unexpectedly in node 1793, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1794(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1794: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1794) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1873
            }
            else -> {
                parsererror = "found token $currentToken1794 unexpectedly in node 1794, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1795(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1795: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1795) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1874
            }
            else -> {
                parsererror = "found token $currentToken1795 unexpectedly in node 1795, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1796(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1796: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1796) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1875
            }
            else -> {
                parsererror = "found token $currentToken1796 unexpectedly in node 1796, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1797(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1797: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1797) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1876
            }
            else -> {
                parsererror = "found token $currentToken1797 unexpectedly in node 1797, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1798(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1798: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1798) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1877
            }
            else -> {
                parsererror = "found token $currentToken1798 unexpectedly in node 1798, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1799(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1799: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1799) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1878
            }
            else -> {
                parsererror = "found token $currentToken1799 unexpectedly in node 1799, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1800(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1800: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1800) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1879
            }
            else -> {
                parsererror = "found token $currentToken1800 unexpectedly in node 1800, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1801(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1801: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1801) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1880
            }
            else -> {
                parsererror = "found token $currentToken1801 unexpectedly in node 1801, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1802(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1802: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1802) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1881
            }
            else -> {
                parsererror = "found token $currentToken1802 unexpectedly in node 1802, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1803(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1803: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1803) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1882
            }
            else -> {
                parsererror = "found token $currentToken1803 unexpectedly in node 1803, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1804(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1804: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1804) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1883
            }
            else -> {
                parsererror = "found token $currentToken1804 unexpectedly in node 1804, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1805(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1805: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1805) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1884
            }
            else -> {
                parsererror = "found token $currentToken1805 unexpectedly in node 1805, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1806(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1806: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1806) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1885
            }
            else -> {
                parsererror = "found token $currentToken1806 unexpectedly in node 1806, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1807(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1807: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1807) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1886
            }
            else -> {
                parsererror = "found token $currentToken1807 unexpectedly in node 1807, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1808(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1808: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1808) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1887
            }
            else -> {
                parsererror = "found token $currentToken1808 unexpectedly in node 1808, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1809(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1809: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1809) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1888
            }
            else -> {
                parsererror = "found token $currentToken1809 unexpectedly in node 1809, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1810(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1810: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1810) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1889
            }
            else -> {
                parsererror = "found token $currentToken1810 unexpectedly in node 1810, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1811(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1811: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1811) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1890
            }
            else -> {
                parsererror = "found token $currentToken1811 unexpectedly in node 1811, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1812(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1812: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1812) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1891
            }
            else -> {
                parsererror = "found token $currentToken1812 unexpectedly in node 1812, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1813(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1813: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1813) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1892
            }
            else -> {
                parsererror = "found token $currentToken1813 unexpectedly in node 1813, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1814(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1814: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1814) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1893
            }
            else -> {
                parsererror = "found token $currentToken1814 unexpectedly in node 1814, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1815(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1815: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1815) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1894
            }
            else -> {
                parsererror = "found token $currentToken1815 unexpectedly in node 1815, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1816(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1816: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1816) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1895
            }
            else -> {
                parsererror = "found token $currentToken1816 unexpectedly in node 1816, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1817(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1817: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1817) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1896
            }
            else -> {
                parsererror = "found token $currentToken1817 unexpectedly in node 1817, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1818(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1818: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1818) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1897
            }
            else -> {
                parsererror = "found token $currentToken1818 unexpectedly in node 1818, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1819(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(276)
        }
        val currentToken1819: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1819) {
            82 -> {
                return 1898
            }
            68 -> {
                userCode616()
                return 1820
            }
            else -> {
                parsererror = "found token $currentToken1819 unexpectedly in node 1819, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1820(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1820: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1820) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1900
            }
            else -> {
                parsererror = "found token $currentToken1820 unexpectedly in node 1820, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1821(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(276)
        }
        val currentToken1821: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1821) {
            82 -> {
                return 1901
            }
            68 -> {
                userCode304()
                return 1915
            }
            else -> {
                parsererror = "found token $currentToken1821 unexpectedly in node 1821, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1822(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(277)
        }
        val currentToken1822: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1822) {
            83 -> {
                return 1903
            }
            68 -> {
                userCode119()
                return 374
            }
            else -> {
                parsererror = "found token $currentToken1822 unexpectedly in node 1822, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1823(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(278)
        }
        val currentToken1823: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1823) {
            83 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1905
            }
            else -> {
                parsererror = "found token $currentToken1823 unexpectedly in node 1823, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1824(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(278)
        }
        val currentToken1824: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1824) {
            83 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1906
            }
            else -> {
                parsererror = "found token $currentToken1824 unexpectedly in node 1824, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1825(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(278)
        }
        val currentToken1825: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1825) {
            83 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1907
            }
            else -> {
                parsererror = "found token $currentToken1825 unexpectedly in node 1825, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1826(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        when ((parserDefinedStackData[parserDefinedStackPosition])) {
            19 -> {
                return 338
            }
            196 -> {
                return 549
            }
            else -> {
                parsererror = "found stack ${(parserDefinedStackData[parserDefinedStackPosition])} unexpectedly in node 1826, at position $bufferDefinedPosition. stack was ${parserDefinedStackData.toList().subList(0, parserDefinedStackPosition)}"
                return -1
            }
        }
    }

    private fun parserDefinedNode1827(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1828(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1829(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1830(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1831(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 1617
    }

    private fun parserDefinedNode1832(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(99)
        }
        val currentToken1832: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1832) {
            84 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1908
            }
            else -> {
                parsererror = "found token $currentToken1832 unexpectedly in node 1832, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1834(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1835(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1836(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 49
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1837(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1838(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1839(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1840(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1841(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1842(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1843(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1844(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1845(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1845: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1845) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1909
            }
            else -> {
                parsererror = "found token $currentToken1845 unexpectedly in node 1845, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1847(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 78
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1848(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1848: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1848) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1911
            }
            else -> {
                parsererror = "found token $currentToken1848 unexpectedly in node 1848, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1850(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1851(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1852(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 84
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1853(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 85
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1854(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1854: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1854) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1912
            }
            else -> {
                parsererror = "found token $currentToken1854 unexpectedly in node 1854, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1856(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1857(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1858(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1859(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1860(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 95
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1861(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1862(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 98
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1863(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1864(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 101
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1865(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1866(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 104
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1867(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1868(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 107
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1869(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1870(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1871(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1872(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1873(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1874(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1875(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1876(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1877(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1878(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1879(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1880(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1881(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1882(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1883(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 144
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1884(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 145
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1885(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1886(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 148
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1887(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1888(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 151
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1889(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1890(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 154
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1891(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1892(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1893(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1894(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1895(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1896(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1897(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 167
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1898(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1898: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1898) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1913
            }
            else -> {
                parsererror = "found token $currentToken1898 unexpectedly in node 1898, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1900(): Int {
        parserDefinedStackPosition = (parserDefinedStackPosition - 1)
        return 486
    }

    private fun parserDefinedNode1901(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(120)
        }
        val currentToken1901: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1901) {
            82 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1914
            }
            else -> {
                parsererror = "found token $currentToken1901 unexpectedly in node 1901, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1903(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(278)
        }
        val currentToken1903: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1903) {
            83 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1916
            }
            else -> {
                parsererror = "found token $currentToken1903 unexpectedly in node 1903, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1905(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 331
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1906(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 380
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1907(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 383
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1908(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(279)
        }
        val currentToken1908: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1908) {
            161 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1917
            }
            else -> {
                parsererror = "found token $currentToken1908 unexpectedly in node 1908, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1909(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 75
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1910(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1910: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1910) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 997
            }
            else -> {
                parsererror = "found token $currentToken1910 unexpectedly in node 1910, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1911(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 79
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1912(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 86
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1913(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 168
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1914(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 188
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        userCode430()
        return 254
    }

    private fun parserDefinedNode1915(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(78)
        }
        val currentToken1915: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1915) {
            68 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1001
            }
            else -> {
                parsererror = "found token $currentToken1915 unexpectedly in node 1915, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1916(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 190
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 165
    }

    private fun parserDefinedNode1917(): Int {
        if ((scannerDefinedTokenFoundAvailable <= 0)) {
            scannerDefinedNextToken(259)
        }
        val currentToken1917: Int = (scannerDefinedTokenFoundType[scannerDefinedTokenFoundReadOffset])
        when (currentToken1917) {
            72 -> {
                scannerDefinedTokenFoundReadOffset = ((scannerDefinedTokenFoundReadOffset + 1) % 4)
                scannerDefinedTokenFoundAvailable = (scannerDefinedTokenFoundAvailable - 1)
                return 1918
            }
            else -> {
                parsererror = "found token $currentToken1917 unexpectedly in node 1917, at position $bufferDefinedPosition"
                return -1
            }
        }
    }

    private fun parserDefinedNode1918(): Int {
        parserDefinedStackData[parserDefinedStackPosition] = 38
        parserDefinedStackPosition = (parserDefinedStackPosition + 1)
        return 754
    }

    public fun parserDefinedParse() {
        var node: Int = 0
        while ((node >= 0)) {
            when (node) {
                0 -> {
                    node = parserDefinedNode0()
                }
                1 -> {
                    node = parserDefinedNode1()
                }
                3 -> {
                    node = parserDefinedNode3()
                }
                4 -> {
                    node = parserDefinedNode4()
                }
                5 -> {
                    node = parserDefinedNode5()
                }
                6 -> {
                    node = parserDefinedNode6()
                }
                7 -> {
                    node = parserDefinedNode7()
                }
                13 -> {
                    node = parserDefinedNode13()
                }
                14 -> {
                    node = parserDefinedNode14()
                }
                15 -> {
                    node = parserDefinedNode15()
                }
                16 -> {
                    node = parserDefinedNode16()
                }
                17 -> {
                    node = parserDefinedNode17()
                }
                18 -> {
                    node = parserDefinedNode18()
                }
                19 -> {
                    node = parserDefinedNode19()
                }
                25 -> {
                    node = parserDefinedNode25()
                }
                26 -> {
                    node = parserDefinedNode26()
                }
                27 -> {
                    node = parserDefinedNode27()
                }
                28 -> {
                    node = parserDefinedNode28()
                }
                29 -> {
                    node = parserDefinedNode29()
                }
                30 -> {
                    node = parserDefinedNode30()
                }
                31 -> {
                    node = parserDefinedNode31()
                }
                32 -> {
                    node = parserDefinedNode32()
                }
                33 -> {
                    node = parserDefinedNode33()
                }
                37 -> {
                    node = parserDefinedNode37()
                }
                44 -> {
                    node = parserDefinedNode44()
                }
                45 -> {
                    node = parserDefinedNode45()
                }
                46 -> {
                    node = parserDefinedNode46()
                }
                49 -> {
                    node = parserDefinedNode49()
                }
                50 -> {
                    node = parserDefinedNode50()
                }
                51 -> {
                    node = parserDefinedNode51()
                }
                52 -> {
                    node = parserDefinedNode52()
                }
                53 -> {
                    node = parserDefinedNode53()
                }
                54 -> {
                    node = parserDefinedNode54()
                }
                55 -> {
                    node = parserDefinedNode55()
                }
                57 -> {
                    node = parserDefinedNode57()
                }
                58 -> {
                    node = parserDefinedNode58()
                }
                60 -> {
                    node = parserDefinedNode60()
                }
                61 -> {
                    node = parserDefinedNode61()
                }
                62 -> {
                    node = parserDefinedNode62()
                }
                63 -> {
                    node = parserDefinedNode63()
                }
                64 -> {
                    node = parserDefinedNode64()
                }
                65 -> {
                    node = parserDefinedNode65()
                }
                66 -> {
                    node = parserDefinedNode66()
                }
                67 -> {
                    node = parserDefinedNode67()
                }
                68 -> {
                    node = parserDefinedNode68()
                }
                69 -> {
                    node = parserDefinedNode69()
                }
                70 -> {
                    node = parserDefinedNode70()
                }
                71 -> {
                    node = parserDefinedNode71()
                }
                75 -> {
                    node = parserDefinedNode75()
                }
                76 -> {
                    node = parserDefinedNode76()
                }
                84 -> {
                    node = parserDefinedNode84()
                }
                85 -> {
                    node = parserDefinedNode85()
                }
                88 -> {
                    node = parserDefinedNode88()
                }
                89 -> {
                    node = parserDefinedNode89()
                }
                90 -> {
                    node = parserDefinedNode90()
                }
                91 -> {
                    node = parserDefinedNode91()
                }
                92 -> {
                    node = parserDefinedNode92()
                }
                93 -> {
                    node = parserDefinedNode93()
                }
                95 -> {
                    node = parserDefinedNode95()
                }
                96 -> {
                    node = parserDefinedNode96()
                }
                97 -> {
                    node = parserDefinedNode97()
                }
                98 -> {
                    node = parserDefinedNode98()
                }
                99 -> {
                    node = parserDefinedNode99()
                }
                100 -> {
                    node = parserDefinedNode100()
                }
                101 -> {
                    node = parserDefinedNode101()
                }
                104 -> {
                    node = parserDefinedNode104()
                }
                105 -> {
                    node = parserDefinedNode105()
                }
                106 -> {
                    node = parserDefinedNode106()
                }
                107 -> {
                    node = parserDefinedNode107()
                }
                109 -> {
                    node = parserDefinedNode109()
                }
                111 -> {
                    node = parserDefinedNode111()
                }
                113 -> {
                    node = parserDefinedNode113()
                }
                116 -> {
                    node = parserDefinedNode116()
                }
                117 -> {
                    node = parserDefinedNode117()
                }
                118 -> {
                    node = parserDefinedNode118()
                }
                119 -> {
                    node = parserDefinedNode119()
                }
                120 -> {
                    node = parserDefinedNode120()
                }
                121 -> {
                    node = parserDefinedNode121()
                }
                122 -> {
                    node = parserDefinedNode122()
                }
                123 -> {
                    node = parserDefinedNode123()
                }
                124 -> {
                    node = parserDefinedNode124()
                }
                125 -> {
                    node = parserDefinedNode125()
                }
                126 -> {
                    node = parserDefinedNode126()
                }
                127 -> {
                    node = parserDefinedNode127()
                }
                131 -> {
                    node = parserDefinedNode131()
                }
                132 -> {
                    node = parserDefinedNode132()
                }
                133 -> {
                    node = parserDefinedNode133()
                }
                134 -> {
                    node = parserDefinedNode134()
                }
                135 -> {
                    node = parserDefinedNode135()
                }
                136 -> {
                    node = parserDefinedNode136()
                }
                137 -> {
                    node = parserDefinedNode137()
                }
                138 -> {
                    node = parserDefinedNode138()
                }
                140 -> {
                    node = parserDefinedNode140()
                }
                141 -> {
                    node = parserDefinedNode141()
                }
                142 -> {
                    node = parserDefinedNode142()
                }
                143 -> {
                    node = parserDefinedNode143()
                }
                144 -> {
                    node = parserDefinedNode144()
                }
                145 -> {
                    node = parserDefinedNode145()
                }
                146 -> {
                    node = parserDefinedNode146()
                }
                147 -> {
                    node = parserDefinedNode147()
                }
                148 -> {
                    node = parserDefinedNode148()
                }
                149 -> {
                    node = parserDefinedNode149()
                }
                150 -> {
                    node = parserDefinedNode150()
                }
                151 -> {
                    node = parserDefinedNode151()
                }
                152 -> {
                    node = parserDefinedNode152()
                }
                153 -> {
                    node = parserDefinedNode153()
                }
                154 -> {
                    node = parserDefinedNode154()
                }
                155 -> {
                    node = parserDefinedNode155()
                }
                157 -> {
                    node = parserDefinedNode157()
                }
                158 -> {
                    node = parserDefinedNode158()
                }
                159 -> {
                    node = parserDefinedNode159()
                }
                160 -> {
                    node = parserDefinedNode160()
                }
                164 -> {
                    node = parserDefinedNode164()
                }
                165 -> {
                    node = parserDefinedNode165()
                }
                166 -> {
                    node = parserDefinedNode166()
                }
                168 -> {
                    node = parserDefinedNode168()
                }
                169 -> {
                    node = parserDefinedNode169()
                }
                172 -> {
                    node = parserDefinedNode172()
                }
                175 -> {
                    node = parserDefinedNode175()
                }
                180 -> {
                    node = parserDefinedNode180()
                }
                181 -> {
                    node = parserDefinedNode181()
                }
                182 -> {
                    node = parserDefinedNode182()
                }
                184 -> {
                    node = parserDefinedNode184()
                }
                185 -> {
                    node = parserDefinedNode185()
                }
                186 -> {
                    node = parserDefinedNode186()
                }
                187 -> {
                    node = parserDefinedNode187()
                }
                189 -> {
                    node = parserDefinedNode189()
                }
                190 -> {
                    node = parserDefinedNode190()
                }
                191 -> {
                    node = parserDefinedNode191()
                }
                192 -> {
                    node = parserDefinedNode192()
                }
                193 -> {
                    node = parserDefinedNode193()
                }
                194 -> {
                    node = parserDefinedNode194()
                }
                195 -> {
                    node = parserDefinedNode195()
                }
                196 -> {
                    node = parserDefinedNode196()
                }
                197 -> {
                    node = parserDefinedNode197()
                }
                198 -> {
                    node = parserDefinedNode198()
                }
                199 -> {
                    node = parserDefinedNode199()
                }
                200 -> {
                    node = parserDefinedNode200()
                }
                201 -> {
                    node = parserDefinedNode201()
                }
                202 -> {
                    node = parserDefinedNode202()
                }
                204 -> {
                    node = parserDefinedNode204()
                }
                206 -> {
                    node = parserDefinedNode206()
                }
                207 -> {
                    node = parserDefinedNode207()
                }
                209 -> {
                    node = parserDefinedNode209()
                }
                211 -> {
                    node = parserDefinedNode211()
                }
                213 -> {
                    node = parserDefinedNode213()
                }
                217 -> {
                    node = parserDefinedNode217()
                }
                218 -> {
                    node = parserDefinedNode218()
                }
                223 -> {
                    node = parserDefinedNode223()
                }
                224 -> {
                    node = parserDefinedNode224()
                }
                225 -> {
                    node = parserDefinedNode225()
                }
                226 -> {
                    node = parserDefinedNode226()
                }
                227 -> {
                    node = parserDefinedNode227()
                }
                228 -> {
                    node = parserDefinedNode228()
                }
                231 -> {
                    node = parserDefinedNode231()
                }
                233 -> {
                    node = parserDefinedNode233()
                }
                235 -> {
                    node = parserDefinedNode235()
                }
                236 -> {
                    node = parserDefinedNode236()
                }
                237 -> {
                    node = parserDefinedNode237()
                }
                238 -> {
                    node = parserDefinedNode238()
                }
                239 -> {
                    node = parserDefinedNode239()
                }
                240 -> {
                    node = parserDefinedNode240()
                }
                241 -> {
                    node = parserDefinedNode241()
                }
                242 -> {
                    node = parserDefinedNode242()
                }
                243 -> {
                    node = parserDefinedNode243()
                }
                244 -> {
                    node = parserDefinedNode244()
                }
                248 -> {
                    node = parserDefinedNode248()
                }
                249 -> {
                    node = parserDefinedNode249()
                }
                250 -> {
                    node = parserDefinedNode250()
                }
                251 -> {
                    node = parserDefinedNode251()
                }
                252 -> {
                    node = parserDefinedNode252()
                }
                253 -> {
                    node = parserDefinedNode253()
                }
                254 -> {
                    node = parserDefinedNode254()
                }
                257 -> {
                    node = parserDefinedNode257()
                }
                258 -> {
                    node = parserDefinedNode258()
                }
                259 -> {
                    node = parserDefinedNode259()
                }
                260 -> {
                    node = parserDefinedNode260()
                }
                266 -> {
                    node = parserDefinedNode266()
                }
                269 -> {
                    node = parserDefinedNode269()
                }
                270 -> {
                    node = parserDefinedNode270()
                }
                271 -> {
                    node = parserDefinedNode271()
                }
                272 -> {
                    node = parserDefinedNode272()
                }
                274 -> {
                    node = parserDefinedNode274()
                }
                276 -> {
                    node = parserDefinedNode276()
                }
                278 -> {
                    node = parserDefinedNode278()
                }
                279 -> {
                    node = parserDefinedNode279()
                }
                280 -> {
                    node = parserDefinedNode280()
                }
                284 -> {
                    node = parserDefinedNode284()
                }
                285 -> {
                    node = parserDefinedNode285()
                }
                286 -> {
                    node = parserDefinedNode286()
                }
                287 -> {
                    node = parserDefinedNode287()
                }
                288 -> {
                    node = parserDefinedNode288()
                }
                289 -> {
                    node = parserDefinedNode289()
                }
                290 -> {
                    node = parserDefinedNode290()
                }
                291 -> {
                    node = parserDefinedNode291()
                }
                292 -> {
                    node = parserDefinedNode292()
                }
                294 -> {
                    node = parserDefinedNode294()
                }
                295 -> {
                    node = parserDefinedNode295()
                }
                296 -> {
                    node = parserDefinedNode296()
                }
                300 -> {
                    node = parserDefinedNode300()
                }
                301 -> {
                    node = parserDefinedNode301()
                }
                302 -> {
                    node = parserDefinedNode302()
                }
                303 -> {
                    node = parserDefinedNode303()
                }
                304 -> {
                    node = parserDefinedNode304()
                }
                316 -> {
                    node = parserDefinedNode316()
                }
                320 -> {
                    node = parserDefinedNode320()
                }
                321 -> {
                    node = parserDefinedNode321()
                }
                322 -> {
                    node = parserDefinedNode322()
                }
                323 -> {
                    node = parserDefinedNode323()
                }
                325 -> {
                    node = parserDefinedNode325()
                }
                330 -> {
                    node = parserDefinedNode330()
                }
                334 -> {
                    node = parserDefinedNode334()
                }
                336 -> {
                    node = parserDefinedNode336()
                }
                338 -> {
                    node = parserDefinedNode338()
                }
                341 -> {
                    node = parserDefinedNode341()
                }
                343 -> {
                    node = parserDefinedNode343()
                }
                344 -> {
                    node = parserDefinedNode344()
                }
                353 -> {
                    node = parserDefinedNode353()
                }
                354 -> {
                    node = parserDefinedNode354()
                }
                355 -> {
                    node = parserDefinedNode355()
                }
                356 -> {
                    node = parserDefinedNode356()
                }
                357 -> {
                    node = parserDefinedNode357()
                }
                358 -> {
                    node = parserDefinedNode358()
                }
                359 -> {
                    node = parserDefinedNode359()
                }
                360 -> {
                    node = parserDefinedNode360()
                }
                361 -> {
                    node = parserDefinedNode361()
                }
                362 -> {
                    node = parserDefinedNode362()
                }
                363 -> {
                    node = parserDefinedNode363()
                }
                364 -> {
                    node = parserDefinedNode364()
                }
                365 -> {
                    node = parserDefinedNode365()
                }
                366 -> {
                    node = parserDefinedNode366()
                }
                367 -> {
                    node = parserDefinedNode367()
                }
                368 -> {
                    node = parserDefinedNode368()
                }
                369 -> {
                    node = parserDefinedNode369()
                }
                371 -> {
                    node = parserDefinedNode371()
                }
                372 -> {
                    node = parserDefinedNode372()
                }
                373 -> {
                    node = parserDefinedNode373()
                }
                374 -> {
                    node = parserDefinedNode374()
                }
                376 -> {
                    node = parserDefinedNode376()
                }
                377 -> {
                    node = parserDefinedNode377()
                }
                378 -> {
                    node = parserDefinedNode378()
                }
                380 -> {
                    node = parserDefinedNode380()
                }
                381 -> {
                    node = parserDefinedNode381()
                }
                383 -> {
                    node = parserDefinedNode383()
                }
                384 -> {
                    node = parserDefinedNode384()
                }
                389 -> {
                    node = parserDefinedNode389()
                }
                393 -> {
                    node = parserDefinedNode393()
                }
                394 -> {
                    node = parserDefinedNode394()
                }
                395 -> {
                    node = parserDefinedNode395()
                }
                398 -> {
                    node = parserDefinedNode398()
                }
                400 -> {
                    node = parserDefinedNode400()
                }
                401 -> {
                    node = parserDefinedNode401()
                }
                402 -> {
                    node = parserDefinedNode402()
                }
                403 -> {
                    node = parserDefinedNode403()
                }
                404 -> {
                    node = parserDefinedNode404()
                }
                405 -> {
                    node = parserDefinedNode405()
                }
                406 -> {
                    node = parserDefinedNode406()
                }
                407 -> {
                    node = parserDefinedNode407()
                }
                409 -> {
                    node = parserDefinedNode409()
                }
                410 -> {
                    node = parserDefinedNode410()
                }
                411 -> {
                    node = parserDefinedNode411()
                }
                412 -> {
                    node = parserDefinedNode412()
                }
                417 -> {
                    node = parserDefinedNode417()
                }
                418 -> {
                    node = parserDefinedNode418()
                }
                419 -> {
                    node = parserDefinedNode419()
                }
                420 -> {
                    node = parserDefinedNode420()
                }
                421 -> {
                    node = parserDefinedNode421()
                }
                424 -> {
                    node = parserDefinedNode424()
                }
                426 -> {
                    node = parserDefinedNode426()
                }
                427 -> {
                    node = parserDefinedNode427()
                }
                430 -> {
                    node = parserDefinedNode430()
                }
                431 -> {
                    node = parserDefinedNode431()
                }
                432 -> {
                    node = parserDefinedNode432()
                }
                437 -> {
                    node = parserDefinedNode437()
                }
                442 -> {
                    node = parserDefinedNode442()
                }
                443 -> {
                    node = parserDefinedNode443()
                }
                444 -> {
                    node = parserDefinedNode444()
                }
                445 -> {
                    node = parserDefinedNode445()
                }
                446 -> {
                    node = parserDefinedNode446()
                }
                447 -> {
                    node = parserDefinedNode447()
                }
                448 -> {
                    node = parserDefinedNode448()
                }
                449 -> {
                    node = parserDefinedNode449()
                }
                455 -> {
                    node = parserDefinedNode455()
                }
                456 -> {
                    node = parserDefinedNode456()
                }
                457 -> {
                    node = parserDefinedNode457()
                }
                458 -> {
                    node = parserDefinedNode458()
                }
                459 -> {
                    node = parserDefinedNode459()
                }
                462 -> {
                    node = parserDefinedNode462()
                }
                466 -> {
                    node = parserDefinedNode466()
                }
                472 -> {
                    node = parserDefinedNode472()
                }
                475 -> {
                    node = parserDefinedNode475()
                }
                476 -> {
                    node = parserDefinedNode476()
                }
                477 -> {
                    node = parserDefinedNode477()
                }
                478 -> {
                    node = parserDefinedNode478()
                }
                479 -> {
                    node = parserDefinedNode479()
                }
                482 -> {
                    node = parserDefinedNode482()
                }
                483 -> {
                    node = parserDefinedNode483()
                }
                484 -> {
                    node = parserDefinedNode484()
                }
                485 -> {
                    node = parserDefinedNode485()
                }
                486 -> {
                    node = parserDefinedNode486()
                }
                487 -> {
                    node = parserDefinedNode487()
                }
                489 -> {
                    node = parserDefinedNode489()
                }
                492 -> {
                    node = parserDefinedNode492()
                }
                493 -> {
                    node = parserDefinedNode493()
                }
                494 -> {
                    node = parserDefinedNode494()
                }
                495 -> {
                    node = parserDefinedNode495()
                }
                497 -> {
                    node = parserDefinedNode497()
                }
                498 -> {
                    node = parserDefinedNode498()
                }
                499 -> {
                    node = parserDefinedNode499()
                }
                500 -> {
                    node = parserDefinedNode500()
                }
                501 -> {
                    node = parserDefinedNode501()
                }
                503 -> {
                    node = parserDefinedNode503()
                }
                504 -> {
                    node = parserDefinedNode504()
                }
                505 -> {
                    node = parserDefinedNode505()
                }
                506 -> {
                    node = parserDefinedNode506()
                }
                507 -> {
                    node = parserDefinedNode507()
                }
                508 -> {
                    node = parserDefinedNode508()
                }
                509 -> {
                    node = parserDefinedNode509()
                }
                511 -> {
                    node = parserDefinedNode511()
                }
                513 -> {
                    node = parserDefinedNode513()
                }
                514 -> {
                    node = parserDefinedNode514()
                }
                515 -> {
                    node = parserDefinedNode515()
                }
                516 -> {
                    node = parserDefinedNode516()
                }
                517 -> {
                    node = parserDefinedNode517()
                }
                518 -> {
                    node = parserDefinedNode518()
                }
                519 -> {
                    node = parserDefinedNode519()
                }
                520 -> {
                    node = parserDefinedNode520()
                }
                521 -> {
                    node = parserDefinedNode521()
                }
                522 -> {
                    node = parserDefinedNode522()
                }
                523 -> {
                    node = parserDefinedNode523()
                }
                524 -> {
                    node = parserDefinedNode524()
                }
                525 -> {
                    node = parserDefinedNode525()
                }
                526 -> {
                    node = parserDefinedNode526()
                }
                527 -> {
                    node = parserDefinedNode527()
                }
                528 -> {
                    node = parserDefinedNode528()
                }
                530 -> {
                    node = parserDefinedNode530()
                }
                531 -> {
                    node = parserDefinedNode531()
                }
                532 -> {
                    node = parserDefinedNode532()
                }
                533 -> {
                    node = parserDefinedNode533()
                }
                534 -> {
                    node = parserDefinedNode534()
                }
                536 -> {
                    node = parserDefinedNode536()
                }
                537 -> {
                    node = parserDefinedNode537()
                }
                538 -> {
                    node = parserDefinedNode538()
                }
                539 -> {
                    node = parserDefinedNode539()
                }
                540 -> {
                    node = parserDefinedNode540()
                }
                541 -> {
                    node = parserDefinedNode541()
                }
                542 -> {
                    node = parserDefinedNode542()
                }
                543 -> {
                    node = parserDefinedNode543()
                }
                546 -> {
                    node = parserDefinedNode546()
                }
                548 -> {
                    node = parserDefinedNode548()
                }
                549 -> {
                    node = parserDefinedNode549()
                }
                550 -> {
                    node = parserDefinedNode550()
                }
                551 -> {
                    node = parserDefinedNode551()
                }
                552 -> {
                    node = parserDefinedNode552()
                }
                554 -> {
                    node = parserDefinedNode554()
                }
                555 -> {
                    node = parserDefinedNode555()
                }
                556 -> {
                    node = parserDefinedNode556()
                }
                560 -> {
                    node = parserDefinedNode560()
                }
                564 -> {
                    node = parserDefinedNode564()
                }
                567 -> {
                    node = parserDefinedNode567()
                }
                569 -> {
                    node = parserDefinedNode569()
                }
                570 -> {
                    node = parserDefinedNode570()
                }
                575 -> {
                    node = parserDefinedNode575()
                }
                576 -> {
                    node = parserDefinedNode576()
                }
                577 -> {
                    node = parserDefinedNode577()
                }
                583 -> {
                    node = parserDefinedNode583()
                }
                586 -> {
                    node = parserDefinedNode586()
                }
                588 -> {
                    node = parserDefinedNode588()
                }
                590 -> {
                    node = parserDefinedNode590()
                }
                600 -> {
                    node = parserDefinedNode600()
                }
                602 -> {
                    node = parserDefinedNode602()
                }
                603 -> {
                    node = parserDefinedNode603()
                }
                604 -> {
                    node = parserDefinedNode604()
                }
                606 -> {
                    node = parserDefinedNode606()
                }
                607 -> {
                    node = parserDefinedNode607()
                }
                608 -> {
                    node = parserDefinedNode608()
                }
                609 -> {
                    node = parserDefinedNode609()
                }
                610 -> {
                    node = parserDefinedNode610()
                }
                611 -> {
                    node = parserDefinedNode611()
                }
                612 -> {
                    node = parserDefinedNode612()
                }
                613 -> {
                    node = parserDefinedNode613()
                }
                614 -> {
                    node = parserDefinedNode614()
                }
                615 -> {
                    node = parserDefinedNode615()
                }
                616 -> {
                    node = parserDefinedNode616()
                }
                617 -> {
                    node = parserDefinedNode617()
                }
                620 -> {
                    node = parserDefinedNode620()
                }
                621 -> {
                    node = parserDefinedNode621()
                }
                623 -> {
                    node = parserDefinedNode623()
                }
                626 -> {
                    node = parserDefinedNode626()
                }
                628 -> {
                    node = parserDefinedNode628()
                }
                629 -> {
                    node = parserDefinedNode629()
                }
                630 -> {
                    node = parserDefinedNode630()
                }
                631 -> {
                    node = parserDefinedNode631()
                }
                632 -> {
                    node = parserDefinedNode632()
                }
                633 -> {
                    node = parserDefinedNode633()
                }
                634 -> {
                    node = parserDefinedNode634()
                }
                635 -> {
                    node = parserDefinedNode635()
                }
                636 -> {
                    node = parserDefinedNode636()
                }
                637 -> {
                    node = parserDefinedNode637()
                }
                638 -> {
                    node = parserDefinedNode638()
                }
                639 -> {
                    node = parserDefinedNode639()
                }
                641 -> {
                    node = parserDefinedNode641()
                }
                644 -> {
                    node = parserDefinedNode644()
                }
                645 -> {
                    node = parserDefinedNode645()
                }
                646 -> {
                    node = parserDefinedNode646()
                }
                647 -> {
                    node = parserDefinedNode647()
                }
                648 -> {
                    node = parserDefinedNode648()
                }
                649 -> {
                    node = parserDefinedNode649()
                }
                650 -> {
                    node = parserDefinedNode650()
                }
                651 -> {
                    node = parserDefinedNode651()
                }
                652 -> {
                    node = parserDefinedNode652()
                }
                653 -> {
                    node = parserDefinedNode653()
                }
                654 -> {
                    node = parserDefinedNode654()
                }
                655 -> {
                    node = parserDefinedNode655()
                }
                656 -> {
                    node = parserDefinedNode656()
                }
                657 -> {
                    node = parserDefinedNode657()
                }
                658 -> {
                    node = parserDefinedNode658()
                }
                660 -> {
                    node = parserDefinedNode660()
                }
                662 -> {
                    node = parserDefinedNode662()
                }
                663 -> {
                    node = parserDefinedNode663()
                }
                665 -> {
                    node = parserDefinedNode665()
                }
                666 -> {
                    node = parserDefinedNode666()
                }
                667 -> {
                    node = parserDefinedNode667()
                }
                668 -> {
                    node = parserDefinedNode668()
                }
                669 -> {
                    node = parserDefinedNode669()
                }
                670 -> {
                    node = parserDefinedNode670()
                }
                671 -> {
                    node = parserDefinedNode671()
                }
                673 -> {
                    node = parserDefinedNode673()
                }
                674 -> {
                    node = parserDefinedNode674()
                }
                675 -> {
                    node = parserDefinedNode675()
                }
                676 -> {
                    node = parserDefinedNode676()
                }
                677 -> {
                    node = parserDefinedNode677()
                }
                678 -> {
                    node = parserDefinedNode678()
                }
                679 -> {
                    node = parserDefinedNode679()
                }
                680 -> {
                    node = parserDefinedNode680()
                }
                681 -> {
                    node = parserDefinedNode681()
                }
                682 -> {
                    node = parserDefinedNode682()
                }
                691 -> {
                    node = parserDefinedNode691()
                }
                692 -> {
                    node = parserDefinedNode692()
                }
                693 -> {
                    node = parserDefinedNode693()
                }
                694 -> {
                    node = parserDefinedNode694()
                }
                696 -> {
                    node = parserDefinedNode696()
                }
                697 -> {
                    node = parserDefinedNode697()
                }
                701 -> {
                    node = parserDefinedNode701()
                }
                702 -> {
                    node = parserDefinedNode702()
                }
                703 -> {
                    node = parserDefinedNode703()
                }
                704 -> {
                    node = parserDefinedNode704()
                }
                706 -> {
                    node = parserDefinedNode706()
                }
                707 -> {
                    node = parserDefinedNode707()
                }
                708 -> {
                    node = parserDefinedNode708()
                }
                709 -> {
                    node = parserDefinedNode709()
                }
                711 -> {
                    node = parserDefinedNode711()
                }
                712 -> {
                    node = parserDefinedNode712()
                }
                715 -> {
                    node = parserDefinedNode715()
                }
                716 -> {
                    node = parserDefinedNode716()
                }
                718 -> {
                    node = parserDefinedNode718()
                }
                719 -> {
                    node = parserDefinedNode719()
                }
                723 -> {
                    node = parserDefinedNode723()
                }
                724 -> {
                    node = parserDefinedNode724()
                }
                727 -> {
                    node = parserDefinedNode727()
                }
                728 -> {
                    node = parserDefinedNode728()
                }
                729 -> {
                    node = parserDefinedNode729()
                }
                730 -> {
                    node = parserDefinedNode730()
                }
                731 -> {
                    node = parserDefinedNode731()
                }
                732 -> {
                    node = parserDefinedNode732()
                }
                742 -> {
                    node = parserDefinedNode742()
                }
                743 -> {
                    node = parserDefinedNode743()
                }
                744 -> {
                    node = parserDefinedNode744()
                }
                747 -> {
                    node = parserDefinedNode747()
                }
                748 -> {
                    node = parserDefinedNode748()
                }
                749 -> {
                    node = parserDefinedNode749()
                }
                753 -> {
                    node = parserDefinedNode753()
                }
                754 -> {
                    node = parserDefinedNode754()
                }
                755 -> {
                    node = parserDefinedNode755()
                }
                756 -> {
                    node = parserDefinedNode756()
                }
                757 -> {
                    node = parserDefinedNode757()
                }
                758 -> {
                    node = parserDefinedNode758()
                }
                759 -> {
                    node = parserDefinedNode759()
                }
                762 -> {
                    node = parserDefinedNode762()
                }
                763 -> {
                    node = parserDefinedNode763()
                }
                764 -> {
                    node = parserDefinedNode764()
                }
                765 -> {
                    node = parserDefinedNode765()
                }
                766 -> {
                    node = parserDefinedNode766()
                }
                767 -> {
                    node = parserDefinedNode767()
                }
                768 -> {
                    node = parserDefinedNode768()
                }
                769 -> {
                    node = parserDefinedNode769()
                }
                770 -> {
                    node = parserDefinedNode770()
                }
                771 -> {
                    node = parserDefinedNode771()
                }
                784 -> {
                    node = parserDefinedNode784()
                }
                785 -> {
                    node = parserDefinedNode785()
                }
                786 -> {
                    node = parserDefinedNode786()
                }
                787 -> {
                    node = parserDefinedNode787()
                }
                788 -> {
                    node = parserDefinedNode788()
                }
                789 -> {
                    node = parserDefinedNode789()
                }
                790 -> {
                    node = parserDefinedNode790()
                }
                791 -> {
                    node = parserDefinedNode791()
                }
                792 -> {
                    node = parserDefinedNode792()
                }
                793 -> {
                    node = parserDefinedNode793()
                }
                794 -> {
                    node = parserDefinedNode794()
                }
                795 -> {
                    node = parserDefinedNode795()
                }
                796 -> {
                    node = parserDefinedNode796()
                }
                797 -> {
                    node = parserDefinedNode797()
                }
                798 -> {
                    node = parserDefinedNode798()
                }
                799 -> {
                    node = parserDefinedNode799()
                }
                800 -> {
                    node = parserDefinedNode800()
                }
                801 -> {
                    node = parserDefinedNode801()
                }
                802 -> {
                    node = parserDefinedNode802()
                }
                803 -> {
                    node = parserDefinedNode803()
                }
                804 -> {
                    node = parserDefinedNode804()
                }
                805 -> {
                    node = parserDefinedNode805()
                }
                806 -> {
                    node = parserDefinedNode806()
                }
                807 -> {
                    node = parserDefinedNode807()
                }
                808 -> {
                    node = parserDefinedNode808()
                }
                809 -> {
                    node = parserDefinedNode809()
                }
                810 -> {
                    node = parserDefinedNode810()
                }
                811 -> {
                    node = parserDefinedNode811()
                }
                812 -> {
                    node = parserDefinedNode812()
                }
                813 -> {
                    node = parserDefinedNode813()
                }
                814 -> {
                    node = parserDefinedNode814()
                }
                815 -> {
                    node = parserDefinedNode815()
                }
                816 -> {
                    node = parserDefinedNode816()
                }
                817 -> {
                    node = parserDefinedNode817()
                }
                818 -> {
                    node = parserDefinedNode818()
                }
                819 -> {
                    node = parserDefinedNode819()
                }
                820 -> {
                    node = parserDefinedNode820()
                }
                821 -> {
                    node = parserDefinedNode821()
                }
                822 -> {
                    node = parserDefinedNode822()
                }
                823 -> {
                    node = parserDefinedNode823()
                }
                824 -> {
                    node = parserDefinedNode824()
                }
                825 -> {
                    node = parserDefinedNode825()
                }
                826 -> {
                    node = parserDefinedNode826()
                }
                827 -> {
                    node = parserDefinedNode827()
                }
                828 -> {
                    node = parserDefinedNode828()
                }
                829 -> {
                    node = parserDefinedNode829()
                }
                830 -> {
                    node = parserDefinedNode830()
                }
                831 -> {
                    node = parserDefinedNode831()
                }
                832 -> {
                    node = parserDefinedNode832()
                }
                833 -> {
                    node = parserDefinedNode833()
                }
                834 -> {
                    node = parserDefinedNode834()
                }
                835 -> {
                    node = parserDefinedNode835()
                }
                836 -> {
                    node = parserDefinedNode836()
                }
                837 -> {
                    node = parserDefinedNode837()
                }
                838 -> {
                    node = parserDefinedNode838()
                }
                839 -> {
                    node = parserDefinedNode839()
                }
                840 -> {
                    node = parserDefinedNode840()
                }
                841 -> {
                    node = parserDefinedNode841()
                }
                842 -> {
                    node = parserDefinedNode842()
                }
                843 -> {
                    node = parserDefinedNode843()
                }
                844 -> {
                    node = parserDefinedNode844()
                }
                845 -> {
                    node = parserDefinedNode845()
                }
                846 -> {
                    node = parserDefinedNode846()
                }
                847 -> {
                    node = parserDefinedNode847()
                }
                848 -> {
                    node = parserDefinedNode848()
                }
                849 -> {
                    node = parserDefinedNode849()
                }
                850 -> {
                    node = parserDefinedNode850()
                }
                851 -> {
                    node = parserDefinedNode851()
                }
                852 -> {
                    node = parserDefinedNode852()
                }
                853 -> {
                    node = parserDefinedNode853()
                }
                854 -> {
                    node = parserDefinedNode854()
                }
                855 -> {
                    node = parserDefinedNode855()
                }
                856 -> {
                    node = parserDefinedNode856()
                }
                858 -> {
                    node = parserDefinedNode858()
                }
                859 -> {
                    node = parserDefinedNode859()
                }
                860 -> {
                    node = parserDefinedNode860()
                }
                861 -> {
                    node = parserDefinedNode861()
                }
                862 -> {
                    node = parserDefinedNode862()
                }
                863 -> {
                    node = parserDefinedNode863()
                }
                866 -> {
                    node = parserDefinedNode866()
                }
                871 -> {
                    node = parserDefinedNode871()
                }
                872 -> {
                    node = parserDefinedNode872()
                }
                873 -> {
                    node = parserDefinedNode873()
                }
                874 -> {
                    node = parserDefinedNode874()
                }
                875 -> {
                    node = parserDefinedNode875()
                }
                876 -> {
                    node = parserDefinedNode876()
                }
                877 -> {
                    node = parserDefinedNode877()
                }
                879 -> {
                    node = parserDefinedNode879()
                }
                881 -> {
                    node = parserDefinedNode881()
                }
                882 -> {
                    node = parserDefinedNode882()
                }
                883 -> {
                    node = parserDefinedNode883()
                }
                884 -> {
                    node = parserDefinedNode884()
                }
                885 -> {
                    node = parserDefinedNode885()
                }
                886 -> {
                    node = parserDefinedNode886()
                }
                887 -> {
                    node = parserDefinedNode887()
                }
                888 -> {
                    node = parserDefinedNode888()
                }
                889 -> {
                    node = parserDefinedNode889()
                }
                890 -> {
                    node = parserDefinedNode890()
                }
                891 -> {
                    node = parserDefinedNode891()
                }
                892 -> {
                    node = parserDefinedNode892()
                }
                893 -> {
                    node = parserDefinedNode893()
                }
                896 -> {
                    node = parserDefinedNode896()
                }
                897 -> {
                    node = parserDefinedNode897()
                }
                900 -> {
                    node = parserDefinedNode900()
                }
                901 -> {
                    node = parserDefinedNode901()
                }
                902 -> {
                    node = parserDefinedNode902()
                }
                903 -> {
                    node = parserDefinedNode903()
                }
                904 -> {
                    node = parserDefinedNode904()
                }
                905 -> {
                    node = parserDefinedNode905()
                }
                906 -> {
                    node = parserDefinedNode906()
                }
                907 -> {
                    node = parserDefinedNode907()
                }
                908 -> {
                    node = parserDefinedNode908()
                }
                909 -> {
                    node = parserDefinedNode909()
                }
                910 -> {
                    node = parserDefinedNode910()
                }
                911 -> {
                    node = parserDefinedNode911()
                }
                912 -> {
                    node = parserDefinedNode912()
                }
                913 -> {
                    node = parserDefinedNode913()
                }
                914 -> {
                    node = parserDefinedNode914()
                }
                915 -> {
                    node = parserDefinedNode915()
                }
                916 -> {
                    node = parserDefinedNode916()
                }
                917 -> {
                    node = parserDefinedNode917()
                }
                918 -> {
                    node = parserDefinedNode918()
                }
                975 -> {
                    node = parserDefinedNode975()
                }
                985 -> {
                    node = parserDefinedNode985()
                }
                987 -> {
                    node = parserDefinedNode987()
                }
                988 -> {
                    node = parserDefinedNode988()
                }
                989 -> {
                    node = parserDefinedNode989()
                }
                993 -> {
                    node = parserDefinedNode993()
                }
                994 -> {
                    node = parserDefinedNode994()
                }
                997 -> {
                    node = parserDefinedNode997()
                }
                1001 -> {
                    node = parserDefinedNode1001()
                }
                1002 -> {
                    node = parserDefinedNode1002()
                }
                1003 -> {
                    node = parserDefinedNode1003()
                }
                1004 -> {
                    node = parserDefinedNode1004()
                }
                1005 -> {
                    node = parserDefinedNode1005()
                }
                1007 -> {
                    node = parserDefinedNode1007()
                }
                1008 -> {
                    node = parserDefinedNode1008()
                }
                1009 -> {
                    node = parserDefinedNode1009()
                }
                1010 -> {
                    node = parserDefinedNode1010()
                }
                1011 -> {
                    node = parserDefinedNode1011()
                }
                1013 -> {
                    node = parserDefinedNode1013()
                }
                1014 -> {
                    node = parserDefinedNode1014()
                }
                1015 -> {
                    node = parserDefinedNode1015()
                }
                1016 -> {
                    node = parserDefinedNode1016()
                }
                1018 -> {
                    node = parserDefinedNode1018()
                }
                1032 -> {
                    node = parserDefinedNode1032()
                }
                1033 -> {
                    node = parserDefinedNode1033()
                }
                1036 -> {
                    node = parserDefinedNode1036()
                }
                1037 -> {
                    node = parserDefinedNode1037()
                }
                1038 -> {
                    node = parserDefinedNode1038()
                }
                1039 -> {
                    node = parserDefinedNode1039()
                }
                1040 -> {
                    node = parserDefinedNode1040()
                }
                1041 -> {
                    node = parserDefinedNode1041()
                }
                1047 -> {
                    node = parserDefinedNode1047()
                }
                1049 -> {
                    node = parserDefinedNode1049()
                }
                1051 -> {
                    node = parserDefinedNode1051()
                }
                1052 -> {
                    node = parserDefinedNode1052()
                }
                1053 -> {
                    node = parserDefinedNode1053()
                }
                1054 -> {
                    node = parserDefinedNode1054()
                }
                1055 -> {
                    node = parserDefinedNode1055()
                }
                1056 -> {
                    node = parserDefinedNode1056()
                }
                1057 -> {
                    node = parserDefinedNode1057()
                }
                1058 -> {
                    node = parserDefinedNode1058()
                }
                1059 -> {
                    node = parserDefinedNode1059()
                }
                1060 -> {
                    node = parserDefinedNode1060()
                }
                1061 -> {
                    node = parserDefinedNode1061()
                }
                1062 -> {
                    node = parserDefinedNode1062()
                }
                1063 -> {
                    node = parserDefinedNode1063()
                }
                1064 -> {
                    node = parserDefinedNode1064()
                }
                1065 -> {
                    node = parserDefinedNode1065()
                }
                1066 -> {
                    node = parserDefinedNode1066()
                }
                1067 -> {
                    node = parserDefinedNode1067()
                }
                1068 -> {
                    node = parserDefinedNode1068()
                }
                1069 -> {
                    node = parserDefinedNode1069()
                }
                1070 -> {
                    node = parserDefinedNode1070()
                }
                1071 -> {
                    node = parserDefinedNode1071()
                }
                1072 -> {
                    node = parserDefinedNode1072()
                }
                1073 -> {
                    node = parserDefinedNode1073()
                }
                1074 -> {
                    node = parserDefinedNode1074()
                }
                1075 -> {
                    node = parserDefinedNode1075()
                }
                1076 -> {
                    node = parserDefinedNode1076()
                }
                1077 -> {
                    node = parserDefinedNode1077()
                }
                1078 -> {
                    node = parserDefinedNode1078()
                }
                1079 -> {
                    node = parserDefinedNode1079()
                }
                1080 -> {
                    node = parserDefinedNode1080()
                }
                1081 -> {
                    node = parserDefinedNode1081()
                }
                1082 -> {
                    node = parserDefinedNode1082()
                }
                1083 -> {
                    node = parserDefinedNode1083()
                }
                1084 -> {
                    node = parserDefinedNode1084()
                }
                1085 -> {
                    node = parserDefinedNode1085()
                }
                1086 -> {
                    node = parserDefinedNode1086()
                }
                1087 -> {
                    node = parserDefinedNode1087()
                }
                1088 -> {
                    node = parserDefinedNode1088()
                }
                1089 -> {
                    node = parserDefinedNode1089()
                }
                1090 -> {
                    node = parserDefinedNode1090()
                }
                1091 -> {
                    node = parserDefinedNode1091()
                }
                1092 -> {
                    node = parserDefinedNode1092()
                }
                1093 -> {
                    node = parserDefinedNode1093()
                }
                1094 -> {
                    node = parserDefinedNode1094()
                }
                1095 -> {
                    node = parserDefinedNode1095()
                }
                1096 -> {
                    node = parserDefinedNode1096()
                }
                1097 -> {
                    node = parserDefinedNode1097()
                }
                1098 -> {
                    node = parserDefinedNode1098()
                }
                1099 -> {
                    node = parserDefinedNode1099()
                }
                1100 -> {
                    node = parserDefinedNode1100()
                }
                1101 -> {
                    node = parserDefinedNode1101()
                }
                1102 -> {
                    node = parserDefinedNode1102()
                }
                1103 -> {
                    node = parserDefinedNode1103()
                }
                1104 -> {
                    node = parserDefinedNode1104()
                }
                1105 -> {
                    node = parserDefinedNode1105()
                }
                1106 -> {
                    node = parserDefinedNode1106()
                }
                1107 -> {
                    node = parserDefinedNode1107()
                }
                1108 -> {
                    node = parserDefinedNode1108()
                }
                1109 -> {
                    node = parserDefinedNode1109()
                }
                1110 -> {
                    node = parserDefinedNode1110()
                }
                1111 -> {
                    node = parserDefinedNode1111()
                }
                1112 -> {
                    node = parserDefinedNode1112()
                }
                1113 -> {
                    node = parserDefinedNode1113()
                }
                1114 -> {
                    node = parserDefinedNode1114()
                }
                1115 -> {
                    node = parserDefinedNode1115()
                }
                1116 -> {
                    node = parserDefinedNode1116()
                }
                1117 -> {
                    node = parserDefinedNode1117()
                }
                1118 -> {
                    node = parserDefinedNode1118()
                }
                1119 -> {
                    node = parserDefinedNode1119()
                }
                1120 -> {
                    node = parserDefinedNode1120()
                }
                1121 -> {
                    node = parserDefinedNode1121()
                }
                1122 -> {
                    node = parserDefinedNode1122()
                }
                1123 -> {
                    node = parserDefinedNode1123()
                }
                1124 -> {
                    node = parserDefinedNode1124()
                }
                1125 -> {
                    node = parserDefinedNode1125()
                }
                1126 -> {
                    node = parserDefinedNode1126()
                }
                1129 -> {
                    node = parserDefinedNode1129()
                }
                1130 -> {
                    node = parserDefinedNode1130()
                }
                1131 -> {
                    node = parserDefinedNode1131()
                }
                1132 -> {
                    node = parserDefinedNode1132()
                }
                1133 -> {
                    node = parserDefinedNode1133()
                }
                1134 -> {
                    node = parserDefinedNode1134()
                }
                1139 -> {
                    node = parserDefinedNode1139()
                }
                1140 -> {
                    node = parserDefinedNode1140()
                }
                1141 -> {
                    node = parserDefinedNode1141()
                }
                1146 -> {
                    node = parserDefinedNode1146()
                }
                1147 -> {
                    node = parserDefinedNode1147()
                }
                1149 -> {
                    node = parserDefinedNode1149()
                }
                1150 -> {
                    node = parserDefinedNode1150()
                }
                1161 -> {
                    node = parserDefinedNode1161()
                }
                1162 -> {
                    node = parserDefinedNode1162()
                }
                1163 -> {
                    node = parserDefinedNode1163()
                }
                1164 -> {
                    node = parserDefinedNode1164()
                }
                1165 -> {
                    node = parserDefinedNode1165()
                }
                1166 -> {
                    node = parserDefinedNode1166()
                }
                1167 -> {
                    node = parserDefinedNode1167()
                }
                1168 -> {
                    node = parserDefinedNode1168()
                }
                1169 -> {
                    node = parserDefinedNode1169()
                }
                1170 -> {
                    node = parserDefinedNode1170()
                }
                1171 -> {
                    node = parserDefinedNode1171()
                }
                1172 -> {
                    node = parserDefinedNode1172()
                }
                1173 -> {
                    node = parserDefinedNode1173()
                }
                1174 -> {
                    node = parserDefinedNode1174()
                }
                1175 -> {
                    node = parserDefinedNode1175()
                }
                1176 -> {
                    node = parserDefinedNode1176()
                }
                1178 -> {
                    node = parserDefinedNode1178()
                }
                1180 -> {
                    node = parserDefinedNode1180()
                }
                1181 -> {
                    node = parserDefinedNode1181()
                }
                1182 -> {
                    node = parserDefinedNode1182()
                }
                1183 -> {
                    node = parserDefinedNode1183()
                }
                1184 -> {
                    node = parserDefinedNode1184()
                }
                1185 -> {
                    node = parserDefinedNode1185()
                }
                1186 -> {
                    node = parserDefinedNode1186()
                }
                1187 -> {
                    node = parserDefinedNode1187()
                }
                1188 -> {
                    node = parserDefinedNode1188()
                }
                1196 -> {
                    node = parserDefinedNode1196()
                }
                1197 -> {
                    node = parserDefinedNode1197()
                }
                1198 -> {
                    node = parserDefinedNode1198()
                }
                1199 -> {
                    node = parserDefinedNode1199()
                }
                1200 -> {
                    node = parserDefinedNode1200()
                }
                1201 -> {
                    node = parserDefinedNode1201()
                }
                1202 -> {
                    node = parserDefinedNode1202()
                }
                1203 -> {
                    node = parserDefinedNode1203()
                }
                1204 -> {
                    node = parserDefinedNode1204()
                }
                1205 -> {
                    node = parserDefinedNode1205()
                }
                1206 -> {
                    node = parserDefinedNode1206()
                }
                1207 -> {
                    node = parserDefinedNode1207()
                }
                1208 -> {
                    node = parserDefinedNode1208()
                }
                1209 -> {
                    node = parserDefinedNode1209()
                }
                1210 -> {
                    node = parserDefinedNode1210()
                }
                1211 -> {
                    node = parserDefinedNode1211()
                }
                1212 -> {
                    node = parserDefinedNode1212()
                }
                1213 -> {
                    node = parserDefinedNode1213()
                }
                1214 -> {
                    node = parserDefinedNode1214()
                }
                1215 -> {
                    node = parserDefinedNode1215()
                }
                1216 -> {
                    node = parserDefinedNode1216()
                }
                1217 -> {
                    node = parserDefinedNode1217()
                }
                1218 -> {
                    node = parserDefinedNode1218()
                }
                1219 -> {
                    node = parserDefinedNode1219()
                }
                1220 -> {
                    node = parserDefinedNode1220()
                }
                1221 -> {
                    node = parserDefinedNode1221()
                }
                1222 -> {
                    node = parserDefinedNode1222()
                }
                1223 -> {
                    node = parserDefinedNode1223()
                }
                1224 -> {
                    node = parserDefinedNode1224()
                }
                1225 -> {
                    node = parserDefinedNode1225()
                }
                1226 -> {
                    node = parserDefinedNode1226()
                }
                1227 -> {
                    node = parserDefinedNode1227()
                }
                1228 -> {
                    node = parserDefinedNode1228()
                }
                1229 -> {
                    node = parserDefinedNode1229()
                }
                1230 -> {
                    node = parserDefinedNode1230()
                }
                1231 -> {
                    node = parserDefinedNode1231()
                }
                1232 -> {
                    node = parserDefinedNode1232()
                }
                1233 -> {
                    node = parserDefinedNode1233()
                }
                1234 -> {
                    node = parserDefinedNode1234()
                }
                1235 -> {
                    node = parserDefinedNode1235()
                }
                1236 -> {
                    node = parserDefinedNode1236()
                }
                1237 -> {
                    node = parserDefinedNode1237()
                }
                1238 -> {
                    node = parserDefinedNode1238()
                }
                1239 -> {
                    node = parserDefinedNode1239()
                }
                1240 -> {
                    node = parserDefinedNode1240()
                }
                1241 -> {
                    node = parserDefinedNode1241()
                }
                1242 -> {
                    node = parserDefinedNode1242()
                }
                1243 -> {
                    node = parserDefinedNode1243()
                }
                1244 -> {
                    node = parserDefinedNode1244()
                }
                1245 -> {
                    node = parserDefinedNode1245()
                }
                1246 -> {
                    node = parserDefinedNode1246()
                }
                1247 -> {
                    node = parserDefinedNode1247()
                }
                1248 -> {
                    node = parserDefinedNode1248()
                }
                1249 -> {
                    node = parserDefinedNode1249()
                }
                1252 -> {
                    node = parserDefinedNode1252()
                }
                1254 -> {
                    node = parserDefinedNode1254()
                }
                1256 -> {
                    node = parserDefinedNode1256()
                }
                1258 -> {
                    node = parserDefinedNode1258()
                }
                1260 -> {
                    node = parserDefinedNode1260()
                }
                1265 -> {
                    node = parserDefinedNode1265()
                }
                1266 -> {
                    node = parserDefinedNode1266()
                }
                1267 -> {
                    node = parserDefinedNode1267()
                }
                1268 -> {
                    node = parserDefinedNode1268()
                }
                1269 -> {
                    node = parserDefinedNode1269()
                }
                1271 -> {
                    node = parserDefinedNode1271()
                }
                1272 -> {
                    node = parserDefinedNode1272()
                }
                1273 -> {
                    node = parserDefinedNode1273()
                }
                1274 -> {
                    node = parserDefinedNode1274()
                }
                1275 -> {
                    node = parserDefinedNode1275()
                }
                1276 -> {
                    node = parserDefinedNode1276()
                }
                1280 -> {
                    node = parserDefinedNode1280()
                }
                1281 -> {
                    node = parserDefinedNode1281()
                }
                1282 -> {
                    node = parserDefinedNode1282()
                }
                1283 -> {
                    node = parserDefinedNode1283()
                }
                1284 -> {
                    node = parserDefinedNode1284()
                }
                1285 -> {
                    node = parserDefinedNode1285()
                }
                1286 -> {
                    node = parserDefinedNode1286()
                }
                1287 -> {
                    node = parserDefinedNode1287()
                }
                1288 -> {
                    node = parserDefinedNode1288()
                }
                1289 -> {
                    node = parserDefinedNode1289()
                }
                1303 -> {
                    node = parserDefinedNode1303()
                }
                1304 -> {
                    node = parserDefinedNode1304()
                }
                1308 -> {
                    node = parserDefinedNode1308()
                }
                1309 -> {
                    node = parserDefinedNode1309()
                }
                1310 -> {
                    node = parserDefinedNode1310()
                }
                1311 -> {
                    node = parserDefinedNode1311()
                }
                1312 -> {
                    node = parserDefinedNode1312()
                }
                1313 -> {
                    node = parserDefinedNode1313()
                }
                1314 -> {
                    node = parserDefinedNode1314()
                }
                1315 -> {
                    node = parserDefinedNode1315()
                }
                1316 -> {
                    node = parserDefinedNode1316()
                }
                1317 -> {
                    node = parserDefinedNode1317()
                }
                1318 -> {
                    node = parserDefinedNode1318()
                }
                1319 -> {
                    node = parserDefinedNode1319()
                }
                1320 -> {
                    node = parserDefinedNode1320()
                }
                1321 -> {
                    node = parserDefinedNode1321()
                }
                1322 -> {
                    node = parserDefinedNode1322()
                }
                1323 -> {
                    node = parserDefinedNode1323()
                }
                1324 -> {
                    node = parserDefinedNode1324()
                }
                1325 -> {
                    node = parserDefinedNode1325()
                }
                1326 -> {
                    node = parserDefinedNode1326()
                }
                1327 -> {
                    node = parserDefinedNode1327()
                }
                1328 -> {
                    node = parserDefinedNode1328()
                }
                1329 -> {
                    node = parserDefinedNode1329()
                }
                1330 -> {
                    node = parserDefinedNode1330()
                }
                1331 -> {
                    node = parserDefinedNode1331()
                }
                1332 -> {
                    node = parserDefinedNode1332()
                }
                1333 -> {
                    node = parserDefinedNode1333()
                }
                1334 -> {
                    node = parserDefinedNode1334()
                }
                1335 -> {
                    node = parserDefinedNode1335()
                }
                1336 -> {
                    node = parserDefinedNode1336()
                }
                1337 -> {
                    node = parserDefinedNode1337()
                }
                1338 -> {
                    node = parserDefinedNode1338()
                }
                1339 -> {
                    node = parserDefinedNode1339()
                }
                1340 -> {
                    node = parserDefinedNode1340()
                }
                1341 -> {
                    node = parserDefinedNode1341()
                }
                1342 -> {
                    node = parserDefinedNode1342()
                }
                1343 -> {
                    node = parserDefinedNode1343()
                }
                1344 -> {
                    node = parserDefinedNode1344()
                }
                1345 -> {
                    node = parserDefinedNode1345()
                }
                1346 -> {
                    node = parserDefinedNode1346()
                }
                1347 -> {
                    node = parserDefinedNode1347()
                }
                1348 -> {
                    node = parserDefinedNode1348()
                }
                1349 -> {
                    node = parserDefinedNode1349()
                }
                1350 -> {
                    node = parserDefinedNode1350()
                }
                1351 -> {
                    node = parserDefinedNode1351()
                }
                1352 -> {
                    node = parserDefinedNode1352()
                }
                1353 -> {
                    node = parserDefinedNode1353()
                }
                1354 -> {
                    node = parserDefinedNode1354()
                }
                1355 -> {
                    node = parserDefinedNode1355()
                }
                1356 -> {
                    node = parserDefinedNode1356()
                }
                1357 -> {
                    node = parserDefinedNode1357()
                }
                1358 -> {
                    node = parserDefinedNode1358()
                }
                1359 -> {
                    node = parserDefinedNode1359()
                }
                1360 -> {
                    node = parserDefinedNode1360()
                }
                1361 -> {
                    node = parserDefinedNode1361()
                }
                1362 -> {
                    node = parserDefinedNode1362()
                }
                1363 -> {
                    node = parserDefinedNode1363()
                }
                1364 -> {
                    node = parserDefinedNode1364()
                }
                1365 -> {
                    node = parserDefinedNode1365()
                }
                1367 -> {
                    node = parserDefinedNode1367()
                }
                1369 -> {
                    node = parserDefinedNode1369()
                }
                1371 -> {
                    node = parserDefinedNode1371()
                }
                1373 -> {
                    node = parserDefinedNode1373()
                }
                1375 -> {
                    node = parserDefinedNode1375()
                }
                1376 -> {
                    node = parserDefinedNode1376()
                }
                1377 -> {
                    node = parserDefinedNode1377()
                }
                1378 -> {
                    node = parserDefinedNode1378()
                }
                1379 -> {
                    node = parserDefinedNode1379()
                }
                1380 -> {
                    node = parserDefinedNode1380()
                }
                1381 -> {
                    node = parserDefinedNode1381()
                }
                1382 -> {
                    node = parserDefinedNode1382()
                }
                1383 -> {
                    node = parserDefinedNode1383()
                }
                1384 -> {
                    node = parserDefinedNode1384()
                }
                1385 -> {
                    node = parserDefinedNode1385()
                }
                1386 -> {
                    node = parserDefinedNode1386()
                }
                1387 -> {
                    node = parserDefinedNode1387()
                }
                1388 -> {
                    node = parserDefinedNode1388()
                }
                1390 -> {
                    node = parserDefinedNode1390()
                }
                1391 -> {
                    node = parserDefinedNode1391()
                }
                1394 -> {
                    node = parserDefinedNode1394()
                }
                1397 -> {
                    node = parserDefinedNode1397()
                }
                1398 -> {
                    node = parserDefinedNode1398()
                }
                1399 -> {
                    node = parserDefinedNode1399()
                }
                1400 -> {
                    node = parserDefinedNode1400()
                }
                1401 -> {
                    node = parserDefinedNode1401()
                }
                1402 -> {
                    node = parserDefinedNode1402()
                }
                1403 -> {
                    node = parserDefinedNode1403()
                }
                1404 -> {
                    node = parserDefinedNode1404()
                }
                1405 -> {
                    node = parserDefinedNode1405()
                }
                1406 -> {
                    node = parserDefinedNode1406()
                }
                1407 -> {
                    node = parserDefinedNode1407()
                }
                1408 -> {
                    node = parserDefinedNode1408()
                }
                1409 -> {
                    node = parserDefinedNode1409()
                }
                1410 -> {
                    node = parserDefinedNode1410()
                }
                1411 -> {
                    node = parserDefinedNode1411()
                }
                1412 -> {
                    node = parserDefinedNode1412()
                }
                1413 -> {
                    node = parserDefinedNode1413()
                }
                1414 -> {
                    node = parserDefinedNode1414()
                }
                1415 -> {
                    node = parserDefinedNode1415()
                }
                1416 -> {
                    node = parserDefinedNode1416()
                }
                1417 -> {
                    node = parserDefinedNode1417()
                }
                1418 -> {
                    node = parserDefinedNode1418()
                }
                1419 -> {
                    node = parserDefinedNode1419()
                }
                1420 -> {
                    node = parserDefinedNode1420()
                }
                1422 -> {
                    node = parserDefinedNode1422()
                }
                1424 -> {
                    node = parserDefinedNode1424()
                }
                1426 -> {
                    node = parserDefinedNode1426()
                }
                1430 -> {
                    node = parserDefinedNode1430()
                }
                1433 -> {
                    node = parserDefinedNode1433()
                }
                1437 -> {
                    node = parserDefinedNode1437()
                }
                1439 -> {
                    node = parserDefinedNode1439()
                }
                1440 -> {
                    node = parserDefinedNode1440()
                }
                1441 -> {
                    node = parserDefinedNode1441()
                }
                1450 -> {
                    node = parserDefinedNode1450()
                }
                1451 -> {
                    node = parserDefinedNode1451()
                }
                1452 -> {
                    node = parserDefinedNode1452()
                }
                1453 -> {
                    node = parserDefinedNode1453()
                }
                1455 -> {
                    node = parserDefinedNode1455()
                }
                1456 -> {
                    node = parserDefinedNode1456()
                }
                1457 -> {
                    node = parserDefinedNode1457()
                }
                1458 -> {
                    node = parserDefinedNode1458()
                }
                1459 -> {
                    node = parserDefinedNode1459()
                }
                1460 -> {
                    node = parserDefinedNode1460()
                }
                1461 -> {
                    node = parserDefinedNode1461()
                }
                1462 -> {
                    node = parserDefinedNode1462()
                }
                1463 -> {
                    node = parserDefinedNode1463()
                }
                1464 -> {
                    node = parserDefinedNode1464()
                }
                1465 -> {
                    node = parserDefinedNode1465()
                }
                1466 -> {
                    node = parserDefinedNode1466()
                }
                1467 -> {
                    node = parserDefinedNode1467()
                }
                1468 -> {
                    node = parserDefinedNode1468()
                }
                1469 -> {
                    node = parserDefinedNode1469()
                }
                1470 -> {
                    node = parserDefinedNode1470()
                }
                1471 -> {
                    node = parserDefinedNode1471()
                }
                1472 -> {
                    node = parserDefinedNode1472()
                }
                1473 -> {
                    node = parserDefinedNode1473()
                }
                1476 -> {
                    node = parserDefinedNode1476()
                }
                1477 -> {
                    node = parserDefinedNode1477()
                }
                1478 -> {
                    node = parserDefinedNode1478()
                }
                1479 -> {
                    node = parserDefinedNode1479()
                }
                1482 -> {
                    node = parserDefinedNode1482()
                }
                1483 -> {
                    node = parserDefinedNode1483()
                }
                1484 -> {
                    node = parserDefinedNode1484()
                }
                1485 -> {
                    node = parserDefinedNode1485()
                }
                1486 -> {
                    node = parserDefinedNode1486()
                }
                1487 -> {
                    node = parserDefinedNode1487()
                }
                1488 -> {
                    node = parserDefinedNode1488()
                }
                1489 -> {
                    node = parserDefinedNode1489()
                }
                1490 -> {
                    node = parserDefinedNode1490()
                }
                1491 -> {
                    node = parserDefinedNode1491()
                }
                1495 -> {
                    node = parserDefinedNode1495()
                }
                1496 -> {
                    node = parserDefinedNode1496()
                }
                1497 -> {
                    node = parserDefinedNode1497()
                }
                1498 -> {
                    node = parserDefinedNode1498()
                }
                1499 -> {
                    node = parserDefinedNode1499()
                }
                1503 -> {
                    node = parserDefinedNode1503()
                }
                1506 -> {
                    node = parserDefinedNode1506()
                }
                1507 -> {
                    node = parserDefinedNode1507()
                }
                1508 -> {
                    node = parserDefinedNode1508()
                }
                1509 -> {
                    node = parserDefinedNode1509()
                }
                1510 -> {
                    node = parserDefinedNode1510()
                }
                1511 -> {
                    node = parserDefinedNode1511()
                }
                1512 -> {
                    node = parserDefinedNode1512()
                }
                1513 -> {
                    node = parserDefinedNode1513()
                }
                1514 -> {
                    node = parserDefinedNode1514()
                }
                1515 -> {
                    node = parserDefinedNode1515()
                }
                1516 -> {
                    node = parserDefinedNode1516()
                }
                1517 -> {
                    node = parserDefinedNode1517()
                }
                1518 -> {
                    node = parserDefinedNode1518()
                }
                1519 -> {
                    node = parserDefinedNode1519()
                }
                1520 -> {
                    node = parserDefinedNode1520()
                }
                1521 -> {
                    node = parserDefinedNode1521()
                }
                1522 -> {
                    node = parserDefinedNode1522()
                }
                1524 -> {
                    node = parserDefinedNode1524()
                }
                1525 -> {
                    node = parserDefinedNode1525()
                }
                1527 -> {
                    node = parserDefinedNode1527()
                }
                1529 -> {
                    node = parserDefinedNode1529()
                }
                1531 -> {
                    node = parserDefinedNode1531()
                }
                1532 -> {
                    node = parserDefinedNode1532()
                }
                1534 -> {
                    node = parserDefinedNode1534()
                }
                1535 -> {
                    node = parserDefinedNode1535()
                }
                1536 -> {
                    node = parserDefinedNode1536()
                }
                1537 -> {
                    node = parserDefinedNode1537()
                }
                1538 -> {
                    node = parserDefinedNode1538()
                }
                1539 -> {
                    node = parserDefinedNode1539()
                }
                1540 -> {
                    node = parserDefinedNode1540()
                }
                1541 -> {
                    node = parserDefinedNode1541()
                }
                1543 -> {
                    node = parserDefinedNode1543()
                }
                1544 -> {
                    node = parserDefinedNode1544()
                }
                1548 -> {
                    node = parserDefinedNode1548()
                }
                1549 -> {
                    node = parserDefinedNode1549()
                }
                1551 -> {
                    node = parserDefinedNode1551()
                }
                1559 -> {
                    node = parserDefinedNode1559()
                }
                1560 -> {
                    node = parserDefinedNode1560()
                }
                1561 -> {
                    node = parserDefinedNode1561()
                }
                1563 -> {
                    node = parserDefinedNode1563()
                }
                1565 -> {
                    node = parserDefinedNode1565()
                }
                1576 -> {
                    node = parserDefinedNode1576()
                }
                1577 -> {
                    node = parserDefinedNode1577()
                }
                1578 -> {
                    node = parserDefinedNode1578()
                }
                1579 -> {
                    node = parserDefinedNode1579()
                }
                1580 -> {
                    node = parserDefinedNode1580()
                }
                1581 -> {
                    node = parserDefinedNode1581()
                }
                1582 -> {
                    node = parserDefinedNode1582()
                }
                1584 -> {
                    node = parserDefinedNode1584()
                }
                1586 -> {
                    node = parserDefinedNode1586()
                }
                1590 -> {
                    node = parserDefinedNode1590()
                }
                1593 -> {
                    node = parserDefinedNode1593()
                }
                1598 -> {
                    node = parserDefinedNode1598()
                }
                1599 -> {
                    node = parserDefinedNode1599()
                }
                1600 -> {
                    node = parserDefinedNode1600()
                }
                1601 -> {
                    node = parserDefinedNode1601()
                }
                1602 -> {
                    node = parserDefinedNode1602()
                }
                1603 -> {
                    node = parserDefinedNode1603()
                }
                1604 -> {
                    node = parserDefinedNode1604()
                }
                1605 -> {
                    node = parserDefinedNode1605()
                }
                1606 -> {
                    node = parserDefinedNode1606()
                }
                1607 -> {
                    node = parserDefinedNode1607()
                }
                1608 -> {
                    node = parserDefinedNode1608()
                }
                1609 -> {
                    node = parserDefinedNode1609()
                }
                1610 -> {
                    node = parserDefinedNode1610()
                }
                1611 -> {
                    node = parserDefinedNode1611()
                }
                1617 -> {
                    node = parserDefinedNode1617()
                }
                1619 -> {
                    node = parserDefinedNode1619()
                }
                1620 -> {
                    node = parserDefinedNode1620()
                }
                1621 -> {
                    node = parserDefinedNode1621()
                }
                1623 -> {
                    node = parserDefinedNode1623()
                }
                1625 -> {
                    node = parserDefinedNode1625()
                }
                1627 -> {
                    node = parserDefinedNode1627()
                }
                1628 -> {
                    node = parserDefinedNode1628()
                }
                1629 -> {
                    node = parserDefinedNode1629()
                }
                1630 -> {
                    node = parserDefinedNode1630()
                }
                1631 -> {
                    node = parserDefinedNode1631()
                }
                1632 -> {
                    node = parserDefinedNode1632()
                }
                1633 -> {
                    node = parserDefinedNode1633()
                }
                1634 -> {
                    node = parserDefinedNode1634()
                }
                1635 -> {
                    node = parserDefinedNode1635()
                }
                1637 -> {
                    node = parserDefinedNode1637()
                }
                1638 -> {
                    node = parserDefinedNode1638()
                }
                1639 -> {
                    node = parserDefinedNode1639()
                }
                1640 -> {
                    node = parserDefinedNode1640()
                }
                1641 -> {
                    node = parserDefinedNode1641()
                }
                1642 -> {
                    node = parserDefinedNode1642()
                }
                1643 -> {
                    node = parserDefinedNode1643()
                }
                1645 -> {
                    node = parserDefinedNode1645()
                }
                1646 -> {
                    node = parserDefinedNode1646()
                }
                1647 -> {
                    node = parserDefinedNode1647()
                }
                1648 -> {
                    node = parserDefinedNode1648()
                }
                1649 -> {
                    node = parserDefinedNode1649()
                }
                1652 -> {
                    node = parserDefinedNode1652()
                }
                1655 -> {
                    node = parserDefinedNode1655()
                }
                1658 -> {
                    node = parserDefinedNode1658()
                }
                1659 -> {
                    node = parserDefinedNode1659()
                }
                1660 -> {
                    node = parserDefinedNode1660()
                }
                1661 -> {
                    node = parserDefinedNode1661()
                }
                1662 -> {
                    node = parserDefinedNode1662()
                }
                1664 -> {
                    node = parserDefinedNode1664()
                }
                1666 -> {
                    node = parserDefinedNode1666()
                }
                1667 -> {
                    node = parserDefinedNode1667()
                }
                1668 -> {
                    node = parserDefinedNode1668()
                }
                1671 -> {
                    node = parserDefinedNode1671()
                }
                1672 -> {
                    node = parserDefinedNode1672()
                }
                1687 -> {
                    node = parserDefinedNode1687()
                }
                1751 -> {
                    node = parserDefinedNode1751()
                }
                1752 -> {
                    node = parserDefinedNode1752()
                }
                1753 -> {
                    node = parserDefinedNode1753()
                }
                1754 -> {
                    node = parserDefinedNode1754()
                }
                1755 -> {
                    node = parserDefinedNode1755()
                }
                1756 -> {
                    node = parserDefinedNode1756()
                }
                1757 -> {
                    node = parserDefinedNode1757()
                }
                1758 -> {
                    node = parserDefinedNode1758()
                }
                1759 -> {
                    node = parserDefinedNode1759()
                }
                1760 -> {
                    node = parserDefinedNode1760()
                }
                1761 -> {
                    node = parserDefinedNode1761()
                }
                1762 -> {
                    node = parserDefinedNode1762()
                }
                1763 -> {
                    node = parserDefinedNode1763()
                }
                1764 -> {
                    node = parserDefinedNode1764()
                }
                1765 -> {
                    node = parserDefinedNode1765()
                }
                1766 -> {
                    node = parserDefinedNode1766()
                }
                1767 -> {
                    node = parserDefinedNode1767()
                }
                1768 -> {
                    node = parserDefinedNode1768()
                }
                1769 -> {
                    node = parserDefinedNode1769()
                }
                1770 -> {
                    node = parserDefinedNode1770()
                }
                1771 -> {
                    node = parserDefinedNode1771()
                }
                1772 -> {
                    node = parserDefinedNode1772()
                }
                1773 -> {
                    node = parserDefinedNode1773()
                }
                1774 -> {
                    node = parserDefinedNode1774()
                }
                1775 -> {
                    node = parserDefinedNode1775()
                }
                1776 -> {
                    node = parserDefinedNode1776()
                }
                1777 -> {
                    node = parserDefinedNode1777()
                }
                1778 -> {
                    node = parserDefinedNode1778()
                }
                1779 -> {
                    node = parserDefinedNode1779()
                }
                1780 -> {
                    node = parserDefinedNode1780()
                }
                1781 -> {
                    node = parserDefinedNode1781()
                }
                1782 -> {
                    node = parserDefinedNode1782()
                }
                1783 -> {
                    node = parserDefinedNode1783()
                }
                1784 -> {
                    node = parserDefinedNode1784()
                }
                1785 -> {
                    node = parserDefinedNode1785()
                }
                1786 -> {
                    node = parserDefinedNode1786()
                }
                1787 -> {
                    node = parserDefinedNode1787()
                }
                1788 -> {
                    node = parserDefinedNode1788()
                }
                1789 -> {
                    node = parserDefinedNode1789()
                }
                1790 -> {
                    node = parserDefinedNode1790()
                }
                1791 -> {
                    node = parserDefinedNode1791()
                }
                1792 -> {
                    node = parserDefinedNode1792()
                }
                1793 -> {
                    node = parserDefinedNode1793()
                }
                1794 -> {
                    node = parserDefinedNode1794()
                }
                1795 -> {
                    node = parserDefinedNode1795()
                }
                1796 -> {
                    node = parserDefinedNode1796()
                }
                1797 -> {
                    node = parserDefinedNode1797()
                }
                1798 -> {
                    node = parserDefinedNode1798()
                }
                1799 -> {
                    node = parserDefinedNode1799()
                }
                1800 -> {
                    node = parserDefinedNode1800()
                }
                1801 -> {
                    node = parserDefinedNode1801()
                }
                1802 -> {
                    node = parserDefinedNode1802()
                }
                1803 -> {
                    node = parserDefinedNode1803()
                }
                1804 -> {
                    node = parserDefinedNode1804()
                }
                1805 -> {
                    node = parserDefinedNode1805()
                }
                1806 -> {
                    node = parserDefinedNode1806()
                }
                1807 -> {
                    node = parserDefinedNode1807()
                }
                1808 -> {
                    node = parserDefinedNode1808()
                }
                1809 -> {
                    node = parserDefinedNode1809()
                }
                1810 -> {
                    node = parserDefinedNode1810()
                }
                1811 -> {
                    node = parserDefinedNode1811()
                }
                1812 -> {
                    node = parserDefinedNode1812()
                }
                1813 -> {
                    node = parserDefinedNode1813()
                }
                1814 -> {
                    node = parserDefinedNode1814()
                }
                1815 -> {
                    node = parserDefinedNode1815()
                }
                1816 -> {
                    node = parserDefinedNode1816()
                }
                1817 -> {
                    node = parserDefinedNode1817()
                }
                1818 -> {
                    node = parserDefinedNode1818()
                }
                1819 -> {
                    node = parserDefinedNode1819()
                }
                1820 -> {
                    node = parserDefinedNode1820()
                }
                1821 -> {
                    node = parserDefinedNode1821()
                }
                1822 -> {
                    node = parserDefinedNode1822()
                }
                1823 -> {
                    node = parserDefinedNode1823()
                }
                1824 -> {
                    node = parserDefinedNode1824()
                }
                1825 -> {
                    node = parserDefinedNode1825()
                }
                1826 -> {
                    node = parserDefinedNode1826()
                }
                1827 -> {
                    node = parserDefinedNode1827()
                }
                1828 -> {
                    node = parserDefinedNode1828()
                }
                1829 -> {
                    node = parserDefinedNode1829()
                }
                1830 -> {
                    node = parserDefinedNode1830()
                }
                1831 -> {
                    node = parserDefinedNode1831()
                }
                1832 -> {
                    node = parserDefinedNode1832()
                }
                1834 -> {
                    node = parserDefinedNode1834()
                }
                1835 -> {
                    node = parserDefinedNode1835()
                }
                1836 -> {
                    node = parserDefinedNode1836()
                }
                1837 -> {
                    node = parserDefinedNode1837()
                }
                1838 -> {
                    node = parserDefinedNode1838()
                }
                1839 -> {
                    node = parserDefinedNode1839()
                }
                1840 -> {
                    node = parserDefinedNode1840()
                }
                1841 -> {
                    node = parserDefinedNode1841()
                }
                1842 -> {
                    node = parserDefinedNode1842()
                }
                1843 -> {
                    node = parserDefinedNode1843()
                }
                1844 -> {
                    node = parserDefinedNode1844()
                }
                1845 -> {
                    node = parserDefinedNode1845()
                }
                1847 -> {
                    node = parserDefinedNode1847()
                }
                1848 -> {
                    node = parserDefinedNode1848()
                }
                1850 -> {
                    node = parserDefinedNode1850()
                }
                1851 -> {
                    node = parserDefinedNode1851()
                }
                1852 -> {
                    node = parserDefinedNode1852()
                }
                1853 -> {
                    node = parserDefinedNode1853()
                }
                1854 -> {
                    node = parserDefinedNode1854()
                }
                1856 -> {
                    node = parserDefinedNode1856()
                }
                1857 -> {
                    node = parserDefinedNode1857()
                }
                1858 -> {
                    node = parserDefinedNode1858()
                }
                1859 -> {
                    node = parserDefinedNode1859()
                }
                1860 -> {
                    node = parserDefinedNode1860()
                }
                1861 -> {
                    node = parserDefinedNode1861()
                }
                1862 -> {
                    node = parserDefinedNode1862()
                }
                1863 -> {
                    node = parserDefinedNode1863()
                }
                1864 -> {
                    node = parserDefinedNode1864()
                }
                1865 -> {
                    node = parserDefinedNode1865()
                }
                1866 -> {
                    node = parserDefinedNode1866()
                }
                1867 -> {
                    node = parserDefinedNode1867()
                }
                1868 -> {
                    node = parserDefinedNode1868()
                }
                1869 -> {
                    node = parserDefinedNode1869()
                }
                1870 -> {
                    node = parserDefinedNode1870()
                }
                1871 -> {
                    node = parserDefinedNode1871()
                }
                1872 -> {
                    node = parserDefinedNode1872()
                }
                1873 -> {
                    node = parserDefinedNode1873()
                }
                1874 -> {
                    node = parserDefinedNode1874()
                }
                1875 -> {
                    node = parserDefinedNode1875()
                }
                1876 -> {
                    node = parserDefinedNode1876()
                }
                1877 -> {
                    node = parserDefinedNode1877()
                }
                1878 -> {
                    node = parserDefinedNode1878()
                }
                1879 -> {
                    node = parserDefinedNode1879()
                }
                1880 -> {
                    node = parserDefinedNode1880()
                }
                1881 -> {
                    node = parserDefinedNode1881()
                }
                1882 -> {
                    node = parserDefinedNode1882()
                }
                1883 -> {
                    node = parserDefinedNode1883()
                }
                1884 -> {
                    node = parserDefinedNode1884()
                }
                1885 -> {
                    node = parserDefinedNode1885()
                }
                1886 -> {
                    node = parserDefinedNode1886()
                }
                1887 -> {
                    node = parserDefinedNode1887()
                }
                1888 -> {
                    node = parserDefinedNode1888()
                }
                1889 -> {
                    node = parserDefinedNode1889()
                }
                1890 -> {
                    node = parserDefinedNode1890()
                }
                1891 -> {
                    node = parserDefinedNode1891()
                }
                1892 -> {
                    node = parserDefinedNode1892()
                }
                1893 -> {
                    node = parserDefinedNode1893()
                }
                1894 -> {
                    node = parserDefinedNode1894()
                }
                1895 -> {
                    node = parserDefinedNode1895()
                }
                1896 -> {
                    node = parserDefinedNode1896()
                }
                1897 -> {
                    node = parserDefinedNode1897()
                }
                1898 -> {
                    node = parserDefinedNode1898()
                }
                1900 -> {
                    node = parserDefinedNode1900()
                }
                1901 -> {
                    node = parserDefinedNode1901()
                }
                1903 -> {
                    node = parserDefinedNode1903()
                }
                1905 -> {
                    node = parserDefinedNode1905()
                }
                1906 -> {
                    node = parserDefinedNode1906()
                }
                1907 -> {
                    node = parserDefinedNode1907()
                }
                1908 -> {
                    node = parserDefinedNode1908()
                }
                1909 -> {
                    node = parserDefinedNode1909()
                }
                1910 -> {
                    node = parserDefinedNode1910()
                }
                1911 -> {
                    node = parserDefinedNode1911()
                }
                1912 -> {
                    node = parserDefinedNode1912()
                }
                1913 -> {
                    node = parserDefinedNode1913()
                }
                1914 -> {
                    node = parserDefinedNode1914()
                }
                1915 -> {
                    node = parserDefinedNode1915()
                }
                1916 -> {
                    node = parserDefinedNode1916()
                }
                1917 -> {
                    node = parserDefinedNode1917()
                }
                1918 -> {
                    node = parserDefinedNode1918()
                }
            }
        }
        if ((parsererror != null)) {
            TODO(parsererror!!)
        }
    }

    private fun userCode0() {
        stack.add(ASTSparqlDoc())
    }

    private fun userCode1() {
        val tmp430 = stack.removeLast()
        (stack[stack.size - 1] as ASTSparqlDoc).astAssign(0, tmp430)
    }

    private fun userCode2() {
        stack.add(ASTClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptional())
    }

    private fun userCode3() {
        val tmp422 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptional).astAssign(0, tmp422)
    }

    private fun userCode4() {
        stack.add(ASTValuesClauseOptional())
    }

    private fun userCode5() {
        val tmp421 = stack.removeLast()
        (stack[stack.size - 1] as ASTValuesClauseOptional).astAssign(0, tmp421)
    }

    private fun userCode6() {
        val tmp423 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfSelectQueryOrConstructQueryOrDescribeQueryOrAskQueryAndValuesClauseOptional).astAssign(1, tmp423)
    }

    private fun userCode7() {
        stack.add(ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional())
    }

    private fun userCode8() {
        stack.add(ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional())
    }

    private fun userCode9() {
        val tmp427 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional).astAssign(0, tmp427)
    }

    private fun userCode10() {
        stack.add(ASTClassOfPrologueAndUpdateOptional())
    }

    private fun userCode11() {
        stack.add(ASTClassOfPrologueAndUpdate())
    }

    private fun userCode12() {
        val tmp424 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdate).astAssign(0, tmp424)
    }

    private fun userCode13() {
        val tmp425 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdate).astAssign(1, tmp425)
    }

    private fun userCode14() {
        val tmp426 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdateOptional).astAssign(0, tmp426)
    }

    private fun userCode15() {
        val tmp428 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional).astAssign(1, tmp428)
    }

    private fun userCode16() {
        val tmp429 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptionalOptional).astAssign(0, tmp429)
    }

    private fun userCode17() {
        val tmp431 = stack.removeLast()
        (stack[stack.size - 1] as ASTSparqlDoc).astAssign(1, tmp431)
    }

    private fun userCode18() {
        stack.add(ASTUpdate())
    }

    private fun userCode19() {
        val tmp435 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional).astAssign(0, tmp435)
    }

    private fun userCode20() {
        val tmp432 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdate).astAssign(0, tmp432)
    }

    private fun userCode21() {
        val tmp433 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdate).astAssign(1, tmp433)
    }

    private fun userCode22() {
        val tmp434 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPrologueAndUpdateOptional).astAssign(0, tmp434)
    }

    private fun userCode23() {
        val tmp436 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfUpdate1AndClassOfPrologueAndUpdateOptional).astAssign(1, tmp436)
    }

    private fun userCode24() {
        val tmp437 = stack.removeLast()
        (stack[stack.size - 1] as ASTUpdate).astAssign(0, tmp437)
    }

    private fun userCode25() {
        stack.add(ASTPrologue())
    }

    private fun userCode26() {
        val tmp438 = stack.removeLast()
        (stack[stack.size - 1] as ASTPrologue).astAssign(0, tmp438)
    }

    private fun userCode27() {
        stack.add(ASTBaseDecl())
    }

    private fun userCode28() {
        stack.add(getLastTokenString())
    }

    private fun userCode29() {
        val tmp439 = stack.removeLast()
        (stack[stack.size - 1] as ASTBaseDecl).astAssign(0, tmp439)
    }

    private fun userCode30() {
        stack.add(ASTPrefixDecl())
    }

    private fun userCode31() {
        val tmp440 = stack.removeLast()
        (stack[stack.size - 1] as ASTPrefixDecl).astAssign(0, tmp440)
    }

    private fun userCode32() {
        val tmp441 = stack.removeLast()
        (stack[stack.size - 1] as ASTPrefixDecl).astAssign(1, tmp441)
    }

    private fun userCode33() {
        stack.add(ASTSelectQuery())
    }

    private fun userCode34() {
        val tmp443 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectQuery).astAssign(0, tmp443)
    }

    private fun userCode35() {
        stack.add(ASTListOfDatasetClause())
    }

    private fun userCode36() {
        val tmp442 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDatasetClause).astAssign(0, tmp442)
    }

    private fun userCode37() {
        val tmp444 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectQuery).astAssign(1, tmp444)
    }

    private fun userCode38() {
        val tmp445 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectQuery).astAssign(2, tmp445)
    }

    private fun userCode39() {
        val tmp446 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectQuery).astAssign(3, tmp446)
    }

    private fun userCode40() {
        stack.add(ASTSubSelect())
    }

    private fun userCode41() {
        val tmp448 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubSelect).astAssign(0, tmp448)
    }

    private fun userCode42() {
        val tmp449 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubSelect).astAssign(1, tmp449)
    }

    private fun userCode43() {
        val tmp450 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubSelect).astAssign(2, tmp450)
    }

    private fun userCode44() {
        val tmp447 = stack.removeLast()
        (stack[stack.size - 1] as ASTValuesClauseOptional).astAssign(0, tmp447)
    }

    private fun userCode45() {
        val tmp451 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubSelect).astAssign(3, tmp451)
    }

    private fun userCode46() {
        stack.add(ASTSelectClause())
    }

    private fun userCode47() {
        stack.add(ASTAnonymous("DISTINCT"))
    }

    private fun userCode48() {
        stack.add(ASTAnonymous("REDUCED"))
    }

    private fun userCode49() {
        val tmp455 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectClause).astAssign(0, tmp455)
    }

    private fun userCode50() {
        stack.add(ASTListOfInterfaceOfVarOrClassOfExpressionAndVar())
    }

    private fun userCode51() {
        stack.add(ASTClassOfExpressionAndVar())
    }

    private fun userCode52() {
        val tmp452 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndVar).astAssign(0, tmp452)
    }

    private fun userCode53() {
        val tmp453 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndVar).astAssign(1, tmp453)
    }

    private fun userCode54() {
        val tmp454 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfInterfaceOfVarOrClassOfExpressionAndVar).astAssign(0, tmp454)
    }

    private fun userCode55() {
        val tmp456 = stack.removeLast()
        (stack[stack.size - 1] as ASTSelectClause).astAssign(1, tmp456)
    }

    private fun userCode56() {
        stack.add(ASTSelectClauseAll())
    }

    private fun userCode57() {
        stack.add(ASTConstructQuery())
    }

    private fun userCode58() {
        stack.add(ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier())
    }

    private fun userCode59() {
        val tmp458 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier).astAssign(0, tmp458)
    }

    private fun userCode60() {
        val tmp457 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDatasetClause).astAssign(0, tmp457)
    }

    private fun userCode61() {
        val tmp459 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier).astAssign(1, tmp459)
    }

    private fun userCode62() {
        val tmp460 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier).astAssign(2, tmp460)
    }

    private fun userCode63() {
        val tmp461 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfConstructTemplateAndListOfDatasetClauseAndWhereClauseAndSolutionModifier).astAssign(3, tmp461)
    }

    private fun userCode64() {
        stack.add(ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier())
    }

    private fun userCode65() {
        val tmp462 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDatasetClause).astAssign(0, tmp462)
    }

    private fun userCode66() {
        val tmp463 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier).astAssign(0, tmp463)
    }

    private fun userCode67() {
        val tmp464 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier).astAssign(1, tmp464)
    }

    private fun userCode68() {
        val tmp465 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfListOfDatasetClauseAndGroupGraphPatternAndSolutionModifier).astAssign(2, tmp465)
    }

    private fun userCode69() {
        val tmp466 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructQuery).astAssign(0, tmp466)
    }

    private fun userCode70() {
        stack.add(ASTDescribeQuery())
    }

    private fun userCode71() {
        stack.add(ASTListOfVarOrIri())
    }

    private fun userCode72() {
        val tmp467 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfVarOrIri).astAssign(0, tmp467)
    }

    private fun userCode73() {
        val tmp470 = stack.removeLast()
        (stack[stack.size - 1] as ASTDescribeQuery).astAssign(0, tmp470)
    }

    private fun userCode74() {
        val tmp468 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDatasetClause).astAssign(0, tmp468)
    }

    private fun userCode75() {
        val tmp471 = stack.removeLast()
        (stack[stack.size - 1] as ASTDescribeQuery).astAssign(1, tmp471)
    }

    private fun userCode76() {
        stack.add(ASTWhereClauseOptional())
    }

    private fun userCode77() {
        val tmp469 = stack.removeLast()
        (stack[stack.size - 1] as ASTWhereClauseOptional).astAssign(0, tmp469)
    }

    private fun userCode78() {
        val tmp472 = stack.removeLast()
        (stack[stack.size - 1] as ASTDescribeQuery).astAssign(2, tmp472)
    }

    private fun userCode79() {
        val tmp473 = stack.removeLast()
        (stack[stack.size - 1] as ASTDescribeQuery).astAssign(3, tmp473)
    }

    private fun userCode80() {
        stack.add(ASTDescribeQueryAll())
    }

    private fun userCode81() {
        stack.add(ASTAskQuery())
    }

    private fun userCode82() {
        val tmp474 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDatasetClause).astAssign(0, tmp474)
    }

    private fun userCode83() {
        val tmp475 = stack.removeLast()
        (stack[stack.size - 1] as ASTAskQuery).astAssign(0, tmp475)
    }

    private fun userCode84() {
        val tmp476 = stack.removeLast()
        (stack[stack.size - 1] as ASTAskQuery).astAssign(1, tmp476)
    }

    private fun userCode85() {
        val tmp477 = stack.removeLast()
        (stack[stack.size - 1] as ASTAskQuery).astAssign(2, tmp477)
    }

    private fun userCode86() {
        stack.add(ASTDatasetClause())
    }

    private fun userCode87() {
        val tmp478 = stack.removeLast()
        (stack[stack.size - 1] as ASTDatasetClause).astAssign(0, tmp478)
    }

    private fun userCode88() {
        stack.add(ASTDefaultGraphClause())
    }

    private fun userCode89() {
        val tmp479 = stack.removeLast()
        (stack[stack.size - 1] as ASTDefaultGraphClause).astAssign(0, tmp479)
    }

    private fun userCode90() {
        stack.add(ASTNamedGraphClause())
    }

    private fun userCode91() {
        val tmp480 = stack.removeLast()
        (stack[stack.size - 1] as ASTNamedGraphClause).astAssign(0, tmp480)
    }

    private fun userCode92() {
        stack.add(ASTSourceSelector())
    }

    private fun userCode93() {
        val tmp481 = stack.removeLast()
        (stack[stack.size - 1] as ASTSourceSelector).astAssign(0, tmp481)
    }

    private fun userCode94() {
        stack.add(ASTWhereClause())
    }

    private fun userCode95() {
        stack.add(ASTAnonymous("WHERE"))
    }

    private fun userCode96() {
        val tmp482 = stack.removeLast()
        (stack[stack.size - 1] as ASTWhereClause).astAssign(0, tmp482)
    }

    private fun userCode97() {
        val tmp483 = stack.removeLast()
        (stack[stack.size - 1] as ASTWhereClause).astAssign(1, tmp483)
    }

    private fun userCode98() {
        stack.add(ASTSolutionModifier())
    }

    private fun userCode99() {
        stack.add(ASTGroupClauseOptional())
    }

    private fun userCode100() {
        val tmp484 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupClauseOptional).astAssign(0, tmp484)
    }

    private fun userCode101() {
        val tmp488 = stack.removeLast()
        (stack[stack.size - 1] as ASTSolutionModifier).astAssign(0, tmp488)
    }

    private fun userCode102() {
        stack.add(ASTHavingClauseOptional())
    }

    private fun userCode103() {
        val tmp485 = stack.removeLast()
        (stack[stack.size - 1] as ASTHavingClauseOptional).astAssign(0, tmp485)
    }

    private fun userCode104() {
        val tmp489 = stack.removeLast()
        (stack[stack.size - 1] as ASTSolutionModifier).astAssign(1, tmp489)
    }

    private fun userCode105() {
        stack.add(ASTOrderClauseOptional())
    }

    private fun userCode106() {
        val tmp486 = stack.removeLast()
        (stack[stack.size - 1] as ASTOrderClauseOptional).astAssign(0, tmp486)
    }

    private fun userCode107() {
        val tmp490 = stack.removeLast()
        (stack[stack.size - 1] as ASTSolutionModifier).astAssign(2, tmp490)
    }

    private fun userCode108() {
        stack.add(ASTLimitOffsetClausesOptional())
    }

    private fun userCode109() {
        val tmp487 = stack.removeLast()
        (stack[stack.size - 1] as ASTLimitOffsetClausesOptional).astAssign(0, tmp487)
    }

    private fun userCode110() {
        val tmp491 = stack.removeLast()
        (stack[stack.size - 1] as ASTSolutionModifier).astAssign(3, tmp491)
    }

    private fun userCode111() {
        stack.add(ASTGroupClause())
    }

    private fun userCode112() {
        stack.add(ASTListOfGroupCondition())
    }

    private fun userCode113() {
        val tmp492 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfGroupCondition).astAssign(0, tmp492)
    }

    private fun userCode114() {
        val tmp493 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupClause).astAssign(0, tmp493)
    }

    private fun userCode115() {
        stack.add(ASTClassOfExpressionAndVarOptional())
    }

    private fun userCode116() {
        val tmp495 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndVarOptional).astAssign(0, tmp495)
    }

    private fun userCode117() {
        stack.add(ASTVarOptional())
    }

    private fun userCode118() {
        val tmp494 = stack.removeLast()
        (stack[stack.size - 1] as ASTVarOptional).astAssign(0, tmp494)
    }

    private fun userCode119() {
        val tmp496 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndVarOptional).astAssign(1, tmp496)
    }

    private fun userCode120() {
        stack.add(ASTHavingClause())
    }

    private fun userCode121() {
        stack.add(ASTListOfHavingCondition())
    }

    private fun userCode122() {
        val tmp497 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfHavingCondition).astAssign(0, tmp497)
    }

    private fun userCode123() {
        val tmp498 = stack.removeLast()
        (stack[stack.size - 1] as ASTHavingClause).astAssign(0, tmp498)
    }

    private fun userCode124() {
        stack.add(ASTHavingCondition())
    }

    private fun userCode125() {
        val tmp499 = stack.removeLast()
        (stack[stack.size - 1] as ASTHavingCondition).astAssign(0, tmp499)
    }

    private fun userCode126() {
        stack.add(ASTOrderClause())
    }

    private fun userCode127() {
        stack.add(ASTListOfOrderCondition())
    }

    private fun userCode128() {
        val tmp500 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfOrderCondition).astAssign(0, tmp500)
    }

    private fun userCode129() {
        val tmp501 = stack.removeLast()
        (stack[stack.size - 1] as ASTOrderClause).astAssign(0, tmp501)
    }

    private fun userCode130() {
        stack.add(ASTOrderCondition())
    }

    private fun userCode131() {
        stack.add(ASTAnonymous("ASC"))
    }

    private fun userCode132() {
        stack.add(ASTAnonymous("DESC"))
    }

    private fun userCode133() {
        val tmp502 = stack.removeLast()
        (stack[stack.size - 1] as ASTOrderCondition).astAssign(0, tmp502)
    }

    private fun userCode134() {
        val tmp503 = stack.removeLast()
        (stack[stack.size - 1] as ASTOrderCondition).astAssign(1, tmp503)
    }

    private fun userCode135() {
        stack.add(ASTClassOfLimitClauseAndOffsetClauseOptional())
    }

    private fun userCode136() {
        val tmp505 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfLimitClauseAndOffsetClauseOptional).astAssign(0, tmp505)
    }

    private fun userCode137() {
        stack.add(ASTOffsetClauseOptional())
    }

    private fun userCode138() {
        val tmp504 = stack.removeLast()
        (stack[stack.size - 1] as ASTOffsetClauseOptional).astAssign(0, tmp504)
    }

    private fun userCode139() {
        val tmp506 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfLimitClauseAndOffsetClauseOptional).astAssign(1, tmp506)
    }

    private fun userCode140() {
        stack.add(ASTClassOfOffsetClauseAndLimitClauseOptional())
    }

    private fun userCode141() {
        val tmp508 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfOffsetClauseAndLimitClauseOptional).astAssign(0, tmp508)
    }

    private fun userCode142() {
        stack.add(ASTLimitClauseOptional())
    }

    private fun userCode143() {
        val tmp507 = stack.removeLast()
        (stack[stack.size - 1] as ASTLimitClauseOptional).astAssign(0, tmp507)
    }

    private fun userCode144() {
        val tmp509 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfOffsetClauseAndLimitClauseOptional).astAssign(1, tmp509)
    }

    private fun userCode145() {
        stack.add(ASTLimitClause())
    }

    private fun userCode146() {
        val tmp510 = stack.removeLast()
        (stack[stack.size - 1] as ASTLimitClause).astAssign(0, tmp510)
    }

    private fun userCode147() {
        stack.add(ASTOffsetClause())
    }

    private fun userCode148() {
        val tmp511 = stack.removeLast()
        (stack[stack.size - 1] as ASTOffsetClause).astAssign(0, tmp511)
    }

    private fun userCode149() {
        stack.add(ASTLoad())
    }

    private fun userCode150() {
        stack.add(ASTAnonymous("SILENT"))
    }

    private fun userCode151() {
        val tmp513 = stack.removeLast()
        (stack[stack.size - 1] as ASTLoad).astAssign(0, tmp513)
    }

    private fun userCode152() {
        val tmp514 = stack.removeLast()
        (stack[stack.size - 1] as ASTLoad).astAssign(1, tmp514)
    }

    private fun userCode153() {
        stack.add(ASTGraphRefOptional())
    }

    private fun userCode154() {
        val tmp512 = stack.removeLast()
        (stack[stack.size - 1] as ASTGraphRefOptional).astAssign(0, tmp512)
    }

    private fun userCode155() {
        val tmp515 = stack.removeLast()
        (stack[stack.size - 1] as ASTLoad).astAssign(2, tmp515)
    }

    private fun userCode156() {
        stack.add(ASTClear())
    }

    private fun userCode157() {
        val tmp516 = stack.removeLast()
        (stack[stack.size - 1] as ASTClear).astAssign(0, tmp516)
    }

    private fun userCode158() {
        val tmp517 = stack.removeLast()
        (stack[stack.size - 1] as ASTClear).astAssign(1, tmp517)
    }

    private fun userCode159() {
        stack.add(ASTDrop())
    }

    private fun userCode160() {
        val tmp518 = stack.removeLast()
        (stack[stack.size - 1] as ASTDrop).astAssign(0, tmp518)
    }

    private fun userCode161() {
        val tmp519 = stack.removeLast()
        (stack[stack.size - 1] as ASTDrop).astAssign(1, tmp519)
    }

    private fun userCode162() {
        stack.add(ASTCreate())
    }

    private fun userCode163() {
        val tmp520 = stack.removeLast()
        (stack[stack.size - 1] as ASTCreate).astAssign(0, tmp520)
    }

    private fun userCode164() {
        val tmp521 = stack.removeLast()
        (stack[stack.size - 1] as ASTCreate).astAssign(1, tmp521)
    }

    private fun userCode165() {
        stack.add(ASTAdd())
    }

    private fun userCode166() {
        val tmp522 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdd).astAssign(0, tmp522)
    }

    private fun userCode167() {
        val tmp523 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdd).astAssign(1, tmp523)
    }

    private fun userCode168() {
        val tmp524 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdd).astAssign(2, tmp524)
    }

    private fun userCode169() {
        stack.add(ASTMove())
    }

    private fun userCode170() {
        val tmp525 = stack.removeLast()
        (stack[stack.size - 1] as ASTMove).astAssign(0, tmp525)
    }

    private fun userCode171() {
        val tmp526 = stack.removeLast()
        (stack[stack.size - 1] as ASTMove).astAssign(1, tmp526)
    }

    private fun userCode172() {
        val tmp527 = stack.removeLast()
        (stack[stack.size - 1] as ASTMove).astAssign(2, tmp527)
    }

    private fun userCode173() {
        stack.add(ASTCopy())
    }

    private fun userCode174() {
        val tmp528 = stack.removeLast()
        (stack[stack.size - 1] as ASTCopy).astAssign(0, tmp528)
    }

    private fun userCode175() {
        val tmp529 = stack.removeLast()
        (stack[stack.size - 1] as ASTCopy).astAssign(1, tmp529)
    }

    private fun userCode176() {
        val tmp530 = stack.removeLast()
        (stack[stack.size - 1] as ASTCopy).astAssign(2, tmp530)
    }

    private fun userCode177() {
        stack.add(ASTInsertData())
    }

    private fun userCode178() {
        val tmp531 = stack.removeLast()
        (stack[stack.size - 1] as ASTInsertData).astAssign(0, tmp531)
    }

    private fun userCode179() {
        stack.add(ASTDeleteData())
    }

    private fun userCode180() {
        val tmp532 = stack.removeLast()
        (stack[stack.size - 1] as ASTDeleteData).astAssign(0, tmp532)
    }

    private fun userCode181() {
        stack.add(ASTDeleteWhere())
    }

    private fun userCode182() {
        val tmp533 = stack.removeLast()
        (stack[stack.size - 1] as ASTDeleteWhere).astAssign(0, tmp533)
    }

    private fun userCode183() {
        stack.add(ASTModify())
    }

    private fun userCode184() {
        stack.add(ASTiriOptional())
    }

    private fun userCode185() {
        val tmp534 = stack.removeLast()
        (stack[stack.size - 1] as ASTiriOptional).astAssign(0, tmp534)
    }

    private fun userCode186() {
        val tmp539 = stack.removeLast()
        (stack[stack.size - 1] as ASTModify).astAssign(0, tmp539)
    }

    private fun userCode187() {
        stack.add(ASTClassOfDeleteClauseAndInsertClauseOptional())
    }

    private fun userCode188() {
        val tmp536 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfDeleteClauseAndInsertClauseOptional).astAssign(0, tmp536)
    }

    private fun userCode189() {
        stack.add(ASTInsertClauseOptional())
    }

    private fun userCode190() {
        val tmp535 = stack.removeLast()
        (stack[stack.size - 1] as ASTInsertClauseOptional).astAssign(0, tmp535)
    }

    private fun userCode191() {
        val tmp537 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfDeleteClauseAndInsertClauseOptional).astAssign(1, tmp537)
    }

    private fun userCode192() {
        val tmp540 = stack.removeLast()
        (stack[stack.size - 1] as ASTModify).astAssign(1, tmp540)
    }

    private fun userCode193() {
        stack.add(ASTListOfUsingClause())
    }

    private fun userCode194() {
        val tmp538 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfUsingClause).astAssign(0, tmp538)
    }

    private fun userCode195() {
        val tmp541 = stack.removeLast()
        (stack[stack.size - 1] as ASTModify).astAssign(2, tmp541)
    }

    private fun userCode196() {
        val tmp542 = stack.removeLast()
        (stack[stack.size - 1] as ASTModify).astAssign(3, tmp542)
    }

    private fun userCode197() {
        stack.add(ASTDeleteClause())
    }

    private fun userCode198() {
        val tmp543 = stack.removeLast()
        (stack[stack.size - 1] as ASTDeleteClause).astAssign(0, tmp543)
    }

    private fun userCode199() {
        stack.add(ASTInsertClause())
    }

    private fun userCode200() {
        val tmp544 = stack.removeLast()
        (stack[stack.size - 1] as ASTInsertClause).astAssign(0, tmp544)
    }

    private fun userCode201() {
        stack.add(ASTUsingClause())
    }

    private fun userCode202() {
        val tmp545 = stack.removeLast()
        (stack[stack.size - 1] as ASTUsingClause).astAssign(0, tmp545)
    }

    private fun userCode203() {
        stack.add(ASTClassOfGRAPHAndiri())
    }

    private fun userCode204() {
        stack.add(ASTAnonymous("GRAPH"))
    }

    private fun userCode205() {
        val tmp546 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfGRAPHAndiri).astAssign(0, tmp546)
    }

    private fun userCode206() {
        val tmp547 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfGRAPHAndiri).astAssign(1, tmp547)
    }

    private fun userCode207() {
        stack.add(ASTGraphRef())
    }

    private fun userCode208() {
        val tmp548 = stack.removeLast()
        (stack[stack.size - 1] as ASTGraphRef).astAssign(0, tmp548)
    }

    private fun userCode209() {
        stack.add(ASTGraphRefDefault())
    }

    private fun userCode210() {
        stack.add(ASTGraphRefNamed())
    }

    private fun userCode211() {
        stack.add(ASTGraphRefAll2())
    }

    private fun userCode212() {
        stack.add(ASTQuadPattern())
    }

    private fun userCode213() {
        val tmp549 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuadPattern).astAssign(0, tmp549)
    }

    private fun userCode214() {
        stack.add(ASTQuadData())
    }

    private fun userCode215() {
        val tmp550 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuadData).astAssign(0, tmp550)
    }

    private fun userCode216() {
        stack.add(ASTQuads())
    }

    private fun userCode217() {
        stack.add(ASTTriplesTemplateOptional())
    }

    private fun userCode218() {
        val tmp551 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplateOptional).astAssign(0, tmp551)
    }

    private fun userCode219() {
        val tmp557 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuads).astAssign(0, tmp557)
    }

    private fun userCode220() {
        stack.add(ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional())
    }

    private fun userCode221() {
        stack.add(ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional())
    }

    private fun userCode222() {
        val tmp553 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional).astAssign(0, tmp553)
    }

    private fun userCode223() {
        stack.add(ASTAnonymous("point"))
    }

    private fun userCode224() {
        val tmp554 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional).astAssign(1, tmp554)
    }

    private fun userCode225() {
        val tmp552 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplateOptional).astAssign(0, tmp552)
    }

    private fun userCode226() {
        val tmp555 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional).astAssign(2, tmp555)
    }

    private fun userCode227() {
        val tmp556 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfClassOfQuadsNotTriplesAndpointAndTriplesTemplateOptional).astAssign(0, tmp556)
    }

    private fun userCode228() {
        val tmp558 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuads).astAssign(1, tmp558)
    }

    private fun userCode229() {
        stack.add(ASTQuadsNotTriples())
    }

    private fun userCode230() {
        val tmp560 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuadsNotTriples).astAssign(0, tmp560)
    }

    private fun userCode231() {
        val tmp559 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplateOptional).astAssign(0, tmp559)
    }

    private fun userCode232() {
        val tmp561 = stack.removeLast()
        (stack[stack.size - 1] as ASTQuadsNotTriples).astAssign(1, tmp561)
    }

    private fun userCode233() {
        stack.add(ASTTriplesTemplate())
    }

    private fun userCode234() {
        val tmp565 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplate).astAssign(0, tmp565)
    }

    private fun userCode235() {
        stack.add(ASTTriplesTemplateOptionalOptional())
    }

    private fun userCode236() {
        val tmp562 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplateOptional).astAssign(0, tmp562)
    }

    private fun userCode237() {
        val tmp564 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplateOptionalOptional).astAssign(0, tmp564)
    }

    private fun userCode238() {
        val tmp566 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesTemplate).astAssign(1, tmp566)
    }

    private fun userCode239() {
        stack.add(ASTGroupGraphPattern())
    }

    private fun userCode240() {
        val tmp567 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupGraphPattern).astAssign(0, tmp567)
    }

    private fun userCode241() {
        stack.add(ASTGroupGraphPatternSub())
    }

    private fun userCode242() {
        stack.add(ASTTriplesBlockOptional())
    }

    private fun userCode243() {
        val tmp568 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlockOptional).astAssign(0, tmp568)
    }

    private fun userCode244() {
        val tmp574 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupGraphPatternSub).astAssign(0, tmp574)
    }

    private fun userCode245() {
        stack.add(ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional())
    }

    private fun userCode246() {
        stack.add(ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional())
    }

    private fun userCode247() {
        val tmp570 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional).astAssign(0, tmp570)
    }

    private fun userCode248() {
        val tmp571 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional).astAssign(1, tmp571)
    }

    private fun userCode249() {
        val tmp569 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlockOptional).astAssign(0, tmp569)
    }

    private fun userCode250() {
        val tmp572 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional).astAssign(2, tmp572)
    }

    private fun userCode251() {
        val tmp573 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfClassOfGraphPatternNotTriplesAndpointAndTriplesBlockOptional).astAssign(0, tmp573)
    }

    private fun userCode252() {
        val tmp575 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupGraphPatternSub).astAssign(1, tmp575)
    }

    private fun userCode253() {
        stack.add(ASTTriplesBlock())
    }

    private fun userCode254() {
        val tmp579 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlock).astAssign(0, tmp579)
    }

    private fun userCode255() {
        stack.add(ASTTriplesBlockOptionalOptional())
    }

    private fun userCode256() {
        val tmp576 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlockOptional).astAssign(0, tmp576)
    }

    private fun userCode257() {
        val tmp578 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlockOptionalOptional).astAssign(0, tmp578)
    }

    private fun userCode258() {
        val tmp580 = stack.removeLast()
        (stack[stack.size - 1] as ASTTriplesBlock).astAssign(1, tmp580)
    }

    private fun userCode259() {
        stack.add(ASTOptionalGraphPattern())
    }

    private fun userCode260() {
        val tmp581 = stack.removeLast()
        (stack[stack.size - 1] as ASTOptionalGraphPattern).astAssign(0, tmp581)
    }

    private fun userCode261() {
        stack.add(ASTGraphGraphPattern())
    }

    private fun userCode262() {
        val tmp582 = stack.removeLast()
        (stack[stack.size - 1] as ASTGraphGraphPattern).astAssign(0, tmp582)
    }

    private fun userCode263() {
        val tmp583 = stack.removeLast()
        (stack[stack.size - 1] as ASTGraphGraphPattern).astAssign(1, tmp583)
    }

    private fun userCode264() {
        stack.add(ASTServiceGraphPattern())
    }

    private fun userCode265() {
        val tmp584 = stack.removeLast()
        (stack[stack.size - 1] as ASTServiceGraphPattern).astAssign(0, tmp584)
    }

    private fun userCode266() {
        val tmp585 = stack.removeLast()
        (stack[stack.size - 1] as ASTServiceGraphPattern).astAssign(1, tmp585)
    }

    private fun userCode267() {
        val tmp586 = stack.removeLast()
        (stack[stack.size - 1] as ASTServiceGraphPattern).astAssign(2, tmp586)
    }

    private fun userCode268() {
        stack.add(ASTBind())
    }

    private fun userCode269() {
        val tmp587 = stack.removeLast()
        (stack[stack.size - 1] as ASTBind).astAssign(0, tmp587)
    }

    private fun userCode270() {
        val tmp588 = stack.removeLast()
        (stack[stack.size - 1] as ASTBind).astAssign(1, tmp588)
    }

    private fun userCode271() {
        stack.add(ASTValuesClause())
    }

    private fun userCode272() {
        val tmp589 = stack.removeLast()
        (stack[stack.size - 1] as ASTValuesClause).astAssign(0, tmp589)
    }

    private fun userCode273() {
        stack.add(ASTInlineDataOneVar())
    }

    private fun userCode274() {
        val tmp591 = stack.removeLast()
        (stack[stack.size - 1] as ASTInlineDataOneVar).astAssign(0, tmp591)
    }

    private fun userCode275() {
        stack.add(ASTListOfDataBlockValue())
    }

    private fun userCode276() {
        val tmp590 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDataBlockValue).astAssign(0, tmp590)
    }

    private fun userCode277() {
        val tmp592 = stack.removeLast()
        (stack[stack.size - 1] as ASTInlineDataOneVar).astAssign(1, tmp592)
    }

    private fun userCode278() {
        stack.add(ASTInlineDataFull())
    }

    private fun userCode279() {
        stack.add(ASTListOfVar())
    }

    private fun userCode280() {
        val tmp593 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfVar).astAssign(0, tmp593)
    }

    private fun userCode281() {
        val tmp598 = stack.removeLast()
        (stack[stack.size - 1] as ASTInlineDataFull).astAssign(0, tmp598)
    }

    private fun userCode282() {
        stack.add(ASTListOfInterfaceOfListOfDataBlockValueOrNILParam())
    }

    private fun userCode283() {
        val tmp595 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfDataBlockValue).astAssign(0, tmp595)
    }

    private fun userCode284() {
        val tmp597 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfInterfaceOfListOfDataBlockValueOrNILParam).astAssign(0, tmp597)
    }

    private fun userCode285() {
        val tmp599 = stack.removeLast()
        (stack[stack.size - 1] as ASTInlineDataFull).astAssign(1, tmp599)
    }

    private fun userCode286() {
        stack.add(ASTUNDEF())
    }

    private fun userCode287() {
        stack.add(ASTMinusGraphPattern())
    }

    private fun userCode288() {
        val tmp600 = stack.removeLast()
        (stack[stack.size - 1] as ASTMinusGraphPattern).astAssign(0, tmp600)
    }

    private fun userCode289() {
        stack.add(ASTGroupOrUnionGraphPattern())
    }

    private fun userCode290() {
        val tmp602 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupOrUnionGraphPattern).astAssign(0, tmp602)
    }

    private fun userCode291() {
        stack.add(ASTListOfGroupGraphPattern())
    }

    private fun userCode292() {
        val tmp601 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfGroupGraphPattern).astAssign(0, tmp601)
    }

    private fun userCode293() {
        val tmp603 = stack.removeLast()
        (stack[stack.size - 1] as ASTGroupOrUnionGraphPattern).astAssign(1, tmp603)
    }

    private fun userCode294() {
        stack.add(ASTFilter())
    }

    private fun userCode295() {
        val tmp604 = stack.removeLast()
        (stack[stack.size - 1] as ASTFilter).astAssign(0, tmp604)
    }

    private fun userCode296() {
        stack.add(ASTFunctionCall())
    }

    private fun userCode297() {
        val tmp605 = stack.removeLast()
        (stack[stack.size - 1] as ASTFunctionCall).astAssign(0, tmp605)
    }

    private fun userCode298() {
        val tmp606 = stack.removeLast()
        (stack[stack.size - 1] as ASTFunctionCall).astAssign(1, tmp606)
    }

    private fun userCode299() {
        stack.add(ASTClassOfDISTINCTAndExpressionAndListOfExpression())
    }

    private fun userCode300() {
        val tmp608 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfDISTINCTAndExpressionAndListOfExpression).astAssign(0, tmp608)
    }

    private fun userCode301() {
        val tmp609 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfDISTINCTAndExpressionAndListOfExpression).astAssign(1, tmp609)
    }

    private fun userCode302() {
        stack.add(ASTListOfExpression())
    }

    private fun userCode303() {
        val tmp607 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfExpression).astAssign(0, tmp607)
    }

    private fun userCode304() {
        val tmp610 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfDISTINCTAndExpressionAndListOfExpression).astAssign(2, tmp610)
    }

    private fun userCode305() {
        stack.add(ASTClassOfExpressionAndListOfExpression())
    }

    private fun userCode306() {
        val tmp612 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndListOfExpression).astAssign(0, tmp612)
    }

    private fun userCode307() {
        val tmp611 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfExpression).astAssign(0, tmp611)
    }

    private fun userCode308() {
        val tmp613 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfExpressionAndListOfExpression).astAssign(1, tmp613)
    }

    private fun userCode309() {
        stack.add(ASTConstructTemplate())
    }

    private fun userCode310() {
        stack.add(ASTConstructTriplesOptional())
    }

    private fun userCode311() {
        val tmp614 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTriplesOptional).astAssign(0, tmp614)
    }

    private fun userCode312() {
        val tmp615 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTemplate).astAssign(0, tmp615)
    }

    private fun userCode313() {
        stack.add(ASTConstructTriples())
    }

    private fun userCode314() {
        val tmp619 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTriples).astAssign(0, tmp619)
    }

    private fun userCode315() {
        stack.add(ASTConstructTriplesOptionalOptional())
    }

    private fun userCode316() {
        val tmp616 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTriplesOptional).astAssign(0, tmp616)
    }

    private fun userCode317() {
        val tmp618 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTriplesOptionalOptional).astAssign(0, tmp618)
    }

    private fun userCode318() {
        val tmp620 = stack.removeLast()
        (stack[stack.size - 1] as ASTConstructTriples).astAssign(1, tmp620)
    }

    private fun userCode319() {
        stack.add(ASTClassOfVarOrTermAndPropertyListNotEmpty())
    }

    private fun userCode320() {
        val tmp621 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVarOrTermAndPropertyListNotEmpty).astAssign(0, tmp621)
    }

    private fun userCode321() {
        val tmp622 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVarOrTermAndPropertyListNotEmpty).astAssign(1, tmp622)
    }

    private fun userCode322() {
        stack.add(ASTClassOfTriplesNodeAndPropertyListOptional())
    }

    private fun userCode323() {
        val tmp624 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfTriplesNodeAndPropertyListOptional).astAssign(0, tmp624)
    }

    private fun userCode324() {
        stack.add(ASTPropertyListOptional())
    }

    private fun userCode325() {
        val tmp623 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListOptional).astAssign(0, tmp623)
    }

    private fun userCode326() {
        val tmp625 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfTriplesNodeAndPropertyListOptional).astAssign(1, tmp625)
    }

    private fun userCode327() {
        stack.add(ASTPropertyList())
    }

    private fun userCode328() {
        val tmp626 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyList).astAssign(0, tmp626)
    }

    private fun userCode329() {
        stack.add(ASTPropertyListNotEmpty())
    }

    private fun userCode330() {
        val tmp632 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListNotEmpty).astAssign(0, tmp632)
    }

    private fun userCode331() {
        val tmp633 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListNotEmpty).astAssign(1, tmp633)
    }

    private fun userCode332() {
        stack.add(ASTListOfClassOfVerbAndObjectListOptional())
    }

    private fun userCode333() {
        stack.add(ASTClassOfVerbAndObjectListOptional())
    }

    private fun userCode334() {
        stack.add(ASTClassOfVerbAndObjectList())
    }

    private fun userCode335() {
        val tmp627 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVerbAndObjectList).astAssign(0, tmp627)
    }

    private fun userCode336() {
        val tmp628 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVerbAndObjectList).astAssign(1, tmp628)
    }

    private fun userCode337() {
        val tmp629 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVerbAndObjectListOptional).astAssign(0, tmp629)
    }

    private fun userCode338() {
        val tmp631 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfClassOfVerbAndObjectListOptional).astAssign(0, tmp631)
    }

    private fun userCode339() {
        val tmp634 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListNotEmpty).astAssign(2, tmp634)
    }

    private fun userCode340() {
        stack.add(ASTRDFType())
    }

    private fun userCode341() {
        stack.add(ASTObjectList())
    }

    private fun userCode342() {
        val tmp636 = stack.removeLast()
        (stack[stack.size - 1] as ASTObjectList).astAssign(0, tmp636)
    }

    private fun userCode343() {
        stack.add(ASTListOfObject())
    }

    private fun userCode344() {
        val tmp635 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfObject).astAssign(0, tmp635)
    }

    private fun userCode345() {
        val tmp637 = stack.removeLast()
        (stack[stack.size - 1] as ASTObjectList).astAssign(1, tmp637)
    }

    private fun userCode346() {
        stack.add(ASTObject())
    }

    private fun userCode347() {
        val tmp638 = stack.removeLast()
        (stack[stack.size - 1] as ASTObject).astAssign(0, tmp638)
    }

    private fun userCode348() {
        stack.add(ASTClassOfVarOrTermAndPropertyListPathNotEmpty())
    }

    private fun userCode349() {
        val tmp639 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVarOrTermAndPropertyListPathNotEmpty).astAssign(0, tmp639)
    }

    private fun userCode350() {
        val tmp640 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfVarOrTermAndPropertyListPathNotEmpty).astAssign(1, tmp640)
    }

    private fun userCode351() {
        stack.add(ASTClassOfTriplesNodePathAndPropertyListPathOptional())
    }

    private fun userCode352() {
        val tmp642 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfTriplesNodePathAndPropertyListPathOptional).astAssign(0, tmp642)
    }

    private fun userCode353() {
        stack.add(ASTPropertyListPathOptional())
    }

    private fun userCode354() {
        val tmp641 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListPathOptional).astAssign(0, tmp641)
    }

    private fun userCode355() {
        val tmp643 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfTriplesNodePathAndPropertyListPathOptional).astAssign(1, tmp643)
    }

    private fun userCode356() {
        stack.add(ASTPropertyListPath())
    }

    private fun userCode357() {
        val tmp644 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListPath).astAssign(0, tmp644)
    }

    private fun userCode358() {
        stack.add(ASTPropertyListPathNotEmpty())
    }

    private fun userCode359() {
        val tmp650 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListPathNotEmpty).astAssign(0, tmp650)
    }

    private fun userCode360() {
        val tmp651 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListPathNotEmpty).astAssign(1, tmp651)
    }

    private fun userCode361() {
        stack.add(ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional())
    }

    private fun userCode362() {
        stack.add(ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional())
    }

    private fun userCode363() {
        stack.add(ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList())
    }

    private fun userCode364() {
        val tmp645 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList).astAssign(0, tmp645)
    }

    private fun userCode365() {
        val tmp646 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectList).astAssign(1, tmp646)
    }

    private fun userCode366() {
        val tmp647 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional).astAssign(0, tmp647)
    }

    private fun userCode367() {
        val tmp649 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfClassOfInterfaceOfVerbPathOrVerbSimpleAndObjectListOptional).astAssign(0, tmp649)
    }

    private fun userCode368() {
        val tmp652 = stack.removeLast()
        (stack[stack.size - 1] as ASTPropertyListPathNotEmpty).astAssign(2, tmp652)
    }

    private fun userCode369() {
        stack.add(ASTVerbPath())
    }

    private fun userCode370() {
        val tmp653 = stack.removeLast()
        (stack[stack.size - 1] as ASTVerbPath).astAssign(0, tmp653)
    }

    private fun userCode371() {
        stack.add(ASTVerbSimple())
    }

    private fun userCode372() {
        val tmp654 = stack.removeLast()
        (stack[stack.size - 1] as ASTVerbSimple).astAssign(0, tmp654)
    }

    private fun userCode373() {
        stack.add(ASTObjectListPath())
    }

    private fun userCode374() {
        val tmp656 = stack.removeLast()
        (stack[stack.size - 1] as ASTObjectListPath).astAssign(0, tmp656)
    }

    private fun userCode375() {
        stack.add(ASTListOfObjectPath())
    }

    private fun userCode376() {
        val tmp655 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfObjectPath).astAssign(0, tmp655)
    }

    private fun userCode377() {
        val tmp657 = stack.removeLast()
        (stack[stack.size - 1] as ASTObjectListPath).astAssign(1, tmp657)
    }

    private fun userCode378() {
        stack.add(ASTObjectPath())
    }

    private fun userCode379() {
        val tmp658 = stack.removeLast()
        (stack[stack.size - 1] as ASTObjectPath).astAssign(0, tmp658)
    }

    private fun userCode380() {
        stack.add(ASTPath())
    }

    private fun userCode381() {
        val tmp659 = stack.removeLast()
        (stack[stack.size - 1] as ASTPath).astAssign(0, tmp659)
    }

    private fun userCode382() {
        stack.add(ASTPathAlternative())
    }

    private fun userCode383() {
        val tmp661 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathAlternative).astAssign(0, tmp661)
    }

    private fun userCode384() {
        stack.add(ASTListOfPathSequence())
    }

    private fun userCode385() {
        val tmp660 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfPathSequence).astAssign(0, tmp660)
    }

    private fun userCode386() {
        val tmp662 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathAlternative).astAssign(1, tmp662)
    }

    private fun userCode387() {
        stack.add(ASTPathSequence())
    }

    private fun userCode388() {
        val tmp664 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathSequence).astAssign(0, tmp664)
    }

    private fun userCode389() {
        stack.add(ASTListOfPathEltOrInverse())
    }

    private fun userCode390() {
        val tmp663 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfPathEltOrInverse).astAssign(0, tmp663)
    }

    private fun userCode391() {
        val tmp665 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathSequence).astAssign(1, tmp665)
    }

    private fun userCode392() {
        stack.add(ASTPathElt())
    }

    private fun userCode393() {
        val tmp666 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathElt).astAssign(0, tmp666)
    }

    private fun userCode394() {
        stack.add(ASTAnonymous("optional"))
    }

    private fun userCode395() {
        stack.add(ASTAnonymous("any"))
    }

    private fun userCode396() {
        stack.add(ASTAnonymous("atLeastOne"))
    }

    private fun userCode397() {
        val tmp667 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathElt).astAssign(1, tmp667)
    }

    private fun userCode398() {
        stack.add(ASTPathEltOrInverse())
    }

    private fun userCode399() {
        stack.add(ASTAnonymous("negated"))
    }

    private fun userCode400() {
        val tmp668 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathEltOrInverse).astAssign(0, tmp668)
    }

    private fun userCode401() {
        val tmp669 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathEltOrInverse).astAssign(1, tmp669)
    }

    private fun userCode402() {
        stack.add(ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySetOptional())
    }

    private fun userCode403() {
        stack.add(ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet())
    }

    private fun userCode404() {
        val tmp671 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet).astAssign(0, tmp671)
    }

    private fun userCode405() {
        stack.add(ASTListOfPathOneInPropertySet())
    }

    private fun userCode406() {
        val tmp670 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfPathOneInPropertySet).astAssign(0, tmp670)
    }

    private fun userCode407() {
        val tmp672 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySet).astAssign(1, tmp672)
    }

    private fun userCode408() {
        val tmp673 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfPathOneInPropertySetAndListOfPathOneInPropertySetOptional).astAssign(0, tmp673)
    }

    private fun userCode409() {
        stack.add(ASTPathOneInPropertySet())
    }

    private fun userCode410() {
        val tmp675 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathOneInPropertySet).astAssign(0, tmp675)
    }

    private fun userCode411() {
        val tmp676 = stack.removeLast()
        (stack[stack.size - 1] as ASTPathOneInPropertySet).astAssign(1, tmp676)
    }

    private fun userCode412() {
        stack.add(ASTInteger())
    }

    private fun userCode413() {
        val tmp677 = stack.removeLast()
        (stack[stack.size - 1] as ASTInteger).astAssign(0, tmp677)
    }

    private fun userCode414() {
        stack.add(ASTBlankNodePropertyList())
    }

    private fun userCode415() {
        val tmp678 = stack.removeLast()
        (stack[stack.size - 1] as ASTBlankNodePropertyList).astAssign(0, tmp678)
    }

    private fun userCode416() {
        stack.add(ASTBlankNodePropertyListPath())
    }

    private fun userCode417() {
        val tmp679 = stack.removeLast()
        (stack[stack.size - 1] as ASTBlankNodePropertyListPath).astAssign(0, tmp679)
    }

    private fun userCode418() {
        stack.add(ASTCollection())
    }

    private fun userCode419() {
        stack.add(ASTListOfGraphNode())
    }

    private fun userCode420() {
        val tmp680 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfGraphNode).astAssign(0, tmp680)
    }

    private fun userCode421() {
        val tmp681 = stack.removeLast()
        (stack[stack.size - 1] as ASTCollection).astAssign(0, tmp681)
    }

    private fun userCode422() {
        stack.add(ASTCollectionPath())
    }

    private fun userCode423() {
        stack.add(ASTListOfGraphNodePath())
    }

    private fun userCode424() {
        val tmp682 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfGraphNodePath).astAssign(0, tmp682)
    }

    private fun userCode425() {
        val tmp683 = stack.removeLast()
        (stack[stack.size - 1] as ASTCollectionPath).astAssign(0, tmp683)
    }

    private fun userCode426() {
        stack.add(ASTVar1())
    }

    private fun userCode427() {
        val tmp684 = stack.removeLast()
        (stack[stack.size - 1] as ASTVar1).astAssign(0, tmp684)
    }

    private fun userCode428() {
        stack.add(ASTVar2())
    }

    private fun userCode429() {
        val tmp685 = stack.removeLast()
        (stack[stack.size - 1] as ASTVar2).astAssign(0, tmp685)
    }

    private fun userCode430() {
        stack.add(ASTExpression())
    }

    private fun userCode431() {
        val tmp686 = stack.removeLast()
        (stack[stack.size - 1] as ASTExpression).astAssign(0, tmp686)
    }

    private fun userCode432() {
        stack.add(ASTConditionalOrExpression())
    }

    private fun userCode433() {
        val tmp688 = stack.removeLast()
        (stack[stack.size - 1] as ASTConditionalOrExpression).astAssign(0, tmp688)
    }

    private fun userCode434() {
        stack.add(ASTListOfConditionalAndExpression())
    }

    private fun userCode435() {
        val tmp687 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfConditionalAndExpression).astAssign(0, tmp687)
    }

    private fun userCode436() {
        val tmp689 = stack.removeLast()
        (stack[stack.size - 1] as ASTConditionalOrExpression).astAssign(1, tmp689)
    }

    private fun userCode437() {
        stack.add(ASTConditionalAndExpression())
    }

    private fun userCode438() {
        val tmp691 = stack.removeLast()
        (stack[stack.size - 1] as ASTConditionalAndExpression).astAssign(0, tmp691)
    }

    private fun userCode439() {
        stack.add(ASTListOfValueLogical())
    }

    private fun userCode440() {
        val tmp690 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfValueLogical).astAssign(0, tmp690)
    }

    private fun userCode441() {
        val tmp692 = stack.removeLast()
        (stack[stack.size - 1] as ASTConditionalAndExpression).astAssign(1, tmp692)
    }

    private fun userCode442() {
        stack.add(ASTValueLogical())
    }

    private fun userCode443() {
        val tmp693 = stack.removeLast()
        (stack[stack.size - 1] as ASTValueLogical).astAssign(0, tmp693)
    }

    private fun userCode444() {
        stack.add(ASTRelationalExpression())
    }

    private fun userCode445() {
        val tmp695 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpression).astAssign(0, tmp695)
    }

    private fun userCode446() {
        stack.add(ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional())
    }

    private fun userCode447() {
        val tmp694 = stack.removeLast()
        (stack[stack.size - 1] as ASTInterfaceOfRelationalExpressionEQOrRelationalExpressionNEQOrRelationalExpressionLTOrRelationalExpressionGTOrRelationalExpressionLEQOrRelationalExpressionGEQOrRelationalExpressionINOrRelationalExpressionNOTINOptional).astAssign(0, tmp694)
    }

    private fun userCode448() {
        val tmp696 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpression).astAssign(1, tmp696)
    }

    private fun userCode449() {
        stack.add(ASTRelationalExpressionEQ())
    }

    private fun userCode450() {
        val tmp697 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionEQ).astAssign(0, tmp697)
    }

    private fun userCode451() {
        stack.add(ASTRelationalExpressionNEQ())
    }

    private fun userCode452() {
        val tmp698 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionNEQ).astAssign(0, tmp698)
    }

    private fun userCode453() {
        stack.add(ASTRelationalExpressionLT())
    }

    private fun userCode454() {
        val tmp699 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionLT).astAssign(0, tmp699)
    }

    private fun userCode455() {
        stack.add(ASTRelationalExpressionGT())
    }

    private fun userCode456() {
        val tmp700 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionGT).astAssign(0, tmp700)
    }

    private fun userCode457() {
        stack.add(ASTRelationalExpressionLEQ())
    }

    private fun userCode458() {
        val tmp701 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionLEQ).astAssign(0, tmp701)
    }

    private fun userCode459() {
        stack.add(ASTRelationalExpressionGEQ())
    }

    private fun userCode460() {
        val tmp702 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionGEQ).astAssign(0, tmp702)
    }

    private fun userCode461() {
        stack.add(ASTRelationalExpressionIN())
    }

    private fun userCode462() {
        val tmp703 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionIN).astAssign(0, tmp703)
    }

    private fun userCode463() {
        stack.add(ASTRelationalExpressionNOTIN())
    }

    private fun userCode464() {
        val tmp704 = stack.removeLast()
        (stack[stack.size - 1] as ASTRelationalExpressionNOTIN).astAssign(0, tmp704)
    }

    private fun userCode465() {
        stack.add(ASTNumericExpression())
    }

    private fun userCode466() {
        val tmp705 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericExpression).astAssign(0, tmp705)
    }

    private fun userCode467() {
        stack.add(ASTAdditiveExpression())
    }

    private fun userCode468() {
        val tmp710 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpression).astAssign(0, tmp710)
    }

    private fun userCode469() {
        stack.add(ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE())
    }

    private fun userCode470() {
        stack.add(ASTClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE())
    }

    private fun userCode471() {
        val tmp707 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE).astAssign(0, tmp707)
    }

    private fun userCode472() {
        stack.add(ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE())
    }

    private fun userCode473() {
        val tmp706 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE).astAssign(0, tmp706)
    }

    private fun userCode474() {
        val tmp708 = stack.removeLast()
        (stack[stack.size - 1] as ASTClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE).astAssign(1, tmp708)
    }

    private fun userCode475() {
        val tmp709 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfInterfaceOfAdditiveExpressionPLUSOrAdditiveExpressionMINUSOrClassOfInterfaceOfNumericLiteralPositiveOrNumericLiteralNegativeAndListOfInterfaceOfAdditiveExpressionMULTIPLYOrAdditiveExpressionDIVIDE).astAssign(0, tmp709)
    }

    private fun userCode476() {
        val tmp711 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpression).astAssign(1, tmp711)
    }

    private fun userCode477() {
        stack.add(ASTAdditiveExpressionPLUS())
    }

    private fun userCode478() {
        val tmp712 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpressionPLUS).astAssign(0, tmp712)
    }

    private fun userCode479() {
        stack.add(ASTAdditiveExpressionMINUS())
    }

    private fun userCode480() {
        val tmp713 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpressionMINUS).astAssign(0, tmp713)
    }

    private fun userCode481() {
        stack.add(ASTAdditiveExpressionMULTIPLY())
    }

    private fun userCode482() {
        val tmp714 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpressionMULTIPLY).astAssign(0, tmp714)
    }

    private fun userCode483() {
        stack.add(ASTAdditiveExpressionDIVIDE())
    }

    private fun userCode484() {
        val tmp715 = stack.removeLast()
        (stack[stack.size - 1] as ASTAdditiveExpressionDIVIDE).astAssign(0, tmp715)
    }

    private fun userCode485() {
        stack.add(ASTMultiplicativeExpression())
    }

    private fun userCode486() {
        val tmp717 = stack.removeLast()
        (stack[stack.size - 1] as ASTMultiplicativeExpression).astAssign(0, tmp717)
    }

    private fun userCode487() {
        stack.add(ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE())
    }

    private fun userCode488() {
        val tmp716 = stack.removeLast()
        (stack[stack.size - 1] as ASTListOfInterfaceOfMultiplicativeExpressionMULTIPLYOrMultiplicativeExpressionDIVIDE).astAssign(0, tmp716)
    }

    private fun userCode489() {
        val tmp718 = stack.removeLast()
        (stack[stack.size - 1] as ASTMultiplicativeExpression).astAssign(1, tmp718)
    }

    private fun userCode490() {
        stack.add(ASTMultiplicativeExpressionMULTIPLY())
    }

    private fun userCode491() {
        val tmp719 = stack.removeLast()
        (stack[stack.size - 1] as ASTMultiplicativeExpressionMULTIPLY).astAssign(0, tmp719)
    }

    private fun userCode492() {
        stack.add(ASTMultiplicativeExpressionDIVIDE())
    }

    private fun userCode493() {
        val tmp720 = stack.removeLast()
        (stack[stack.size - 1] as ASTMultiplicativeExpressionDIVIDE).astAssign(0, tmp720)
    }

    private fun userCode494() {
        stack.add(ASTUnaryExpressionNOT())
    }

    private fun userCode495() {
        val tmp721 = stack.removeLast()
        (stack[stack.size - 1] as ASTUnaryExpressionNOT).astAssign(0, tmp721)
    }

    private fun userCode496() {
        stack.add(ASTUnaryExpressionPLUS())
    }

    private fun userCode497() {
        val tmp722 = stack.removeLast()
        (stack[stack.size - 1] as ASTUnaryExpressionPLUS).astAssign(0, tmp722)
    }

    private fun userCode498() {
        stack.add(ASTUnaryExpressionMINUS())
    }

    private fun userCode499() {
        val tmp723 = stack.removeLast()
        (stack[stack.size - 1] as ASTUnaryExpressionMINUS).astAssign(0, tmp723)
    }

    private fun userCode500() {
        stack.add(ASTBrackettedExpression())
    }

    private fun userCode501() {
        val tmp724 = stack.removeLast()
        (stack[stack.size - 1] as ASTBrackettedExpression).astAssign(0, tmp724)
    }

    private fun userCode502() {
        stack.add(ASTBuiltInCallYear())
    }

    private fun userCode503() {
        val tmp725 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallYear).astAssign(0, tmp725)
    }

    private fun userCode504() {
        stack.add(ASTBuiltInCallMonth())
    }

    private fun userCode505() {
        val tmp726 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallMonth).astAssign(0, tmp726)
    }

    private fun userCode506() {
        stack.add(ASTBuiltInCallHours())
    }

    private fun userCode507() {
        val tmp727 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallHours).astAssign(0, tmp727)
    }

    private fun userCode508() {
        stack.add(ASTBuiltInCallNow())
    }

    private fun userCode509() {
        val tmp728 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallNow).astAssign(0, tmp728)
    }

    private fun userCode510() {
        stack.add(ASTBuiltInCallSameTerm())
    }

    private fun userCode511() {
        val tmp729 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSameTerm).astAssign(0, tmp729)
    }

    private fun userCode512() {
        val tmp730 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSameTerm).astAssign(1, tmp730)
    }

    private fun userCode513() {
        stack.add(ASTBuiltInCallIsIri())
    }

    private fun userCode514() {
        val tmp731 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIsIri).astAssign(0, tmp731)
    }

    private fun userCode515() {
        stack.add(ASTBuiltInCallIsBlanc())
    }

    private fun userCode516() {
        val tmp732 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIsBlanc).astAssign(0, tmp732)
    }

    private fun userCode517() {
        stack.add(ASTBuiltInCallIsLiteral())
    }

    private fun userCode518() {
        val tmp733 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIsLiteral).astAssign(0, tmp733)
    }

    private fun userCode519() {
        stack.add(ASTBuiltInCallMD5())
    }

    private fun userCode520() {
        val tmp734 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallMD5).astAssign(0, tmp734)
    }

    private fun userCode521() {
        stack.add(ASTBuiltInCallUUID())
    }

    private fun userCode522() {
        val tmp735 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallUUID).astAssign(0, tmp735)
    }

    private fun userCode523() {
        stack.add(ASTBuiltInCallSTRUUID())
    }

    private fun userCode524() {
        val tmp736 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSTRUUID).astAssign(0, tmp736)
    }

    private fun userCode525() {
        stack.add(ASTBuiltInCallSHA1())
    }

    private fun userCode526() {
        val tmp737 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSHA1).astAssign(0, tmp737)
    }

    private fun userCode527() {
        stack.add(ASTBuiltInCallSHA384())
    }

    private fun userCode528() {
        val tmp738 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSHA384).astAssign(0, tmp738)
    }

    private fun userCode529() {
        stack.add(ASTBuiltInCallSHA512())
    }

    private fun userCode530() {
        val tmp739 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSHA512).astAssign(0, tmp739)
    }

    private fun userCode531() {
        stack.add(ASTBuiltInCallCoalesce())
    }

    private fun userCode532() {
        val tmp740 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallCoalesce).astAssign(0, tmp740)
    }

    private fun userCode533() {
        stack.add(ASTBuiltInCallIf())
    }

    private fun userCode534() {
        val tmp741 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIf).astAssign(0, tmp741)
    }

    private fun userCode535() {
        val tmp742 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIf).astAssign(1, tmp742)
    }

    private fun userCode536() {
        val tmp743 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIf).astAssign(2, tmp743)
    }

    private fun userCode537() {
        stack.add(ASTBuiltInCallStrLang())
    }

    private fun userCode538() {
        val tmp744 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrLang).astAssign(0, tmp744)
    }

    private fun userCode539() {
        val tmp745 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrLang).astAssign(1, tmp745)
    }

    private fun userCode540() {
        stack.add(ASTBuiltInCallIsUri())
    }

    private fun userCode541() {
        val tmp746 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIsUri).astAssign(0, tmp746)
    }

    private fun userCode542() {
        stack.add(ASTBuiltInCallMinutes())
    }

    private fun userCode543() {
        val tmp747 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallMinutes).astAssign(0, tmp747)
    }

    private fun userCode544() {
        stack.add(ASTBuiltInCallSHA256())
    }

    private fun userCode545() {
        val tmp748 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSHA256).astAssign(0, tmp748)
    }

    private fun userCode546() {
        stack.add(ASTBuiltInCallStrDt())
    }

    private fun userCode547() {
        val tmp749 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrDt).astAssign(0, tmp749)
    }

    private fun userCode548() {
        val tmp750 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrDt).astAssign(1, tmp750)
    }

    private fun userCode549() {
        stack.add(ASTBuiltInCallIsNumeric())
    }

    private fun userCode550() {
        val tmp751 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIsNumeric).astAssign(0, tmp751)
    }

    private fun userCode551() {
        stack.add(ASTBuiltInCallSeconds())
    }

    private fun userCode552() {
        val tmp752 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallSeconds).astAssign(0, tmp752)
    }

    private fun userCode553() {
        stack.add(ASTBuiltInCallTimezone())
    }

    private fun userCode554() {
        val tmp753 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallTimezone).astAssign(0, tmp753)
    }

    private fun userCode555() {
        stack.add(ASTBuiltInCallTz())
    }

    private fun userCode556() {
        val tmp754 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallTz).astAssign(0, tmp754)
    }

    private fun userCode557() {
        stack.add(ASTBuiltInCallConcat())
    }

    private fun userCode558() {
        val tmp755 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallConcat).astAssign(0, tmp755)
    }

    private fun userCode559() {
        stack.add(ASTBuiltInCallStrLen())
    }

    private fun userCode560() {
        val tmp756 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrLen).astAssign(0, tmp756)
    }

    private fun userCode561() {
        stack.add(ASTBuiltInCallUCase())
    }

    private fun userCode562() {
        val tmp757 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallUCase).astAssign(0, tmp757)
    }

    private fun userCode563() {
        stack.add(ASTBuiltInCallStrBefore())
    }

    private fun userCode564() {
        val tmp758 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrBefore).astAssign(0, tmp758)
    }

    private fun userCode565() {
        val tmp759 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrBefore).astAssign(1, tmp759)
    }

    private fun userCode566() {
        stack.add(ASTBuiltInCallStrAfter())
    }

    private fun userCode567() {
        val tmp760 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrAfter).astAssign(0, tmp760)
    }

    private fun userCode568() {
        val tmp761 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrAfter).astAssign(1, tmp761)
    }

    private fun userCode569() {
        stack.add(ASTBuiltInCallEncodeForUri())
    }

    private fun userCode570() {
        val tmp762 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallEncodeForUri).astAssign(0, tmp762)
    }

    private fun userCode571() {
        stack.add(ASTBuiltInCallContains())
    }

    private fun userCode572() {
        val tmp763 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallContains).astAssign(0, tmp763)
    }

    private fun userCode573() {
        val tmp764 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallContains).astAssign(1, tmp764)
    }

    private fun userCode574() {
        stack.add(ASTBuiltInCallStrStarts())
    }

    private fun userCode575() {
        val tmp765 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrStarts).astAssign(0, tmp765)
    }

    private fun userCode576() {
        val tmp766 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrStarts).astAssign(1, tmp766)
    }

    private fun userCode577() {
        stack.add(ASTBuiltInCallStrEnds())
    }

    private fun userCode578() {
        val tmp767 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrEnds).astAssign(0, tmp767)
    }

    private fun userCode579() {
        val tmp768 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStrEnds).astAssign(1, tmp768)
    }

    private fun userCode580() {
        stack.add(ASTBuiltInCallDay())
    }

    private fun userCode581() {
        val tmp769 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallDay).astAssign(0, tmp769)
    }

    private fun userCode582() {
        stack.add(ASTBuiltInCallStr())
    }

    private fun userCode583() {
        val tmp770 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallStr).astAssign(0, tmp770)
    }

    private fun userCode584() {
        stack.add(ASTBuiltInCallLang())
    }

    private fun userCode585() {
        val tmp771 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallLang).astAssign(0, tmp771)
    }

    private fun userCode586() {
        stack.add(ASTBuildInCallLangMatches())
    }

    private fun userCode587() {
        val tmp772 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuildInCallLangMatches).astAssign(0, tmp772)
    }

    private fun userCode588() {
        val tmp773 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuildInCallLangMatches).astAssign(1, tmp773)
    }

    private fun userCode589() {
        stack.add(ASTBuiltInCallDataType())
    }

    private fun userCode590() {
        val tmp774 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallDataType).astAssign(0, tmp774)
    }

    private fun userCode591() {
        stack.add(ASTBuiltInCallBound())
    }

    private fun userCode592() {
        val tmp775 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallBound).astAssign(0, tmp775)
    }

    private fun userCode593() {
        stack.add(ASTBuiltInCallIri())
    }

    private fun userCode594() {
        val tmp776 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallIri).astAssign(0, tmp776)
    }

    private fun userCode595() {
        stack.add(ASTBuiltInCallUri())
    }

    private fun userCode596() {
        val tmp777 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallUri).astAssign(0, tmp777)
    }

    private fun userCode597() {
        stack.add(ASTBuiltInCallBNode())
    }

    private fun userCode598() {
        val tmp778 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallBNode).astAssign(0, tmp778)
    }

    private fun userCode599() {
        stack.add(ASTBuiltInCallRand())
    }

    private fun userCode600() {
        val tmp779 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallRand).astAssign(0, tmp779)
    }

    private fun userCode601() {
        stack.add(ASTBuiltInCallAbs())
    }

    private fun userCode602() {
        val tmp780 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallAbs).astAssign(0, tmp780)
    }

    private fun userCode603() {
        stack.add(ASTBuiltInCallCeil())
    }

    private fun userCode604() {
        val tmp781 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallCeil).astAssign(0, tmp781)
    }

    private fun userCode605() {
        stack.add(ASTBuiltInCallLCase())
    }

    private fun userCode606() {
        val tmp782 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallLCase).astAssign(0, tmp782)
    }

    private fun userCode607() {
        stack.add(ASTBuiltInCallFloor())
    }

    private fun userCode608() {
        val tmp783 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallFloor).astAssign(0, tmp783)
    }

    private fun userCode609() {
        stack.add(ASTBuiltInCallRound())
    }

    private fun userCode610() {
        val tmp784 = stack.removeLast()
        (stack[stack.size - 1] as ASTBuiltInCallRound).astAssign(0, tmp784)
    }

    private fun userCode611() {
        stack.add(ASTRegexExpression())
    }

    private fun userCode612() {
        val tmp786 = stack.removeLast()
        (stack[stack.size - 1] as ASTRegexExpression).astAssign(0, tmp786)
    }

    private fun userCode613() {
        val tmp787 = stack.removeLast()
        (stack[stack.size - 1] as ASTRegexExpression).astAssign(1, tmp787)
    }

    private fun userCode614() {
        stack.add(ASTExpressionOptional())
    }

    private fun userCode615() {
        val tmp785 = stack.removeLast()
        (stack[stack.size - 1] as ASTExpressionOptional).astAssign(0, tmp785)
    }

    private fun userCode616() {
        val tmp788 = stack.removeLast()
        (stack[stack.size - 1] as ASTRegexExpression).astAssign(2, tmp788)
    }

    private fun userCode617() {
        stack.add(ASTSubstringExpression())
    }

    private fun userCode618() {
        val tmp790 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubstringExpression).astAssign(0, tmp790)
    }

    private fun userCode619() {
        val tmp791 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubstringExpression).astAssign(1, tmp791)
    }

    private fun userCode620() {
        val tmp789 = stack.removeLast()
        (stack[stack.size - 1] as ASTExpressionOptional).astAssign(0, tmp789)
    }

    private fun userCode621() {
        val tmp792 = stack.removeLast()
        (stack[stack.size - 1] as ASTSubstringExpression).astAssign(2, tmp792)
    }

    private fun userCode622() {
        stack.add(ASTStrReplaceExpression())
    }

    private fun userCode623() {
        val tmp794 = stack.removeLast()
        (stack[stack.size - 1] as ASTStrReplaceExpression).astAssign(0, tmp794)
    }

    private fun userCode624() {
        val tmp795 = stack.removeLast()
        (stack[stack.size - 1] as ASTStrReplaceExpression).astAssign(1, tmp795)
    }

    private fun userCode625() {
        val tmp796 = stack.removeLast()
        (stack[stack.size - 1] as ASTStrReplaceExpression).astAssign(2, tmp796)
    }

    private fun userCode626() {
        val tmp793 = stack.removeLast()
        (stack[stack.size - 1] as ASTExpressionOptional).astAssign(0, tmp793)
    }

    private fun userCode627() {
        val tmp797 = stack.removeLast()
        (stack[stack.size - 1] as ASTStrReplaceExpression).astAssign(3, tmp797)
    }

    private fun userCode628() {
        stack.add(ASTExistsFunc())
    }

    private fun userCode629() {
        val tmp798 = stack.removeLast()
        (stack[stack.size - 1] as ASTExistsFunc).astAssign(0, tmp798)
    }

    private fun userCode630() {
        stack.add(ASTNotExistsFunc())
    }

    private fun userCode631() {
        val tmp799 = stack.removeLast()
        (stack[stack.size - 1] as ASTNotExistsFunc).astAssign(0, tmp799)
    }

    private fun userCode632() {
        stack.add(ASTAggregateAvg())
    }

    private fun userCode633() {
        val tmp800 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateAvg).astAssign(0, tmp800)
    }

    private fun userCode634() {
        val tmp801 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateAvg).astAssign(1, tmp801)
    }

    private fun userCode635() {
        stack.add(ASTAggregateCount())
    }

    private fun userCode636() {
        val tmp802 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateCount).astAssign(0, tmp802)
    }

    private fun userCode637() {
        val tmp803 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateCount).astAssign(1, tmp803)
    }

    private fun userCode638() {
        stack.add(ASTAggregateCountAll())
    }

    private fun userCode639() {
        stack.add(ASTAggregateSum())
    }

    private fun userCode640() {
        val tmp804 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateSum).astAssign(0, tmp804)
    }

    private fun userCode641() {
        val tmp805 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateSum).astAssign(1, tmp805)
    }

    private fun userCode642() {
        stack.add(ASTAggregateMin())
    }

    private fun userCode643() {
        val tmp806 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateMin).astAssign(0, tmp806)
    }

    private fun userCode644() {
        val tmp807 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateMin).astAssign(1, tmp807)
    }

    private fun userCode645() {
        stack.add(ASTAggregateMax())
    }

    private fun userCode646() {
        val tmp808 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateMax).astAssign(0, tmp808)
    }

    private fun userCode647() {
        val tmp809 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateMax).astAssign(1, tmp809)
    }

    private fun userCode648() {
        stack.add(ASTAggregateSample())
    }

    private fun userCode649() {
        val tmp810 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateSample).astAssign(0, tmp810)
    }

    private fun userCode650() {
        val tmp811 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateSample).astAssign(1, tmp811)
    }

    private fun userCode651() {
        stack.add(ASTAggregateGroupConcat())
    }

    private fun userCode652() {
        val tmp813 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateGroupConcat).astAssign(0, tmp813)
    }

    private fun userCode653() {
        val tmp814 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateGroupConcat).astAssign(1, tmp814)
    }

    private fun userCode654() {
        stack.add(ASTStringOptional())
    }

    private fun userCode655() {
        val tmp812 = stack.removeLast()
        (stack[stack.size - 1] as ASTStringOptional).astAssign(0, tmp812)
    }

    private fun userCode656() {
        val tmp815 = stack.removeLast()
        (stack[stack.size - 1] as ASTAggregateGroupConcat).astAssign(2, tmp815)
    }

    private fun userCode657() {
        stack.add(ASTiriOrFunction())
    }

    private fun userCode658() {
        val tmp817 = stack.removeLast()
        (stack[stack.size - 1] as ASTiriOrFunction).astAssign(0, tmp817)
    }

    private fun userCode659() {
        stack.add(ASTArgListOptional())
    }

    private fun userCode660() {
        val tmp816 = stack.removeLast()
        (stack[stack.size - 1] as ASTArgListOptional).astAssign(0, tmp816)
    }

    private fun userCode661() {
        val tmp818 = stack.removeLast()
        (stack[stack.size - 1] as ASTiriOrFunction).astAssign(1, tmp818)
    }

    private fun userCode662() {
        stack.add(ASTRDFLiteral())
    }

    private fun userCode663() {
        val tmp820 = stack.removeLast()
        (stack[stack.size - 1] as ASTRDFLiteral).astAssign(0, tmp820)
    }

    private fun userCode664() {
        stack.add(ASTInterfaceOfRDFLiteralLangOririOptional())
    }

    private fun userCode665() {
        val tmp819 = stack.removeLast()
        (stack[stack.size - 1] as ASTInterfaceOfRDFLiteralLangOririOptional).astAssign(0, tmp819)
    }

    private fun userCode666() {
        val tmp821 = stack.removeLast()
        (stack[stack.size - 1] as ASTRDFLiteral).astAssign(1, tmp821)
    }

    private fun userCode667() {
        stack.add(ASTRDFLiteralLang())
    }

    private fun userCode668() {
        val tmp822 = stack.removeLast()
        (stack[stack.size - 1] as ASTRDFLiteralLang).astAssign(0, tmp822)
    }

    private fun userCode669() {
        stack.add(ASTNumericLiteralUnsignedInteger())
    }

    private fun userCode670() {
        val tmp823 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralUnsignedInteger).astAssign(0, tmp823)
    }

    private fun userCode671() {
        stack.add(ASTNumericLiteralUnsignedDecimal())
    }

    private fun userCode672() {
        val tmp824 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralUnsignedDecimal).astAssign(0, tmp824)
    }

    private fun userCode673() {
        stack.add(ASTNumericLiteralUnsignedDouble())
    }

    private fun userCode674() {
        val tmp825 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralUnsignedDouble).astAssign(0, tmp825)
    }

    private fun userCode675() {
        stack.add(ASTNumericLiteralPositiveInteger())
    }

    private fun userCode676() {
        val tmp826 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralPositiveInteger).astAssign(0, tmp826)
    }

    private fun userCode677() {
        stack.add(ASTNumericLiteralPositiveDecimal())
    }

    private fun userCode678() {
        val tmp827 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralPositiveDecimal).astAssign(0, tmp827)
    }

    private fun userCode679() {
        stack.add(ASTNumericLiteralPositiveDouble())
    }

    private fun userCode680() {
        val tmp828 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralPositiveDouble).astAssign(0, tmp828)
    }

    private fun userCode681() {
        stack.add(ASTNumericLiteralNegativeInteger())
    }

    private fun userCode682() {
        val tmp829 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralNegativeInteger).astAssign(0, tmp829)
    }

    private fun userCode683() {
        stack.add(ASTNumericLiteralNegativeDecimal())
    }

    private fun userCode684() {
        val tmp830 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralNegativeDecimal).astAssign(0, tmp830)
    }

    private fun userCode685() {
        stack.add(ASTNumericLiteralNegativeDouble())
    }

    private fun userCode686() {
        val tmp831 = stack.removeLast()
        (stack[stack.size - 1] as ASTNumericLiteralNegativeDouble).astAssign(0, tmp831)
    }

    private fun userCode687() {
        stack.add(ASTBooleanLiteralTrue())
    }

    private fun userCode688() {
        stack.add(ASTBooleanLiteralFalse())
    }

    private fun userCode689() {
        stack.add(ASTString1())
    }

    private fun userCode690() {
        val tmp832 = stack.removeLast()
        (stack[stack.size - 1] as ASTString1).astAssign(0, tmp832)
    }

    private fun userCode691() {
        stack.add(ASTString2())
    }

    private fun userCode692() {
        val tmp833 = stack.removeLast()
        (stack[stack.size - 1] as ASTString2).astAssign(0, tmp833)
    }

    private fun userCode693() {
        stack.add(ASTString1long())
    }

    private fun userCode694() {
        val tmp834 = stack.removeLast()
        (stack[stack.size - 1] as ASTString1long).astAssign(0, tmp834)
    }

    private fun userCode695() {
        stack.add(ASTString2long())
    }

    private fun userCode696() {
        val tmp835 = stack.removeLast()
        (stack[stack.size - 1] as ASTString2long).astAssign(0, tmp835)
    }

    private fun userCode697() {
        stack.add(ASTiriRef())
    }

    private fun userCode698() {
        val tmp836 = stack.removeLast()
        (stack[stack.size - 1] as ASTiriRef).astAssign(0, tmp836)
    }

    private fun userCode699() {
        stack.add(ASTPrefixedNameLN())
    }

    private fun userCode700() {
        val tmp837 = stack.removeLast()
        (stack[stack.size - 1] as ASTPrefixedNameLN).astAssign(0, tmp837)
    }

    private fun userCode701() {
        stack.add(ASTPrefixedNameNS())
    }

    private fun userCode702() {
        val tmp838 = stack.removeLast()
        (stack[stack.size - 1] as ASTPrefixedNameNS).astAssign(0, tmp838)
    }

    private fun userCode703() {
        stack.add(ASTBlankNodeLabel())
    }

    private fun userCode704() {
        val tmp839 = stack.removeLast()
        (stack[stack.size - 1] as ASTBlankNodeLabel).astAssign(0, tmp839)
    }

    private fun userCode705() {
        stack.add(ASTBlankNodeANON())
    }

    private fun userCode706() {
        val tmp840 = stack.removeLast()
        (stack[stack.size - 1] as ASTBlankNodeANON).astAssign(0, tmp840)
    }

    private fun userCode707() {
        stack.add(ASTNILParam())
    }

    private fun userCode708() {
        val tmp841 = stack.removeLast()
        (stack[stack.size - 1] as ASTNILParam).astAssign(0, tmp841)
    }
}
